{"version":3,"file":"ajs-destination.bundle.8e6b895db75187c55313.js","mappings":"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","sources":["webpack://@segment/analytics-next/./src/lib/is-plan-event-enabled.ts","webpack://@segment/analytics-next/./src/plugins/ajs-destination/loader.ts","webpack://@segment/analytics-next/./src/plugins/ajs-destination/index.ts","webpack://@segment/analytics-next/./src/plugins/ajs-destination/utils.ts"],"sourcesContent":["import { PlanEvent, TrackPlan } from '../core/events/interfaces'\n\n/**\n * Determines whether a track event is allowed to be sent based on the\n * user's tracking plan.\n * If the user does not have a tracking plan or the event is allowed based\n * on the tracking plan configuration, returns true.\n */\nexport function isPlanEventEnabled(\n  plan: TrackPlan | undefined,\n  planEvent: PlanEvent | undefined\n): boolean {\n  // Always prioritize the event's `enabled` status\n  if (typeof planEvent?.enabled === 'boolean') {\n    return planEvent.enabled\n  }\n\n  // Assume absence of a tracking plan means events are enabled\n  return plan?.__default?.enabled ?? true\n}\n","import { Analytics } from '../../core/analytics'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\nimport { RemoteIntegrationSettings } from '../../browser/settings'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  integrationConfig?: RemoteIntegrationSettings\n): string {\n  return (\n    integrationConfig?.versionSettings?.override ??\n    integrationConfig?.versionSettings?.version ??\n    'latest'\n  )\n}\n","import { JSONObject } from '../../core/events'\nimport { Alias, Facade, Group, Identify, Page, Track } from '@segment/facade'\nimport { Analytics, InitOptions } from '../../core/analytics'\nimport { CDNSettings } from '../../browser'\nimport { isOffline, isOnline } from '../../core/connection'\nimport { Context, ContextCancelation } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { InternalPluginWithAddMiddleware, Plugin } from '../../core/plugin'\nimport { attempt } from '@segment/analytics-core'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { mergedOptions } from '../../lib/merged-options'\nimport { pWhile } from '../../lib/p-while'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport {\n  applyDestinationMiddleware,\n  DestinationMiddlewareFunction,\n} from '../middleware'\nimport {\n  buildIntegration,\n  loadIntegration,\n  resolveIntegrationNameFromSource,\n  resolveVersion,\n  unloadIntegration,\n} from './loader'\nimport { LegacyIntegration, ClassicIntegrationSource } from './types'\nimport { isPlainObject } from '@segment/analytics-core'\nimport {\n  isDisabledIntegration as shouldSkipIntegration,\n  isInstallableIntegration,\n} from './utils'\nimport { recordIntegrationMetric } from '../../core/stats/metric-helpers'\nimport { createDeferred } from '@segment/analytics-generic-utils'\nimport { IntegrationsInitOptions } from '../../browser/settings'\n\nexport type ClassType<T> = new (...args: unknown[]) => T\n\nasync function flushQueue(\n  xt: Plugin,\n  queue: PriorityQueue<Context>\n): Promise<PriorityQueue<Context>> {\n  const failedQueue: Context[] = []\n\n  if (isOffline()) {\n    return queue\n  }\n\n  await pWhile(\n    () => queue.length > 0 && isOnline(),\n    async () => {\n      const ctx = queue.pop()\n      if (!ctx) {\n        return\n      }\n\n      const result = await attempt(ctx, xt)\n      const success = result instanceof Context\n      if (!success) {\n        failedQueue.push(ctx)\n      }\n    }\n  )\n\n  // re-add failed tasks\n  failedQueue.map((failed) => queue.pushWithBackoff(failed))\n  return queue\n}\n\nexport class LegacyDestination implements InternalPluginWithAddMiddleware {\n  name: string\n  version: string\n  settings: JSONObject\n  options: InitOptions = {}\n  readonly type = 'destination'\n  middleware: DestinationMiddlewareFunction[] = []\n\n  private _ready: boolean | undefined\n  private _initialized: boolean | undefined\n  private onReady: Promise<unknown> | undefined\n  private initializePromise = createDeferred<boolean>()\n  private disableAutoISOConversion: boolean\n\n  integrationSource?: ClassicIntegrationSource\n  integration: LegacyIntegration | undefined\n\n  buffer: PriorityQueue<Context>\n  flushing = false\n\n  constructor(\n    name: string,\n    version: string,\n    writeKey: string,\n    settings: JSONObject = {},\n    options: InitOptions,\n    integrationSource?: ClassicIntegrationSource\n  ) {\n    this.name = name\n    this.version = version\n    this.settings = { ...settings }\n    this.disableAutoISOConversion = options.disableAutoISOConversion || false\n    this.integrationSource = integrationSource\n\n    // AJS-Renderer sets an extraneous `type` setting that clobbers\n    // existing type defaults. We need to remove it if it's present\n    if (this.settings['type'] && this.settings['type'] === 'browser') {\n      delete this.settings['type']\n    }\n\n    this.initializePromise.promise.then(\n      (isInitialized) => (this._initialized = isInitialized),\n      () => {}\n    )\n\n    this.options = options\n    this.buffer = options.disableClientPersistence\n      ? new PriorityQueue(4, [])\n      : new PersistedPriorityQueue(4, `${writeKey}:dest-${name}`)\n\n    this.scheduleFlush()\n  }\n\n  isLoaded(): boolean {\n    return !!this._ready\n  }\n\n  ready(): Promise<unknown> {\n    return this.initializePromise.promise.then(\n      () => this.onReady ?? Promise.resolve()\n    )\n  }\n\n  async load(ctx: Context, analyticsInstance: Analytics): Promise<void> {\n    if (this._ready || this.onReady !== undefined) {\n      return\n    }\n\n    const integrationSource =\n      this.integrationSource ??\n      (await loadIntegration(\n        ctx,\n        this.name,\n        this.version,\n        this.options.obfuscate\n      ))\n\n    this.integration = buildIntegration(\n      integrationSource,\n      this.settings,\n      analyticsInstance\n    )\n\n    this.onReady = new Promise((resolve) => {\n      const onReadyFn = (): void => {\n        this._ready = true\n        resolve(true)\n      }\n\n      this.integration!.once('ready', onReadyFn)\n    })\n\n    this.integration!.on('initialize', () => {\n      this.initializePromise.resolve(true)\n    })\n\n    try {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n      })\n      this.integration.initialize()\n    } catch (error) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n        didError: true,\n      })\n      this.initializePromise.resolve(false)\n      throw error\n    }\n  }\n\n  unload(_ctx: Context, _analyticsInstance: Analytics): Promise<void> {\n    return unloadIntegration(this.name, this.version, this.options.obfuscate)\n  }\n\n  addMiddleware(...fn: DestinationMiddlewareFunction[]): void {\n    this.middleware = this.middleware.concat(...fn)\n  }\n\n  shouldBuffer(ctx: Context): boolean {\n    return (\n      // page events can't be buffered because of destinations that automatically add page views\n      ctx.event.type !== 'page' &&\n      (isOffline() || this._ready !== true || this._initialized !== true)\n    )\n  }\n\n  private async send<T extends Facade>(\n    ctx: Context,\n    clz: ClassType<T>,\n    eventType: 'track' | 'identify' | 'page' | 'alias' | 'group'\n  ): Promise<Context> {\n    if (this.shouldBuffer(ctx)) {\n      this.buffer.push(ctx)\n      this.scheduleFlush()\n      return ctx\n    }\n\n    const plan = this.options?.plan?.track\n    const ev = ctx.event.event\n\n    if (plan && ev && this.name !== 'Segment.io') {\n      // events are always sent to segment (legacy behavior)\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n      } else {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n        })\n      }\n\n      if (planEvent?.enabled && planEvent?.integrations![this.name] === false) {\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n      }\n    }\n\n    const afterMiddleware = await applyDestinationMiddleware(\n      this.name,\n      ctx.event,\n      this.middleware\n    )\n\n    if (afterMiddleware === null) {\n      return ctx\n    }\n\n    const event = new clz(afterMiddleware, {\n      traverse: !this.disableAutoISOConversion,\n    })\n\n    recordIntegrationMetric(ctx, {\n      integrationName: this.name,\n      methodName: eventType,\n      type: 'classic',\n    })\n\n    try {\n      if (this.integration) {\n        await this.integration!.invoke.call(this.integration, eventType, event)\n      }\n    } catch (err) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: eventType,\n        type: 'classic',\n        didError: true,\n      })\n      throw err\n    }\n\n    return ctx\n  }\n\n  async track(ctx: Context): Promise<Context> {\n    return this.send(ctx, Track as ClassType<Track>, 'track')\n  }\n\n  async page(ctx: Context): Promise<Context> {\n    if (this.integration?._assumesPageview && !this._initialized) {\n      this.integration.initialize()\n    }\n\n    await this.initializePromise.promise\n    return this.send(ctx, Page as ClassType<Page>, 'page')\n  }\n\n  async identify(ctx: Context): Promise<Context> {\n    return this.send(ctx, Identify as ClassType<Identify>, 'identify')\n  }\n\n  async alias(ctx: Context): Promise<Context> {\n    return this.send(ctx, Alias as ClassType<Alias>, 'alias')\n  }\n\n  async group(ctx: Context): Promise<Context> {\n    return this.send(ctx, Group as ClassType<Group>, 'group')\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushing) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      if (isOffline() || this._ready !== true || this._initialized !== true) {\n        this.scheduleFlush()\n        return\n      }\n\n      this.flushing = true\n      this.buffer = await flushQueue(this, this.buffer)\n      this.flushing = false\n\n      if (this.buffer.todo > 0) {\n        this.scheduleFlush()\n      }\n    }, Math.random() * 5000)\n  }\n}\n\nexport function ajsDestinations(\n  writeKey: string,\n  settings: CDNSettings,\n  integrations: IntegrationsInitOptions = {},\n  options: InitOptions = {},\n  routingMiddleware?: DestinationMiddlewareFunction,\n  legacyIntegrationSources?: ClassicIntegrationSource[]\n): LegacyDestination[] {\n  if (isServer()) {\n    return []\n  }\n\n  if (settings.plan) {\n    options = options ?? {}\n    options.plan = settings.plan\n  }\n\n  const routingRules = settings.middlewareSettings?.routingRules ?? []\n  const remoteIntegrationsConfig = settings.integrations\n  const localIntegrationsConfig = options.integrations\n  // merged remote CDN settings with user provided options\n  const integrationOptions = mergedOptions(settings, options ?? {}) as Record<\n    string,\n    JSONObject\n  >\n\n  const adhocIntegrationSources = legacyIntegrationSources?.reduce(\n    (acc, integrationSource) => ({\n      ...acc,\n      [resolveIntegrationNameFromSource(integrationSource)]: integrationSource,\n    }),\n    {} as Record<string, ClassicIntegrationSource>\n  )\n\n  const installableIntegrations = new Set([\n    // Remotely configured installable integrations\n    ...Object.keys(remoteIntegrationsConfig).filter((name) =>\n      isInstallableIntegration(name, remoteIntegrationsConfig[name])\n    ),\n\n    // Directly provided integration sources are only installable if settings for them are available\n    ...Object.keys(adhocIntegrationSources || {}).filter(\n      (name) =>\n        isPlainObject(remoteIntegrationsConfig[name]) ||\n        isPlainObject(localIntegrationsConfig?.[name])\n    ),\n  ])\n\n  return Array.from(installableIntegrations)\n    .filter((name) => !shouldSkipIntegration(name, integrations))\n    .map((name) => {\n      const integrationSettings = remoteIntegrationsConfig[name]\n      const version = resolveVersion(integrationSettings)\n      const destination = new LegacyDestination(\n        name,\n        version,\n        writeKey,\n        integrationOptions[name],\n        options,\n        adhocIntegrationSources?.[name]\n      )\n\n      const routing = routingRules.filter(\n        (rule) => rule.destinationName === name\n      )\n      if (routing.length > 0 && routingMiddleware) {\n        destination.addMiddleware(routingMiddleware)\n      }\n\n      return destination\n    })\n}\n","import { RemoteIntegrationSettings } from '../..'\nimport { IntegrationsInitOptions } from '../../browser/settings'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: RemoteIntegrationSettings\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  integrations: IntegrationsInitOptions\n) => {\n  const allDisableAndNotDefined =\n    integrations.All === false && integrations[integrationName] === undefined\n\n  return integrations[integrationName] === false || allDisableAndNotDefined\n}\n"],"names":["isPlanEventEnabled","plan","planEvent","enabled","__default","normalizeName","name","toLowerCase","replace","obfuscatePathName","pathName","obfuscate","btoa","undefined","loadIntegration","ctx","version","Promise","obfuscatedPathName","path","fullPath","metric","window","performance","getEntriesByName","stats","gauge","Math","round","duration","_","recordLoadMetrics","deps","all","map","dep","flushQueue","xt","queue","failedQueue","length","pop","result","push","failed","pushWithBackoff","writeKey","settings","options","integrationSource","type","middleware","initializePromise","flushing","this","disableAutoISOConversion","promise","then","isInitialized","_initialized","buffer","disableClientPersistence","scheduleFlush","isLoaded","_ready","ready","onReady","resolve","load","analyticsInstance","integration","integrationSettings","integrationCtr","user","addIntegration","Integration","analytics","buildIntegration","once","on","integrationName","methodName","initialize","error","didError","unload","_ctx","_analyticsInstance","unloadIntegration","addMiddleware","concat","fn","shouldBuffer","event","send","clz","eventType","track","ev","updateEvent","integrations","All","cancel","retry","reason","applyDestinationMiddleware","afterMiddleware","traverse","invoke","call","Track","page","_assumesPageview","Page","identify","Identify","alias","Alias","group","Group","setTimeout","todo","random","ajsDestinations","routingMiddleware","legacyIntegrationSources","routingRules","middlewareSettings","remoteIntegrationsConfig","localIntegrationsConfig","integrationOptions","adhocIntegrationSources","reduce","acc","prototype","resolveIntegrationNameFromSource","installableIntegrations","Set","Object","keys","filter","bundlingStatus","versionSettings","deviceMode","componentTypes","includes","startsWith","isInstallableIntegration","Array","from","allDisableAndNotDefined","integrationConfig","override","resolveVersion","destination","LegacyDestination","rule","destinationName"],"sourceRoot":""}