import { ref } from 'vue';
import { WalletInitializationError } from '../../../base/errors/index.js';
import { useSolanaWallet } from './useSolanaWallet.js';

const useSignMessage = () => {
  const {
    solanaWallet,
    accounts
  } = useSolanaWallet();
  const loading = ref(false);
  const error = ref(null);
  const data = ref(null);
  const signMessage = async (message, from) => {
    loading.value = true;
    error.value = null;
    try {
      var _accounts$value;
      if (!solanaWallet.value) throw WalletInitializationError.notReady();
      const signature = await solanaWallet.value.signMessage(message, from !== null && from !== void 0 ? from : (_accounts$value = accounts.value) === null || _accounts$value === void 0 ? void 0 : _accounts$value[0]);
      data.value = signature;
      return signature;
    } catch (err) {
      error.value = err;
    } finally {
      loading.value = false;
    }
  };
  return {
    loading,
    error,
    data,
    signMessage
  };
};

export { useSignMessage };
