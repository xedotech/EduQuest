import { getSiteIcon, getSiteName } from '../utils.js';
import { SOLANA_CAIP_CHAIN_MAP } from '../../base/constants.js';
import { CHAIN_NAMESPACES } from '@toruslabs/base-controllers';

let DEFAULT_EIP155_METHODS = /*#__PURE__*/function (DEFAULT_EIP155_METHODS) {
  DEFAULT_EIP155_METHODS["ETH_SEND_TRANSACTION"] = "eth_sendTransaction";
  DEFAULT_EIP155_METHODS["ETH_SIGN_TRANSACTION"] = "eth_signTransaction";
  DEFAULT_EIP155_METHODS["ETH_SIGN"] = "eth_sign";
  DEFAULT_EIP155_METHODS["PERSONAL_SIGN"] = "personal_sign";
  DEFAULT_EIP155_METHODS["ETH_SIGN_TYPED_DATA"] = "eth_signTypedData";
  DEFAULT_EIP155_METHODS["ETH_SIGN_TYPED_DATA_V3"] = "eth_signTypedData_v3";
  DEFAULT_EIP155_METHODS["ETH_SIGN_TYPED_DATA_V4"] = "eth_signTypedData_v4";
  DEFAULT_EIP155_METHODS["ADD_ETHEREUM_CHAIN"] = "wallet_addEthereumChain";
  DEFAULT_EIP155_METHODS["SWITCH_ETHEREUM_CHAIN"] = "wallet_switchEthereumChain";
  return DEFAULT_EIP155_METHODS;
}({});
let DEFAULT_SOLANA_METHODS = /*#__PURE__*/function (DEFAULT_SOLANA_METHODS) {
  DEFAULT_SOLANA_METHODS["SIGN_TRANSACTION"] = "solana_signTransaction";
  DEFAULT_SOLANA_METHODS["SIGN_MESSAGE"] = "solana_signMessage";
  return DEFAULT_SOLANA_METHODS;
}({});
let DEFAULT_EIP_155_EVENTS = /*#__PURE__*/function (DEFAULT_EIP_155_EVENTS) {
  DEFAULT_EIP_155_EVENTS["ETH_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_EIP_155_EVENTS["ETH_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_EIP_155_EVENTS;
}({});
let DEFAULT_SOLANA_EVENTS = /*#__PURE__*/function (DEFAULT_SOLANA_EVENTS) {
  DEFAULT_SOLANA_EVENTS["SOL_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_SOLANA_EVENTS["SOL_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_SOLANA_EVENTS;
}({});

/**
 * Gets site metadata and returns it
 *
 */
const getSiteMetadata = async () => ({
  name: getSiteName(window),
  icon: await getSiteIcon(window)
});
const getNamespacesFromChains = chains => {
  const supportedNamespaces = [];
  chains.forEach(chainId => {
    const [namespace] = chainId.split(":");
    if (!supportedNamespaces.includes(namespace)) {
      supportedNamespaces.push(namespace);
    }
  });
  return supportedNamespaces;
};
const getSupportedMethodsByNamespace = namespace => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP155_METHODS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_METHODS);
    default:
      throw new Error(`No default methods for namespace: ${namespace}`);
  }
};
const getSupportedEventsByNamespace = namespace => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP_155_EVENTS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_EVENTS);
    default:
      throw new Error(`No default events for namespace: ${namespace}`);
  }
};
const getRequiredNamespaces = chains => {
  const selectedNamespaces = getNamespacesFromChains(chains);
  return Object.fromEntries(selectedNamespaces.map(namespace => [namespace, {
    methods: getSupportedMethodsByNamespace(namespace),
    chains: chains.filter(chain => chain.startsWith(namespace)),
    events: getSupportedEventsByNamespace(namespace)
  }]));
};
const getWalletConnectV2Settings = async (chains, projectID) => {
  const appMetadata = await getSiteMetadata();
  const connectorSettings = {
    walletConnectInitOptions: {
      projectId: projectID,
      relayUrl: "wss://relay.walletconnect.com",
      metadata: {
        name: appMetadata.name,
        description: appMetadata.name,
        url: window.location.origin,
        icons: [appMetadata.icon || ""]
      }
    }
  };
  const chainNamespaces = chains.map(chain => {
    if (chain.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
      return `${chain.chainNamespace}:${SOLANA_CAIP_CHAIN_MAP[chain.chainId]}`;
    } else if (chain.chainNamespace === CHAIN_NAMESPACES.EIP155) {
      return `${chain.chainNamespace}:${parseInt(chain.chainId, 16)}`;
    }
    throw new Error(`Unsupported chain namespace: ${chain.chainNamespace}`);
  });
  const loginSettings = {
    optionalNamespaces: getRequiredNamespaces(chainNamespaces)
  };
  return {
    connectorSettings,
    loginSettings
  };
};

export { DEFAULT_EIP155_METHODS, DEFAULT_EIP_155_EVENTS, DEFAULT_SOLANA_EVENTS, DEFAULT_SOLANA_METHODS, getNamespacesFromChains, getRequiredNamespaces, getSupportedEventsByNamespace, getSupportedMethodsByNamespace, getWalletConnectV2Settings };
