import { JRPCEngine, providerFromEngine } from '@web3auth/auth';
import { createConfigMiddleware } from '../../../rpc/JrpcClient.js';
import { createSolanaMiddleware } from '../../../rpc/solanaRpcMiddlewares.js';
import { BaseProvider } from '../../../../base-provider/baseProvider.js';
import { WalletLoginError } from '../../../../../base/errors/index.js';

class BaseInjectedProvider extends BaseProvider {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
  }
  async switchChain(_) {
    throw WalletLoginError.unsupportedOperation("Chain switching is not supported by this connector");
  }
  async setupProvider(injectedProvider, chainId) {
    const engine = new JRPCEngine();
    const chain = this.getChain(chainId);
    const providerHandlers = this.getProviderHandlers(injectedProvider);
    const solanaMiddleware = createSolanaMiddleware(providerHandlers);
    engine.push(solanaMiddleware);
    const configMiddleware = createConfigMiddleware(chain);
    engine.push(configMiddleware);
    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);
    if (injectedProviderProxy) {
      engine.push(injectedProviderProxy);
    }
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
    await this.lookupNetwork(injectedProvider, chainId);
  }
  async lookupNetwork(_injectedProvider, chainId) {
    this.update({
      chainId
    });
    return chainId || "";
  }
  getInjectedProviderProxy(_) {
    return undefined;
  }
}

export { BaseInjectedProvider };
