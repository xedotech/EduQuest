import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { providerErrors, JRPCEngine, providerFromEngine, rpcErrors } from '@web3auth/auth';
import { createXrplJsonRpcClient } from '../../rpc/JrpcClient.js';
import { RPC_METHODS, createXRPLMiddleware, creatXrplChainSwitchMiddleware } from '../../rpc/xrplRpcMiddlewares.js';
import { getProviderHandlers } from './xrplWalletUtils.js';
import { BaseProvider } from '../../../base-provider/baseProvider.js';
import { CHAIN_NAMESPACES } from '@toruslabs/base-controllers';
import { WalletInitializationError } from '../../../../base/errors/index.js';

var _XrplPrivateKeyProvider;
class XrplPrivateKeyProvider extends BaseProvider {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "PROVIDER_CHAIN_NAMESPACE", CHAIN_NAMESPACES.XRPL);
  }
  async enable() {
    if (!this.state.privateKey) throw providerErrors.custom({
      message: "Private key is not found in state, plz pass it in constructor state param",
      code: 4902
    });
    await this.setupProvider(this.state.privateKey, this.chainId);
    return this._providerEngineProxy.request({
      method: RPC_METHODS.GET_ACCOUNTS
    });
  }
  async setupProvider(privKey, chainId) {
    const chain = this.getChain(chainId);
    const {
      wsTarget,
      chainNamespace
    } = chain;
    if (chainNamespace !== this.PROVIDER_CHAIN_NAMESPACE) throw WalletInitializationError.incompatibleChainNameSpace("Invalid chain namespace");
    if (!wsTarget) {
      throw WalletInitializationError.invalidParams(`wsTarget is required in chainConfig for xrplProvider`);
    }
    const providerHandlers = await getProviderHandlers({
      privKey,
      chainConfig: chain,
      keyExportEnabled: this.config.keyExportEnabled
    });
    const xrplWalletMiddleware = createXRPLMiddleware(providerHandlers);
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createXrplJsonRpcClient(chain);
    engine.push(this.getChainSwitchMiddleware());
    engine.push(xrplWalletMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
    await this.lookupNetwork(privKey, chainId);
    this.emit("chainChanged", chainId);
    this.emit("connect", {
      chainId
    });
    this.update({
      chainId
    });
  }
  async switchChain(params) {
    if (!this._providerEngineProxy) throw providerErrors.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    if (this.chainId === params.chainId) return;
    this.update({
      chainId: "loading"
    });
    const {
      privateKey
    } = await this._providerEngineProxy.request({
      method: RPC_METHODS.GET_KEY_PAIR
    });
    await this.setupProvider(privateKey, params.chainId);
  }
  async lookupNetwork(_privKey, chainId) {
    if (!this._providerEngineProxy) throw providerErrors.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    if (!chainId) throw rpcErrors.invalidParams("chainId is required while lookupNetwork");
    const pingResponse = await this._providerEngineProxy.request({
      method: "ping",
      params: []
    });
    if ((pingResponse === null || pingResponse === void 0 ? void 0 : pingResponse.status) !== "success") {
      const chain = this.getChain(chainId);
      throw WalletInitializationError.rpcConnectionError(`Failed to ping network for following rpc target: ${chain.rpcTarget}`);
    }
  }
  getChainSwitchMiddleware() {
    const chainSwitchHandlers = {
      switchChain: async req => {
        if (!req.params) throw rpcErrors.invalidParams("Missing request params");
        if (!req.params.chainId) throw rpcErrors.invalidParams("Missing chainId");
        await this.switchChain(req.params);
      }
    };
    const chainSwitchMiddleware = creatXrplChainSwitchMiddleware(chainSwitchHandlers);
    return chainSwitchMiddleware;
  }
}
_XrplPrivateKeyProvider = XrplPrivateKeyProvider;
_defineProperty(XrplPrivateKeyProvider, "getProviderInstance", async params => {
  const providerFactory = new _XrplPrivateKeyProvider({
    config: {
      chain: params.chain,
      chains: params.chains
    }
  });
  await providerFactory.setupProvider(params.privKey, params.chain.chainId);
  return providerFactory;
});

export { XrplPrivateKeyProvider };
