'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var util = require('@ethereumjs/util');
var auth = require('@web3auth/auth');
var viem = require('viem');
require('@babel/runtime/helpers/defineProperty');
require('@segment/analytics-next');
var loglevel = require('../../../base/loglevel.js');
require('@toruslabs/base-controllers');
require('../../../base/errors/index.js');
require('../../../base/wallet/index.js');
require('../../../base/connector/constants.js');
require('jwt-decode');
require('../../../base/plugin/errors.js');
require('../../../base/plugin/IPlugin.js');
require('@toruslabs/constants');
require('@toruslabs/http-helpers');

function getProviderHandlers({
  bundlerClient,
  smartAccount,
  chain,
  eoaProvider
}) {
  const walletClient = viem.createWalletClient({
    account: smartAccount,
    chain,
    transport: viem.http()
  });
  return {
    getAccounts: async _ => {
      const [smartAccounts, eoaAccounts] = await Promise.all([smartAccount.getAddress(), eoaProvider.request({
        method: "eth_accounts"
      })]);
      loglevel.log.info("smartAccounts", smartAccounts);
      loglevel.log.info("eoaAccounts", eoaAccounts);
      return [smartAccounts, ...eoaAccounts];
    },
    getPrivateKey: async _ => {
      throw auth.providerErrors.custom({
        message: "Smart accounts do not have private key",
        code: 4903
      });
    },
    getPublicKey: async _ => {
      throw auth.providerErrors.custom({
        message: "Smart accounts do not have a public key. Use address instead.",
        code: 4903
      });
    },
    processTransaction: async txParams => {
      if (txParams.input && !txParams.data) txParams.data = util.addHexPrefix(txParams.input);
      const {
        to,
        value,
        data
      } = txParams;
      // @ts-expect-error viem types are too deep
      const userOperationParams = {
        account: smartAccount,
        calls: [{
          to,
          // Explicit conversation required to avoid value being passed as hex
          value: BigInt(value),
          data
        }]
        // should not use maxFeePerGas/maxPriorityFeePerGas from transaction params since that's fee for transaction not user operation and let bundler handle it instead
      };
      const userOpHash = await bundlerClient.sendUserOperation(userOperationParams);
      const txReceipt = await bundlerClient.waitForUserOperationReceipt({
        hash: userOpHash
      });
      if (!txReceipt.success) {
        throw auth.providerErrors.custom({
          message: txReceipt.reason,
          code: 4905
        });
      }
      return txReceipt.receipt.transactionHash;
    },
    processSignTransaction: async txParams => {
      const {
        to,
        value,
        data
      } = txParams;
      const request = await bundlerClient.prepareUserOperation({
        account: smartAccount,
        calls: [{
          to,
          value: BigInt(value),
          data
        }]
      });
      const signature = await smartAccount.signUserOperation({
        callData: request.callData,
        callGasLimit: request.callGasLimit,
        maxFeePerGas: request.maxFeePerGas,
        maxPriorityFeePerGas: request.maxPriorityFeePerGas,
        nonce: request.nonce,
        preVerificationGas: request.preVerificationGas,
        verificationGasLimit: request.verificationGasLimit,
        signature: request.signature
      });
      return signature;
    },
    processEthSignMessage: async (_, req) => {
      return eoaProvider.request(req);
    },
    processPersonalMessage: async (msgParams, _) => {
      const message = msgParams.data;
      return walletClient.signMessage({
        account: smartAccount,
        message: util.isHexString(message) ? {
          raw: message
        } : message
      });
    },
    processTypedMessageV4: async (msgParams, _) => {
      try {
        const data = typeof msgParams.data === "string" ? JSON.parse(msgParams.data) : msgParams.data;
        const signature = await walletClient.signTypedData({
          account: smartAccount,
          domain: _objectSpread(_objectSpread({}, data.domain), {}, {
            verifyingContract: data.domain.verifyingContract,
            salt: data.domain.salt,
            chainId: Number(data.domain.chainId)
          }),
          primaryType: data.primaryType,
          types: data.types,
          message: data.message
        });
        return signature;
      } catch (error) {
        throw auth.providerErrors.custom({
          message: error instanceof Error ? error.message : "Failed to sign typed data",
          code: 4905
        });
      }
    }
  };
}

exports.getProviderHandlers = getProviderHandlers;
