'use strict';

var auth = require('@web3auth/auth');
var rippleKeypairs = require('ripple-keypairs');
var xrpl = require('xrpl');
var ECDSA = require('xrpl/dist/npm/ECDSA');

const deriveKeypair = web3authKey => {
  const seed = rippleKeypairs.generateSeed({
    entropy: Buffer.from(web3authKey.padStart(64, "0"), "hex"),
    algorithm: "ecdsa-secp256k1"
  });
  const wallet = xrpl.Wallet.fromSecret(seed, {
    algorithm: ECDSA.secp256k1
  }); // web3auth network currently only supports the secp256k1 key
  return {
    privateKey: wallet.privateKey,
    publicKey: wallet.publicKey
  };
};
async function getProviderHandlers({
  privKey: web3authKey,
  chainConfig,
  keyExportEnabled
}) {
  const client = new xrpl.Client(chainConfig.wsTarget);
  await client.connect();
  return {
    getAccounts: async _ => {
      const {
        publicKey
      } = deriveKeypair(web3authKey);
      const accAddress = xrpl.deriveAddress(publicKey);
      return [accAddress];
    },
    getKeyPair: async _ => {
      if (!keyExportEnabled) throw auth.providerErrors.custom({
        message: "Private key export is disabled",
        code: 4902
      });
      return deriveKeypair(web3authKey);
    },
    getPublicKey: async _ => {
      const keyPair = deriveKeypair(web3authKey);
      return keyPair.publicKey;
    },
    signTransaction: async req => {
      const {
        transaction,
        multisign
      } = req.params || {};
      if (!transaction) throw auth.rpcErrors.invalidParams("Invalid params, req.params.transaction is required");
      const {
        publicKey,
        privateKey
      } = deriveKeypair(web3authKey);
      const wallet = new xrpl.Wallet(publicKey, privateKey);
      return wallet.sign(transaction, multisign);
    },
    submitTransaction: async req => {
      const {
        transaction
      } = req.params || {};
      if (!transaction) throw auth.rpcErrors.invalidParams("Invalid params, req.params.transaction is required");
      const {
        publicKey,
        privateKey
      } = deriveKeypair(web3authKey);
      const wallet = new xrpl.Wallet(publicKey, privateKey);
      const res = await client.submit(transaction, {
        wallet
      });
      return res;
    },
    signMessage: async req => {
      const {
        message
      } = req.params || {};
      if (!message) throw auth.rpcErrors.invalidParams("Invalid params, req.params.message is required");
      const keyPair = deriveKeypair(web3authKey);
      const signature = rippleKeypairs.sign(message, keyPair.privateKey);
      return {
        signature
      };
    }
  };
}

exports.getProviderHandlers = getProviderHandlers;
