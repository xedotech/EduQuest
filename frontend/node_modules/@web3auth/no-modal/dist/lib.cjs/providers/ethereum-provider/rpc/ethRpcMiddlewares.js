'use strict';

var auth = require('@web3auth/auth');
var walletMidddleware = require('./walletMidddleware.js');

function createEthMiddleware(providerHandlers) {
  const {
    getAccounts,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processSignTransaction,
    processEthSignMessage,
    processTypedMessageV4,
    processPersonalMessage
  } = providerHandlers;
  const ethMiddleware = auth.mergeMiddleware([auth.createScaffoldMiddleware({
    eth_syncing: false
  }), walletMidddleware.createWalletMiddleware({
    getAccounts,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processEthSignMessage,
    processSignTransaction,
    processTypedMessageV4,
    processPersonalMessage
  })]);
  return ethMiddleware;
}
function createEthChainSwitchMiddleware({
  switchChain
}) {
  async function updateChain(req, res) {
    var _req$params;
    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;
    if (!chainParams) throw auth.rpcErrors.invalidParams("Missing chainId");
    res.result = await switchChain(chainParams);
  }
  return auth.createScaffoldMiddleware({
    wallet_switchEthereumChain: auth.createAsyncMiddleware(updateChain)
  });
}

exports.createEthChainSwitchMiddleware = createEthChainSwitchMiddleware;
exports.createEthMiddleware = createEthMiddleware;
