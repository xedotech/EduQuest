'use strict';

var walletStandardFeatures = require('@solana/wallet-standard-features');
var web3_js = require('@solana/web3.js');
var bs58 = require('@toruslabs/bs58');
require('@babel/runtime/helpers/objectSpread2');
require('@babel/runtime/helpers/defineProperty');
require('@segment/analytics-next');
require('../../../../base/loglevel.js');
require('@toruslabs/base-controllers');
require('@web3auth/auth');
var index = require('../../../../base/errors/index.js');
require('../../../../base/wallet/index.js');
require('../../../../base/connector/constants.js');
require('jwt-decode');
require('../../../../base/plugin/errors.js');
require('../../../../base/plugin/IPlugin.js');
require('@toruslabs/constants');
require('@toruslabs/http-helpers');
var baseInjectedProvider = require('./base/baseInjectedProvider.js');
var providerHandlers = require('./base/providerHandlers.js');
var utils = require('./utils.js');

class WalletStandardProvider extends baseInjectedProvider.BaseInjectedProvider {
  getProviderHandlers(wallet) {
    const chainIdentifier = utils.getSolanaChainByChainConfig(this.config.chain);
    const currentAccount = () => {
      const account = wallet === null || wallet === void 0 ? void 0 : wallet.accounts[0];
      if (!account) throw index.WalletLoginError.notConnectedError();
      return account;
    };
    /**
     * Signs a message and returns the signature
     * @param message - The message to sign
     * @returns The signature of the message encoded in base58
     */
    const signMessage = async message => {
      const account = currentAccount();
      const uint8ArrayMessage = new Uint8Array(Buffer.from(message, "utf-8"));
      const signature = await wallet.features[walletStandardFeatures.SolanaSignMessage].signMessage({
        account,
        message: uint8ArrayMessage
      });
      return bs58.bs58.encode(signature[0].signature);
    };
    /**
     * Signs a transaction and returns the signature
     * @param transaction - The transaction to sign
     * @returns The signature of the transaction encoded in base58
     */
    const signTransaction = async transaction => {
      const account = currentAccount();
      const output = await wallet.features[walletStandardFeatures.SolanaSignTransaction].signTransaction({
        account,
        transaction: new Uint8Array(Buffer.from(transaction, "base64")),
        chain: chainIdentifier
      });
      return bs58.bs58.encode(web3_js.VersionedTransaction.deserialize(output[0].signedTransaction).signatures[0]);
    };
    /**
     * Signs multiple transactions and returns the serialized transactions
     * @param transactions - The transactions to sign
     * @returns The serialized transactions encoded in base64
     */
    const signAllTransactions = async transactions => {
      const account = currentAccount();
      return Promise.all(transactions.map(async transaction => {
        const output = await wallet.features[walletStandardFeatures.SolanaSignTransaction].signTransaction({
          account,
          transaction: new Uint8Array(Buffer.from(transaction, "base64")),
          chain: chainIdentifier
        });
        return Buffer.from(output[0].signedTransaction).toString("base64");
      }));
    };
    /**
     * Signs a transaction and sends it to the network
     * @param transaction - The transaction to sign and send
     * @returns The signature of the transaction encoded in base58
     */
    const signAndSendTransaction = async transaction => {
      const account = currentAccount();
      const output = await wallet.features[walletStandardFeatures.SolanaSignAndSendTransaction].signAndSendTransaction({
        account,
        transaction: new Uint8Array(Buffer.from(transaction, "base64")),
        chain: chainIdentifier
      });
      return bs58.bs58.encode(output[0].signature);
    };
    return providerHandlers.getBaseProviderHandlers({
      get publicKey() {
        return new web3_js.PublicKey(currentAccount().publicKey);
      },
      signMessage,
      signTransaction,
      signAllTransactions,
      signAndSendTransaction
    });
  }
}

exports.WalletStandardProvider = WalletStandardProvider;
