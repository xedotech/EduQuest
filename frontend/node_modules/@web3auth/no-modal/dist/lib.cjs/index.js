'use strict';

var analytics = require('./base/analytics.js');
var IChainInterface = require('./base/chain/IChainInterface.js');
var index = require('./base/composables/index.js');
var baseConnector = require('./base/connector/baseConnector.js');
var constants = require('./base/connector/constants.js');
var auth = require('@web3auth/auth');
var utils = require('./base/connector/utils.js');
var constants$1 = require('./base/constants.js');
var cookie = require('./base/cookie.js');
var index$1 = require('./base/errors/index.js');
var loglevel = require('./base/loglevel.js');
var errors = require('./base/plugin/errors.js');
var IPlugin = require('./base/plugin/IPlugin.js');
var IProvider = require('./base/provider/IProvider.js');
var utils$1 = require('./base/utils.js');
var index$2 = require('./base/wallet/index.js');
var authConnector = require('./connectors/auth-connector/authConnector.js');
var baseEvmConnector = require('./connectors/base-evm-connector/baseEvmConnector.js');
var baseSolanaConnector = require('./connectors/base-solana-connector/baseSolanaConnector.js');
var injectedEvmConnector = require('./connectors/injected-evm-connector/injectedEvmConnector.js');
var mipd = require('mipd');
var index$3 = require('./connectors/injected-solana-connector/index.js');
var metamaskConnector = require('./connectors/metamask-connector/metamaskConnector.js');
var config = require('./connectors/wallet-connect-v2-connector/config.js');
var walletConnectV2Connector = require('./connectors/wallet-connect-v2-connector/walletConnectV2Connector.js');
var WalletConnectV2Provider = require('./connectors/wallet-connect-v2-connector/WalletConnectV2Provider.js');
var noModal = require('./noModal.js');
var embed = require('./plugins/nft-checkout-plugin/embed.js');
var plugin = require('./plugins/nft-checkout-plugin/plugin.js');
var plugin$1 = require('./plugins/wallet-services-plugin/plugin.js');
var AccountAbstractionProvider = require('./providers/account-abstraction-provider/providers/AccountAbstractionProvider.js');
var ethereumControllers = require('@toruslabs/ethereum-controllers');
var baseProvider = require('./providers/base-provider/baseProvider.js');
var CommonJRPCProvider = require('./providers/base-provider/CommonJRPCProvider.js');
var commonPrivateKeyProvider = require('./providers/base-provider/commonPrivateKeyProvider.js');
var utils$2 = require('./providers/base-provider/utils.js');
var constants$2 = require('./providers/ethereum-provider/providers/privateKeyProviders/TransactionFormatter/constants.js');
var formatter = require('./providers/ethereum-provider/providers/privateKeyProviders/TransactionFormatter/formatter.js');
var interfaces = require('./providers/ethereum-provider/providers/privateKeyProviders/TransactionFormatter/interfaces.js');
var utils$3 = require('./providers/ethereum-provider/providers/privateKeyProviders/TransactionFormatter/utils.js');
var ethRpcMiddlewares = require('./providers/ethereum-provider/rpc/ethRpcMiddlewares.js');
var jrpcClient = require('./providers/ethereum-provider/rpc/jrpcClient.js');
var walletMidddleware = require('./providers/ethereum-provider/rpc/walletMidddleware.js');
var utils$4 = require('./providers/solana-provider/providers/injectedProviders/utils.js');
var walletStandardProvider = require('./providers/solana-provider/providers/injectedProviders/walletStandardProvider.js');
var JrpcClient = require('./providers/solana-provider/rpc/JrpcClient.js');
var solanaRpcMiddlewares = require('./providers/solana-provider/rpc/solanaRpcMiddlewares.js');
var solanaWallet = require('./providers/solana-provider/solanaWallet.js');
var baseControllers = require('@toruslabs/base-controllers');
var app = require('@wallet-standard/app');
var walletStandardConnector = require('./connectors/injected-solana-connector/walletStandardConnector.js');
var wsEmbed = require('@web3auth/ws-embed');



exports.ANALYTICS_EVENTS = analytics.ANALYTICS_EVENTS;
exports.ANALYTICS_INTEGRATION_TYPE = analytics.ANALYTICS_INTEGRATION_TYPE;
exports.ANALYTICS_SDK_TYPE = analytics.ANALYTICS_SDK_TYPE;
exports.Analytics = analytics.Analytics;
exports.CONNECTOR_NAMESPACES = IChainInterface.CONNECTOR_NAMESPACES;
exports.Web3AuthContextKey = index.Web3AuthContextKey;
exports.BaseConnector = baseConnector.BaseConnector;
exports.CONNECTOR_CATEGORY = constants.CONNECTOR_CATEGORY;
exports.CONNECTOR_EVENTS = constants.CONNECTOR_EVENTS;
exports.CONNECTOR_STATUS = constants.CONNECTOR_STATUS;
Object.defineProperty(exports, "AUTH_CONNECTION", {
	enumerable: true,
	get: function () { return auth.AUTH_CONNECTION; }
});
Object.defineProperty(exports, "MFA_FACTOR", {
	enumerable: true,
	get: function () { return auth.MFA_FACTOR; }
});
Object.defineProperty(exports, "MFA_LEVELS", {
	enumerable: true,
	get: function () { return auth.MFA_LEVELS; }
});
Object.defineProperty(exports, "UX_MODE", {
	enumerable: true,
	get: function () { return auth.UX_MODE; }
});
Object.defineProperty(exports, "WEB3AUTH_NETWORK", {
	enumerable: true,
	get: function () { return auth.WEB3AUTH_NETWORK; }
});
Object.defineProperty(exports, "getED25519Key", {
	enumerable: true,
	get: function () { return auth.getED25519Key; }
});
exports.checkIfTokenIsExpired = utils.checkIfTokenIsExpired;
exports.clearToken = utils.clearToken;
exports.getSavedToken = utils.getSavedToken;
exports.saveToken = utils.saveToken;
exports.storageAvailable = utils.storageAvailable;
exports.LOGIN_MODE = constants$1.LOGIN_MODE;
exports.MODAL_SIGN_IN_METHODS = constants$1.MODAL_SIGN_IN_METHODS;
exports.SMART_ACCOUNT_WALLET_SCOPE = constants$1.SMART_ACCOUNT_WALLET_SCOPE;
exports.SOLANA_CAIP_CHAIN_MAP = constants$1.SOLANA_CAIP_CHAIN_MAP;
exports.WEB3AUTH_STATE_STORAGE_KEY = constants$1.WEB3AUTH_STATE_STORAGE_KEY;
exports.WIDGET_TYPE = constants$1.WIDGET_TYPE;
exports.cookieToWeb3AuthState = cookie.cookieToWeb3AuthState;
exports.WalletInitializationError = index$1.WalletInitializationError;
exports.WalletLoginError = index$1.WalletLoginError;
exports.WalletOperationsError = index$1.WalletOperationsError;
exports.WalletProviderError = index$1.WalletProviderError;
exports.Web3AuthError = index$1.Web3AuthError;
exports.log = loglevel.log;
exports.NFTCheckoutPluginError = errors.NFTCheckoutPluginError;
exports.WalletServicesPluginError = errors.WalletServicesPluginError;
exports.EVM_PLUGINS = IPlugin.EVM_PLUGINS;
exports.PLUGIN_EVENTS = IPlugin.PLUGIN_EVENTS;
exports.PLUGIN_NAMESPACES = IPlugin.PLUGIN_NAMESPACES;
exports.PLUGIN_STATUS = IPlugin.PLUGIN_STATUS;
exports.SOLANA_PLUGINS = IPlugin.SOLANA_PLUGINS;
exports.WALLET_PLUGINS = IPlugin.WALLET_PLUGINS;
exports.PROVIDER_EVENTS = IProvider.PROVIDER_EVENTS;
exports.fetchProjectConfig = utils$1.fetchProjectConfig;
exports.fetchWalletRegistry = utils$1.fetchWalletRegistry;
exports.fromViemChain = utils$1.fromViemChain;
exports.fromWagmiChain = utils$1.fromWagmiChain;
exports.getAaAnalyticsProperties = utils$1.getAaAnalyticsProperties;
exports.getCaipChainId = utils$1.getCaipChainId;
exports.getErrorAnalyticsProperties = utils$1.getErrorAnalyticsProperties;
exports.getHostname = utils$1.getHostname;
exports.getWalletServicesAnalyticsProperties = utils$1.getWalletServicesAnalyticsProperties;
exports.getWhitelabelAnalyticsProperties = utils$1.getWhitelabelAnalyticsProperties;
exports.isBrowser = utils$1.isBrowser;
exports.isHexStrict = utils$1.isHexStrict;
exports.normalizeWalletName = utils$1.normalizeWalletName;
exports.sdkVersion = utils$1.sdkVersion;
exports.signerHost = utils$1.signerHost;
exports.withAbort = utils$1.withAbort;
exports.CONNECTOR_NAMES = index$2.CONNECTOR_NAMES;
exports.EVM_CONNECTORS = index$2.EVM_CONNECTORS;
exports.MULTI_CHAIN_CONNECTORS = index$2.MULTI_CHAIN_CONNECTORS;
exports.SOLANA_CONNECTORS = index$2.SOLANA_CONNECTORS;
exports.WALLET_CONNECTORS = index$2.WALLET_CONNECTORS;
exports.authConnector = authConnector.authConnector;
exports.BaseEvmConnector = baseEvmConnector.BaseEvmConnector;
exports.BaseSolanaConnector = baseSolanaConnector.BaseSolanaConnector;
exports.injectedEvmConnector = injectedEvmConnector.injectedEvmConnector;
Object.defineProperty(exports, "createMipd", {
	enumerable: true,
	get: function () { return mipd.createStore; }
});
exports.hasSolanaWalletStandardFeatures = index$3.hasSolanaWalletStandardFeatures;
exports.metaMaskConnector = metamaskConnector.metaMaskConnector;
Object.defineProperty(exports, "DEFAULT_EIP155_METHODS", {
	enumerable: true,
	get: function () { return config.DEFAULT_EIP155_METHODS; }
});
Object.defineProperty(exports, "DEFAULT_EIP_155_EVENTS", {
	enumerable: true,
	get: function () { return config.DEFAULT_EIP_155_EVENTS; }
});
Object.defineProperty(exports, "DEFAULT_SOLANA_EVENTS", {
	enumerable: true,
	get: function () { return config.DEFAULT_SOLANA_EVENTS; }
});
Object.defineProperty(exports, "DEFAULT_SOLANA_METHODS", {
	enumerable: true,
	get: function () { return config.DEFAULT_SOLANA_METHODS; }
});
exports.getNamespacesFromChains = config.getNamespacesFromChains;
exports.getRequiredNamespaces = config.getRequiredNamespaces;
exports.getSupportedEventsByNamespace = config.getSupportedEventsByNamespace;
exports.getSupportedMethodsByNamespace = config.getSupportedMethodsByNamespace;
exports.getWalletConnectV2Settings = config.getWalletConnectV2Settings;
exports.walletConnectV2Connector = walletConnectV2Connector.walletConnectV2Connector;
exports.WalletConnectV2Provider = WalletConnectV2Provider.WalletConnectV2Provider;
exports.Web3AuthNoModal = noModal.Web3AuthNoModal;
exports.NFTCheckoutEmbed = embed.NFTCheckoutEmbed;
exports.nftCheckoutPlugin = plugin.nftCheckoutPlugin;
exports.walletServicesPlugin = plugin$1.walletServicesPlugin;
exports.accountAbstractionProvider = AccountAbstractionProvider.accountAbstractionProvider;
exports.toEoaProvider = AccountAbstractionProvider.toEoaProvider;
Object.defineProperty(exports, "BiconomySmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.BiconomySmartAccount; }
});
Object.defineProperty(exports, "KernelSmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.KernelSmartAccount; }
});
Object.defineProperty(exports, "MetamaskSmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.MetamaskSmartAccount; }
});
Object.defineProperty(exports, "NexusSmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.NexusSmartAccount; }
});
Object.defineProperty(exports, "SMART_ACCOUNT", {
	enumerable: true,
	get: function () { return ethereumControllers.SMART_ACCOUNT; }
});
Object.defineProperty(exports, "SafeSmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.SafeSmartAccount; }
});
Object.defineProperty(exports, "TrustSmartAccount", {
	enumerable: true,
	get: function () { return ethereumControllers.TrustSmartAccount; }
});
exports.BaseProvider = baseProvider.BaseProvider;
exports.CommonJRPCProvider = CommonJRPCProvider.CommonJRPCProvider;
exports.CommonPrivateKeyProvider = commonPrivateKeyProvider.CommonPrivateKeyProvider;
Object.defineProperty(exports, "EIP1193_EVENTS", {
	enumerable: true,
	get: function () { return utils$2.EIP1193_EVENTS; }
});
exports.createRandomId = utils$2.createRandomId;
exports.EIP1559APIEndpoint = constants$2.EIP1559APIEndpoint;
exports.GAS_ESTIMATE_TYPES = constants$2.GAS_ESTIMATE_TYPES;
exports.LegacyGasAPIEndpoint = constants$2.LegacyGasAPIEndpoint;
exports.TRANSACTION_ENVELOPE_TYPES = constants$2.TRANSACTION_ENVELOPE_TYPES;
exports.TRANSACTION_TYPES = constants$2.TRANSACTION_TYPES;
exports.TransactionFormatter = formatter.TransactionFormatter;
Object.defineProperty(exports, "SignTypedDataVersion", {
	enumerable: true,
	get: function () { return interfaces.SignTypedDataVersion; }
});
exports.fetchEip1159GasEstimates = utils$3.fetchEip1159GasEstimates;
exports.fetchLegacyGasPriceEstimates = utils$3.fetchLegacyGasPriceEstimates;
exports.normalizeGWEIDecimalNumbers = utils$3.normalizeGWEIDecimalNumbers;
exports.validateAddress = utils$3.validateAddress;
exports.validateTypedSignMessageDataV4 = utils$3.validateTypedSignMessageDataV4;
exports.createEthChainSwitchMiddleware = ethRpcMiddlewares.createEthChainSwitchMiddleware;
exports.createEthMiddleware = ethRpcMiddlewares.createEthMiddleware;
exports.createEthChainIdMiddleware = jrpcClient.createEthChainIdMiddleware;
exports.createEthJsonRpcClient = jrpcClient.createEthJsonRpcClient;
exports.createEthProviderConfigMiddleware = jrpcClient.createEthProviderConfigMiddleware;
exports.createWalletMiddleware = walletMidddleware.createWalletMiddleware;
exports.getSolanaChainByChainConfig = utils$4.getSolanaChainByChainConfig;
exports.WalletStandardProvider = walletStandardProvider.WalletStandardProvider;
exports.createConfigMiddleware = JrpcClient.createConfigMiddleware;
exports.createSolanaChainIdMiddleware = JrpcClient.createSolanaChainIdMiddleware;
exports.createSolanaJsonRpcClient = JrpcClient.createSolanaJsonRpcClient;
exports.createSolanaProviderConfigMiddleware = JrpcClient.createSolanaProviderConfigMiddleware;
exports.createGenericJRPCMiddleware = solanaRpcMiddlewares.createGenericJRPCMiddleware;
exports.createGetAccountsMiddleware = solanaRpcMiddlewares.createGetAccountsMiddleware;
exports.createGetPublicKeyMiddleware = solanaRpcMiddlewares.createGetPublicKeyMiddleware;
exports.createRequestAccountsMiddleware = solanaRpcMiddlewares.createRequestAccountsMiddleware;
exports.createSolanaAccountMiddleware = solanaRpcMiddlewares.createSolanaAccountMiddleware;
exports.createSolanaChainSwitchMiddleware = solanaRpcMiddlewares.createSolanaChainSwitchMiddleware;
exports.createSolanaMiddleware = solanaRpcMiddlewares.createSolanaMiddleware;
exports.SolanaWallet = solanaWallet.SolanaWallet;
Object.defineProperty(exports, "CHAIN_NAMESPACES", {
	enumerable: true,
	get: function () { return baseControllers.CHAIN_NAMESPACES; }
});
Object.defineProperty(exports, "cloneDeep", {
	enumerable: true,
	get: function () { return baseControllers.cloneDeep; }
});
Object.defineProperty(exports, "createSolanaMipd", {
	enumerable: true,
	get: function () { return app.getWallets; }
});
exports.walletStandardConnector = walletStandardConnector.walletStandardConnector;
Object.defineProperty(exports, "BUTTON_POSITION", {
	enumerable: true,
	get: function () { return wsEmbed.BUTTON_POSITION; }
});
Object.defineProperty(exports, "CONFIRMATION_STRATEGY", {
	enumerable: true,
	get: function () { return wsEmbed.CONFIRMATION_STRATEGY; }
});
