import { type EIP6963ProviderDetail } from "mipd";
import { BaseConnectorSettings, ChainNamespaceType, CONNECTOR_CATEGORY_TYPE, CONNECTOR_STATUS_TYPE, ConnectorFn, ConnectorInitOptions, ConnectorNamespaceType, CustomChainConfig, IProvider, UserInfo } from "../../base";
import { BaseEvmConnector } from "../base-evm-connector";
declare class InjectedEvmConnector extends BaseEvmConnector<void> {
    readonly connectorNamespace: ConnectorNamespaceType;
    readonly currentChainNamespace: ChainNamespaceType;
    readonly type: CONNECTOR_CATEGORY_TYPE;
    readonly name: string;
    readonly isInjected = true;
    status: CONNECTOR_STATUS_TYPE;
    private injectedProvider;
    constructor(options: BaseConnectorSettings & {
        name: string;
        provider: IProvider;
        icon?: string;
    });
    get provider(): IProvider | null;
    set provider(_: IProvider | null);
    init(options: ConnectorInitOptions): Promise<void>;
    connect({ chainId }: {
        chainId: string;
    }): Promise<IProvider | null>;
    disconnect(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    addChain(chainConfig: CustomChainConfig, _init?: boolean): Promise<void>;
    switchChain(params: {
        chainId: string;
    }, init?: boolean): Promise<void>;
    enableMFA(): Promise<void>;
    manageMFA(): Promise<void>;
}
export declare const injectedEvmConnector: (providerDetail: EIP6963ProviderDetail) => ConnectorFn;
export { InjectedEvmConnector };
