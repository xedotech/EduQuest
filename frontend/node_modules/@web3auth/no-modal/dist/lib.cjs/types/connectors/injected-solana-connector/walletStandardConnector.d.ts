import { Wallet } from "@wallet-standard/base";
import { BaseConnectorSettings, ChainNamespaceType, CONNECTOR_CATEGORY_TYPE, CONNECTOR_STATUS_TYPE, ConnectorFn, ConnectorInitOptions, ConnectorNamespaceType, IProvider, UserInfo } from "../../base";
import { BaseSolanaConnector } from "../base-solana-connector";
export declare class WalletStandardConnector extends BaseSolanaConnector<void> {
    readonly name: string;
    readonly connectorNamespace: ConnectorNamespaceType;
    readonly currentChainNamespace: ChainNamespaceType;
    readonly type: CONNECTOR_CATEGORY_TYPE;
    readonly isInjected = true;
    status: CONNECTOR_STATUS_TYPE;
    private wallet;
    private injectedProvider;
    constructor(options: BaseConnectorSettings & {
        name: string;
        wallet: Wallet;
    });
    get provider(): IProvider;
    get isWalletConnected(): boolean;
    init(options: ConnectorInitOptions): Promise<void>;
    connect({ chainId }: {
        chainId: string;
    }): Promise<IProvider>;
    disconnect(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    switchChain(params: {
        chainId: string;
    }, init?: boolean): Promise<void>;
    enableMFA(): Promise<void>;
    manageMFA(): Promise<void>;
}
export declare const walletStandardConnector: (wallet: Wallet) => ConnectorFn;
