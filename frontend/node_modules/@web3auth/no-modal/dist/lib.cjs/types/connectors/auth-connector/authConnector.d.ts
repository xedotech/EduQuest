import { Auth, AuthConnectionConfigItem } from "@web3auth/auth";
import { type default as WsEmbed } from "@web3auth/ws-embed";
import { AuthLoginParams, BaseConnector, CONNECTOR_CATEGORY_TYPE, CONNECTOR_STATUS_TYPE, ConnectorFn, ConnectorInitOptions, ConnectorNamespaceType, IProvider, UserInfo, WALLET_CONNECTOR_TYPE } from "../../base";
import type { AuthConnectorOptions, PrivateKeyProvider } from "./interface";
declare class AuthConnector extends BaseConnector<AuthLoginParams> {
    readonly name: WALLET_CONNECTOR_TYPE;
    readonly connectorNamespace: ConnectorNamespaceType;
    readonly type: CONNECTOR_CATEGORY_TYPE;
    authInstance: Auth | null;
    status: CONNECTOR_STATUS_TYPE;
    privateKeyProvider: PrivateKeyProvider | null;
    private authOptions;
    private loginSettings;
    private wsSettings;
    private wsEmbedInstance;
    private authConnectionConfig;
    private wsEmbedInstancePromise;
    constructor(params: AuthConnectorOptions);
    get provider(): IProvider | null;
    get wsEmbed(): WsEmbed;
    set provider(_: IProvider | null);
    init(options: ConnectorInitOptions): Promise<void>;
    connect(params: Partial<AuthLoginParams> & {
        chainId: string;
    }): Promise<IProvider | null>;
    enableMFA(params?: AuthLoginParams): Promise<void>;
    manageMFA(params?: AuthLoginParams): Promise<void>;
    disconnect(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getIdentityToken(): Promise<{
        idToken: string;
    }>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    switchChain(params: {
        chainId: string;
    }, init?: boolean): Promise<void>;
    cleanup(): Promise<void>;
    getOAuthProviderConfig(params: Pick<AuthLoginParams, "authConnection" | "authConnectionId" | "groupedAuthConnectionId">): AuthConnectionConfigItem & {
        isDefault?: boolean;
    };
    private getChain;
    private _getFinalPrivKey;
    private connectWithProvider;
    private connectWithSocialLogin;
    private connectWithJwtLogin;
}
type AuthConnectorFuncParams = Omit<AuthConnectorOptions, "coreOptions" | "authConnectionConfig" | "connectorSettings"> & {
    connectorSettings?: Omit<AuthConnectorOptions["connectorSettings"], "buildEnv">;
};
export declare const authConnector: (params?: AuthConnectorFuncParams) => ConnectorFn;
export type AuthConnectorType = AuthConnector;
export {};
