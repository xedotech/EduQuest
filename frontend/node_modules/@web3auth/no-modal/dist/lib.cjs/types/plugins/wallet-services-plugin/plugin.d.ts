import { type BaseEmbedControllerState } from "@toruslabs/base-controllers";
import { SafeEventEmitter, type WhiteLabelData } from "@web3auth/auth";
import WsEmbed from "@web3auth/ws-embed";
import { type Analytics, IPlugin, IWeb3AuthCore, PLUGIN_STATUS_TYPE, PluginFn, SafeEventEmitterProvider, WALLET_CONNECTOR_TYPE } from "../../base";
export { BUTTON_POSITION, type BUTTON_POSITION_TYPE, CONFIRMATION_STRATEGY, type CONFIRMATION_STRATEGY_TYPE } from "@web3auth/ws-embed";
declare class WalletServicesPlugin extends SafeEventEmitter implements IPlugin {
    name: "wallet-services";
    status: PLUGIN_STATUS_TYPE;
    readonly SUPPORTED_CONNECTORS: WALLET_CONNECTOR_TYPE[];
    readonly pluginNamespace: "multichain";
    wsEmbedInstance: WsEmbed;
    private provider;
    private web3auth;
    private isInitialized;
    private analytics?;
    get proxyProvider(): SafeEventEmitterProvider | null;
    initWithWeb3Auth(web3auth: IWeb3AuthCore, _whiteLabel?: WhiteLabelData, analytics?: Analytics): Promise<void>;
    initWithProvider(): Promise<void>;
    connect(): Promise<void>;
    showWalletConnectScanner(showWalletConnectParams?: BaseEmbedControllerState["showWalletConnect"]): Promise<void>;
    showCheckout(showCheckoutParams?: BaseEmbedControllerState["showCheckout"]): Promise<void>;
    showWalletUi(showWalletUiParams?: BaseEmbedControllerState["showWalletUi"]): Promise<void>;
    showSwap(showSwapParams?: BaseEmbedControllerState["showSwap"]): Promise<void>;
    cleanup(): Promise<void>;
    disconnect(): Promise<void>;
}
export type WalletServicesPluginType = WalletServicesPlugin;
export declare const walletServicesPlugin: () => PluginFn;
