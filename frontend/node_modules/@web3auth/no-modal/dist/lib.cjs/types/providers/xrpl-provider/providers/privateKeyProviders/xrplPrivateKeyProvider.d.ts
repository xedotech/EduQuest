import { CustomChainConfig } from "../../../../base";
import { BaseProvider, BaseProviderConfig, BaseProviderState } from "../../../../providers/base-provider";
export type XrplPrivKeyProviderConfig = BaseProviderConfig;
export interface XrplPrivKeyProviderState extends BaseProviderState {
    privateKey?: string;
}
export declare class XrplPrivateKeyProvider extends BaseProvider<BaseProviderConfig, XrplPrivKeyProviderState, string> {
    readonly PROVIDER_CHAIN_NAMESPACE: "xrpl";
    constructor({ config, state }: {
        config: XrplPrivKeyProviderConfig;
        state?: XrplPrivKeyProviderState;
    });
    static getProviderInstance: (params: {
        privKey: string;
        chain: CustomChainConfig;
        chains: CustomChainConfig[];
    }) => Promise<XrplPrivateKeyProvider>;
    enable(): Promise<string[]>;
    setupProvider(privKey: string, chainId: string): Promise<void>;
    switchChain(params: {
        chainId: string;
    }): Promise<void>;
    protected lookupNetwork(_privKey: string, chainId: string): Promise<void>;
    private getChainSwitchMiddleware;
}
