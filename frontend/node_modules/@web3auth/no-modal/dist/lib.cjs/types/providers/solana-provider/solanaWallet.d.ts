import { IProvider, RequestArguments } from "../../base";
import { ISolanaWallet, type TransactionOrVersionedTransaction } from "./interface";
export declare class SolanaWallet implements ISolanaWallet {
    provider: IProvider;
    constructor(provider: IProvider);
    requestAccounts(): Promise<string[]>;
    getAccounts(): Promise<string[]>;
    signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<string>;
    /**
     * Signs a transaction and returns the signature
     * @param transaction - The transaction to sign
     * @returns The signature of the transaction encoded in base58
     */
    signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<string>;
    /**
     * Signs multiple transactions and returns the serialized transactions
     * @param transactions - The transactions to sign
     * @returns The serialized transactions encoded in base64
     */
    signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<string[]>;
    /**
     * Signs a message and returns the signature
     * @param message - The message to sign
     * @returns The signature of the message encoded in base58
     */
    signMessage(message: string, pubKey: string): Promise<string>;
    request<T, U>(args: RequestArguments<T>): Promise<U>;
    private serializeTransaction;
}
