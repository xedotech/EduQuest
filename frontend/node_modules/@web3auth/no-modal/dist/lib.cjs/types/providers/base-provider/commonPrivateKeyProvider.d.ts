import { CustomChainConfig, IBaseProvider, SafeEventEmitterProvider } from "../../base";
import { BaseProvider, BaseProviderConfig, BaseProviderState } from "./baseProvider";
export type CommonPrivKeyProviderConfig = BaseProviderConfig;
export interface CommonPrivKeyProviderState extends BaseProviderState {
    privateKey?: string;
}
export declare class CommonPrivateKeyProvider extends BaseProvider<BaseProviderConfig, CommonPrivKeyProviderState, string> implements IBaseProvider<string> {
    _providerEngineProxy: SafeEventEmitterProvider | null;
    constructor({ config, state }: {
        config: CommonPrivKeyProviderConfig;
        state?: CommonPrivKeyProviderState;
    });
    get provider(): SafeEventEmitterProvider | null;
    set provider(_: SafeEventEmitterProvider | null);
    static getProviderInstance: (params: {
        privKey: string;
        chain: CustomChainConfig;
        chains: CustomChainConfig[];
    }) => Promise<CommonPrivateKeyProvider>;
    setupProvider(privKey: string): Promise<void>;
    switchChain(_: {
        chainId: string;
    }): Promise<void>;
    protected getProviderEngineProxy(): SafeEventEmitterProvider | null;
    protected lookupNetwork(): Promise<string>;
    private getPrivKeyMiddleware;
    private createPrivKeyMiddleware;
}
