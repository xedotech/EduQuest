import { BaseConfig, BaseController, BaseState } from "@toruslabs/base-controllers";
import { JRPCRequest, JRPCResponse, ProviderEvents, SendCallBack } from "@web3auth/auth";
import { CustomChainConfig, IBaseProvider, Maybe, RequestArguments, SafeEventEmitterProvider } from "../../base";
import { BaseProviderEvents } from "./interfaces";
export interface BaseProviderState extends BaseState {
    chainId: string;
}
export interface BaseProviderConfig extends BaseConfig {
    chain: CustomChainConfig;
    chains: CustomChainConfig[];
    skipLookupNetwork?: boolean;
    keyExportEnabled?: boolean;
}
export declare abstract class BaseProvider<C extends BaseProviderConfig, S extends BaseProviderState, P> extends BaseController<C, S, BaseProviderEvents<S>> implements IBaseProvider<P> {
    _providerEngineProxy: SafeEventEmitterProvider<ProviderEvents> | null;
    private keyExportFlagSetByCode;
    constructor({ config, state }: {
        config: C;
        state?: S;
    });
    get currentChain(): CustomChainConfig;
    get provider(): SafeEventEmitterProvider<ProviderEvents> | null;
    get chainId(): string;
    set provider(_: SafeEventEmitterProvider<ProviderEvents> | null);
    request<T, R>(args: RequestArguments<T>): Promise<Maybe<R>>;
    sendAsync<T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>): void;
    sendAsync<T, U>(req: JRPCRequest<T>): Promise<JRPCResponse<U>>;
    send<T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>): void;
    updateProviderEngineProxy(provider: SafeEventEmitterProvider): void;
    setKeyExportFlag(flag: boolean): void;
    protected getProviderEngineProxy(): SafeEventEmitterProvider | null;
    protected getChain(chainId: string): CustomChainConfig;
    abstract setupProvider(provider: P, chainId: string): Promise<void>;
    abstract switchChain(params: {
        chainId: string;
    }): Promise<void>;
    protected abstract lookupNetwork(provider?: P, chainId?: string): Promise<string | void>;
}
