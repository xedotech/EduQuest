import { type AccountAbstractionMultiChainConfig, type BundlerConfig, type ISmartAccount, type PaymasterConfig, SMART_ACCOUNT } from "@toruslabs/ethereum-controllers";
import { type Client } from "viem";
import { type BundlerClient, type PaymasterClient, type SmartAccount } from "viem/account-abstraction";
import { type CustomChainConfig, type IProvider } from "../../../base";
import { BaseProvider, type BaseProviderConfig, type BaseProviderState } from "../../../providers/base-provider";
interface AccountAbstractionProviderConfig extends BaseProviderConfig {
    smartAccountInit: ISmartAccount;
    smartAccountChainsConfig: AccountAbstractionMultiChainConfig["chains"];
}
interface AccountAbstractionProviderState extends BaseProviderState {
    eoaProvider?: IProvider;
}
declare class AccountAbstractionProvider extends BaseProvider<AccountAbstractionProviderConfig, AccountAbstractionProviderState, IProvider> {
    readonly PROVIDER_CHAIN_NAMESPACE: "eip155";
    private _smartAccount;
    private _publicClient;
    private _bundlerClient;
    private _paymasterClient;
    private _useProviderAsTransport?;
    constructor({ config, state }: {
        config: AccountAbstractionProviderConfig;
        state?: AccountAbstractionProviderState;
    });
    get smartAccount(): SmartAccount | null;
    get bundlerClient(): BundlerClient | null;
    get paymasterClient(): PaymasterClient | null;
    get publicClient(): Client | null;
    static getProviderInstance: (params: AccountAbstractionProviderConfig & {
        eoaProvider: IProvider;
        useProviderAsTransport?: boolean;
    }) => Promise<AccountAbstractionProvider>;
    enable(): Promise<string[]>;
    setupProvider(eoaProvider: IProvider): Promise<void>;
    updateAccount(_params: {
        privateKey: string;
    }): Promise<void>;
    switchChain(_params: {
        chainId: string;
    }): Promise<void>;
    protected lookupNetwork(): Promise<string>;
    private setupChainSwitchMiddleware;
}
export declare const accountAbstractionProvider: ({ accountAbstractionConfig, chain, chains, provider, useProviderAsTransport, }: {
    accountAbstractionConfig: AccountAbstractionMultiChainConfig;
    chain: CustomChainConfig;
    chains: CustomChainConfig[];
    provider: IProvider;
    useProviderAsTransport?: boolean;
}) => Promise<AccountAbstractionProvider>;
export declare const toEoaProvider: (aaProvider: IProvider) => Promise<IProvider>;
export { type AccountAbstractionMultiChainConfig, type AccountAbstractionProvider, type BundlerConfig, type PaymasterConfig, SMART_ACCOUNT };
