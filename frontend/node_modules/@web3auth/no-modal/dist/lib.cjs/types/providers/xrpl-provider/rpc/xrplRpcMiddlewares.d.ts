import { JRPCMiddleware, JRPCRequest } from "@web3auth/auth";
import type { SubmitResponse, Transaction } from "xrpl";
export declare const RPC_METHODS: {
    GET_ACCOUNTS: string;
    GET_KEY_PAIR: string;
    GET_PUBLIC_KEY: string;
    SIGN_MESSAGE: string;
    SIGN_TRANSACTION: string;
    SUBMIT_TRANSACTION: string;
    ADD_CHAIN: string;
    SWITCH_CHAIN: string;
    CHAIN_ID: string;
    PROVIDER_CHAIN_CONFIG: string;
};
export type KeyPair = {
    publicKey: string;
    privateKey: string;
};
export interface IXrplProviderHandlers {
    getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;
    getKeyPair: (req: JRPCRequest<unknown>) => Promise<KeyPair>;
    getPublicKey: (req: JRPCRequest<unknown>) => Promise<string>;
    signTransaction: (req: JRPCRequest<{
        transaction: Transaction;
        multisign: string | boolean;
    }>) => Promise<{
        tx_blob: string;
        hash: string;
    }>;
    submitTransaction: (req: JRPCRequest<{
        transaction: Transaction;
    }>) => Promise<SubmitResponse>;
    signMessage: (req: JRPCRequest<{
        message: string;
    }>) => Promise<{
        signature: string;
    }>;
}
export declare function createGetAccountsMiddleware({ getAccounts, }: {
    getAccounts: IXrplProviderHandlers["getAccounts"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<T, unknown>;
export declare function createXRPLMiddleware(providerHandlers: IXrplProviderHandlers): JRPCMiddleware<unknown, unknown>;
export interface IXrplChainSwitchHandlers {
    switchChain: (req: JRPCRequest<{
        chainId: string;
    }>) => Promise<void>;
}
export declare function creatXrplChainSwitchMiddleware({ switchChain }: IXrplChainSwitchHandlers): JRPCMiddleware<unknown, unknown>;
