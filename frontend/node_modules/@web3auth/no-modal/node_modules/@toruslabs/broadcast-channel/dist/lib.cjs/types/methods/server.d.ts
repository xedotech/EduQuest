/**
 * A localStorage-only method which uses localstorage and its 'storage'-event
 * This does not work inside of webworkers because they have no access to locastorage
 * This is basically implemented to support IE9 or your grandmothers toaster.
 * @link https://caniuse.com/#feat=namevalue-storage
 * @link https://caniuse.com/#feat=indexeddb
 */
import { ObliviousSet } from "oblivious-set";
import { Socket } from "socket.io-client";
import { MessageObject, Options } from "../types";
import { microSeconds as micro } from "../util";
export declare const microSeconds: typeof micro;
export declare const type = "server";
interface ChannelState {
    channelName: string;
    uuid: string;
    eMIs: ObliviousSet<string>;
    server: {
        api_url: string;
        socket_url: string;
        allowed_origin?: string;
    };
    time: number;
    timeout?: number;
    messagesCallback?: (data: MessageObject) => void;
    messagesCallbackTime?: number;
}
interface Message {
    token: string;
    time: number;
    data: MessageObject;
    uuid: string;
}
export declare function storageKey(channelName: string): string;
/**
 * writes the new message to the storage
 * and fires the storage-event so other readers can find it
 */
export declare function postMessage(channelState: ChannelState, messageJson: MessageObject): Promise<Response>;
export declare function getSocketInstance(socketUrl: string): Socket;
export declare function setupSocketConnection(socketUrl: string, channelState: ChannelState, fn: (data: Message) => void): Socket;
export declare function removeStorageEventListener(): void;
export declare function canBeUsed(): boolean;
export declare function create(channelName: string, options: Options): ChannelState;
export declare function close(channelState: ChannelState): void;
export declare function onMessage(channelState: ChannelState, fn: (data: MessageObject) => void, time?: number): void;
export declare function averageResponseTime(): number;
export {};
