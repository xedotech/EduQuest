/**
 * API client to communicate with wallet services backend
 */
import { CustomOptions, Data } from "@toruslabs/http-helpers";
import { SafeEventEmitter } from "@web3auth/auth";
import { WsAPIControllerEvents } from "./interfaces";
import { ChainNamespaceType } from "./Network/INetworkController";
export interface AuthCredentials {
    jwtToken: string;
    publicAddress: string;
    eoaAddress?: string;
    chainNamespace?: ChainNamespaceType;
}
export declare const constructAuthHeaders: ({ jwtToken, publicAddress, eoaAddress, chainNamespace }: AuthCredentials) => {
    headers: Record<string, string>;
};
export interface IWSApiClient {
    authGet: <T>(url: string, authCredentials?: AuthCredentials, customOptions?: CustomOptions) => Promise<T>;
    authPost: <T>(url: string, data?: Data, authCredentials?: AuthCredentials, customOptions?: CustomOptions) => Promise<T>;
    authPut: <T>(url: string, data?: Data, authCredentials?: AuthCredentials, customOptions?: CustomOptions) => Promise<T>;
    authPatch: <T>(url: string, data?: Data, authCredentials?: AuthCredentials, customOptions?: CustomOptions) => Promise<T>;
    authRemove: <T>(url: string, data?: Data, authCredentials?: AuthCredentials, customOptions?: CustomOptions) => Promise<T>;
}
export declare const WSApiClient: (baseApiUrl: string, emitter: SafeEventEmitter<WsAPIControllerEvents>) => IWSApiClient;
