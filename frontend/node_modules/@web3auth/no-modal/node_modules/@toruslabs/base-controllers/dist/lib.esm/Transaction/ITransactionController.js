/**
 * The status of the transaction. Each status represents the state of the transaction internally
 * in the wallet. Some of these correspond with the state of the transaction on the network, but
 * some are wallet-specific.
 */

let TransactionStatus = /*#__PURE__*/function (TransactionStatus) {
  TransactionStatus["approved"] = "approved";
  TransactionStatus["cancelled"] = "cancelled";
  TransactionStatus["cancelling"] = "cancelling";
  TransactionStatus["confirmed"] = "confirmed";
  TransactionStatus["failed"] = "failed";
  TransactionStatus["finalized"] = "finalized";
  TransactionStatus["processed"] = "processed";
  TransactionStatus["rejected"] = "rejected";
  TransactionStatus["signed"] = "signed";
  TransactionStatus["submitted"] = "submitted";
  TransactionStatus["unapproved"] = "unapproved";
  TransactionStatus["dropped"] = "dropped";
  TransactionStatus["expired"] = "expired";
  TransactionStatus["pending"] = "pending";
  return TransactionStatus;
}({});
const TRANSACTION_TYPES = {
  CANCEL: "cancel",
  RETRY: "retry",
  CONTRACT_INTERACTION: "contractInteraction",
  DEPLOY_CONTRACT: "contractDeployment",
  WASM_BASED_DEPLOY: "wasmBasedDeploy",
  STANDARD_TRANSACTION: "transaction",
  STANDARD_PAYMENT_TRANSACTION: "payment_transaction",
  // specific to chains like solana and casper
  SENT_ETHER: "sentEther",
  SENT_SOL: "sentSol",
  TOKEN_METHOD_TRANSFER: "transfer",
  TOKEN_METHOD_TRANSFER_FROM: "transferFrom",
  TOKEN_METHOD_APPROVE: "approve",
  TOKEN_BURN: "burn",
  COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: "safeTransferFrom",
  SET_APPROVAL_FOR_ALL: "setApprovalForAll"
};
const TX_EVENTS = {
  TX_WARNING: "tx:warning",
  TX_ERROR: "tx:error",
  TX_FAILED: "tx:failed",
  TX_CONFIRMED: "tx:confirmed",
  TX_DROPPED: "tx:dropped",
  TX_EXPIRED: "tx:expired",
  TX_STATUS_UPDATE: "tx:status_update",
  TX_UNAPPROVED: "tx:unapproved",
  TX_RETRY: "tx:retry",
  TX_BLOCK_UPDATE: "tx:block_update"
};

/**
 * Transaction controller configuration
 */

/**
 * Transaction controller state
 */

/**
 * Result
 *
 * result - Promise resolving to a new transaction hash
 * transactionMeta - Meta information about this new transaction
 */

export { TRANSACTION_TYPES, TX_EVENTS, TransactionStatus };
