import { createAsyncMiddleware } from '@web3auth/auth';
import log from 'loglevel';
import { cloneDeep } from '../utils/lodashUtils.js';

function deferredPromise() {
  let resolve;
  const promise = new Promise(_resolve => {
    resolve = _resolve;
  });
  return {
    resolve,
    promise
  };
}
function createInflightCacheMiddleware({
  cacheIdentifierForRequest
}) {
  const inflightRequests = {};
  async function createActiveRequestHandler(res, activeRequestHandlers) {
    const {
      resolve,
      promise
    } = deferredPromise();
    activeRequestHandlers.push(handledRes => {
      // append a copy of the result and error to the response
      res.result = cloneDeep(handledRes.result);
      res.error = cloneDeep(handledRes.error);
      resolve();
    });
    return promise;
  }
  function handleActiveRequest(res, activeRequestHandlers) {
    // use setTimeout so we can resolve our original request first
    setTimeout(() => {
      activeRequestHandlers.forEach(handler => {
        try {
          handler(res);
        } catch (err) {
          // catch error so all requests are handled correctly
          log.error(err);
        }
      });
    });
  }
  return createAsyncMiddleware(async (req, res, next) => {
    // allow cach to be skipped if so specified
    if (req.skipCache) {
      return next();
    }
    // get cacheId, if cacheable
    const cacheId = cacheIdentifierForRequest(req);
    // if not cacheable, skip
    if (!cacheId) {
      log.info("Request is not cacheable, proceeding. req = %o", req);
      return next();
    }
    // check for matching requests
    let activeRequestHandlers = inflightRequests[cacheId];
    // if found, wait for the active request to be handled
    if (activeRequestHandlers) {
      // setup the response listener and wait for it to be called
      // it will handle copying the result and request fields
      log.info("Running %i handler(s) for request %o", activeRequestHandlers.length, req);
      await createActiveRequestHandler(res, activeRequestHandlers);
      return undefined;
    }
    // setup response handler array for subsequent requests
    activeRequestHandlers = [];
    inflightRequests[cacheId] = activeRequestHandlers;
    // allow request to be handled normally
    log.info("Carrying original request forward %o", req);
    await next();
    // clear inflight requests
    delete inflightRequests[cacheId];
    // schedule activeRequestHandlers to be handled
    log.info("Running %i collected handler(s) for request %o", activeRequestHandlers.length, req);
    handleActiveRequest(res, activeRequestHandlers);
    // complete
    return undefined;
  });
}

export { createInflightCacheMiddleware };
