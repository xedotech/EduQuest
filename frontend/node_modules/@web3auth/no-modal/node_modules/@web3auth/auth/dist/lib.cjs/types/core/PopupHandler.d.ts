import type { default as TypedEmitter } from "typed-emitter";
export interface PopupResponse {
    sessionId?: string;
    sessionNamespace?: string;
    state?: string;
    error?: string;
}
export type PopupHandlerEvents = {
    close: () => void;
};
declare const PopupHandler_base: new () => TypedEmitter<PopupHandlerEvents>;
declare class PopupHandler extends PopupHandler_base {
    url: string;
    target: string;
    features: string;
    window: Window;
    windowTimer: number;
    iClosedWindow: boolean;
    timeout: number;
    sessionSocketUrl: string;
    sessionServerUrl: string;
    constructor({ url, target, features, timeout, sessionSocketUrl, sessionServerUrl, }: {
        url: string;
        target?: string;
        features?: string;
        timeout?: number;
        sessionSocketUrl?: string;
        sessionServerUrl?: string;
    });
    _setupTimer(): void;
    open(): void;
    close(): void;
    redirect(locationReplaceOnRedirect: boolean): void;
    listenOnChannel(loginId: string): Promise<PopupResponse>;
}
export default PopupHandler;
