'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var constants$1 = require('@toruslabs/constants');
var customauth = require('@toruslabs/customauth');
var sessionManager = require('@toruslabs/session-manager');
var browserStorage = require('../utils/browserStorage.js');
var constants = require('../utils/constants.js');
var utils$1 = require('../utils/utils.js');
var logger = require('../utils/logger.js');
var AuthProvider = require('./AuthProvider.js');
var errors = require('./errors.js');
var PopupHandler = require('./PopupHandler.js');
var utils = require('./utils.js');

class Auth {
  constructor(options) {
    _defineProperty(this, "state", {});
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "sessionManager", void 0);
    _defineProperty(this, "currentStorage", void 0);
    _defineProperty(this, "_storageBaseKey", "auth_store");
    _defineProperty(this, "dappState", void 0);
    _defineProperty(this, "addVersionInUrls", true);
    _defineProperty(this, "authProvider", void 0);
    _defineProperty(this, "authProviderPromise", void 0);
    if (!options.clientId) throw errors.InitializationError.invalidParams("clientId is required");
    if (!options.network) options.network = constants.WEB3AUTH_NETWORK.SAPPHIRE_MAINNET;
    if (!options.buildEnv) options.buildEnv = constants.BUILD_ENV.PRODUCTION;
    if (!options.sdkMode) options.sdkMode = constants.SDK_MODE.DEFAULT;
    if (options.buildEnv === constants.BUILD_ENV.DEVELOPMENT || options.buildEnv === constants.BUILD_ENV.TESTING || options.sdkUrl) this.addVersionInUrls = false;
    if (!options.sdkUrl && !options.useMpc) {
      if (options.buildEnv === constants.BUILD_ENV.DEVELOPMENT) {
        options.sdkUrl = constants.AUTH_SERVICE_DEVELOPMENT_URL;
        options.dashboardUrl = constants.AUTH_DASHBOARD_DEVELOPMENT_URL;
      } else if (options.buildEnv === constants.BUILD_ENV.STAGING) {
        options.sdkUrl = constants.AUTH_SERVICE_STAGING_URL;
        options.dashboardUrl = constants.AUTH_DASHBOARD_STAGING_URL;
      } else if (options.buildEnv === constants.BUILD_ENV.TESTING) {
        options.sdkUrl = constants.AUTH_SERVICE_TESTING_URL;
        options.dashboardUrl = constants.AUTH_DASHBOARD_TESTING_URL;
      } else {
        options.sdkUrl = constants.AUTH_SERVICE_PRODUCTION_URL;
        options.dashboardUrl = constants.AUTH_DASHBOARD_PRODUCTION_URL;
      }
    }
    if (!options.redirectUrl && typeof window !== "undefined") {
      options.redirectUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
    }
    if (!options.uxMode) options.uxMode = customauth.UX_MODE.REDIRECT;
    if (typeof options.replaceUrlOnRedirect !== "boolean") options.replaceUrlOnRedirect = true;
    if (typeof options.includeUserDataInToken !== "boolean") options.includeUserDataInToken = true;
    if (!options.originData) options.originData = {};
    if (!options.whiteLabel) options.whiteLabel = {};
    if (!options.authConnectionConfig) options.authConnectionConfig = [];
    if (!options.mfaSettings) options.mfaSettings = {};
    if (!options.storageServerUrl) options.storageServerUrl = constants$1.SESSION_SERVER_API_URL;
    if (!options.sessionSocketUrl) options.sessionSocketUrl = constants$1.SESSION_SERVER_SOCKET_URL;
    if (!options.storage) options.storage = "local";
    if (!options.sessionTime) options.sessionTime = 86400;
    this.options = options;
  }
  get privKey() {
    if (this.options.useMpc) return this.state.factorKey || "";
    return this.state.privKey ? this.state.privKey.padStart(64, "0") : "";
  }
  get coreKitKey() {
    return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, "0") : "";
  }
  get ed25519PrivKey() {
    return this.state.ed25519PrivKey ? this.state.ed25519PrivKey.padStart(128, "0") : "";
  }
  get coreKitEd25519Key() {
    return this.state.coreKitEd25519PrivKey ? this.state.coreKitEd25519PrivKey.padStart(128, "0") : "";
  }
  get sessionId() {
    return this.state.sessionId || "";
  }
  get sessionNamespace() {
    return this.options.sessionNamespace || "";
  }
  get appState() {
    return this.state.userInfo.appState || this.dappState || "";
  }
  get baseUrl() {
    // testing and develop don't have versioning
    if (!this.addVersionInUrls) return `${this.options.sdkUrl}`;
    return `${this.options.sdkUrl}/v${utils.version.split(".")[0]}`;
  }
  get dashboardUrl() {
    // testing and develop don't have versioning
    if (!this.addVersionInUrls) return `${this.options.dashboardUrl}`;
    return `${this.options.dashboardUrl}/v${utils.version.split(".")[0]}`;
  }
  async init() {
    // get sessionNamespace from the redirect result.
    const params = utils.getHashQueryParams(this.options.replaceUrlOnRedirect);
    if (params.sessionNamespace) this.options.sessionNamespace = params.sessionNamespace;
    const storageKey = this.options.sessionKey || (this.options.sessionNamespace ? `${this._storageBaseKey}_${this.options.sessionNamespace}` : this._storageBaseKey);
    this.currentStorage = browserStorage.BrowserStorage.getInstance(storageKey, this.options.storage);
    const sessionId = this.currentStorage.get("sessionId");
    this.sessionManager = new sessionManager.SessionManager({
      sessionServerBaseUrl: this.options.storageServerUrl,
      sessionNamespace: this.options.sessionNamespace,
      sessionTime: this.options.sessionTime,
      sessionId,
      allowedOrigin: this.options.sdkUrl
    });
    if (this.options.network === constants.WEB3AUTH_NETWORK.TESTNET || this.options.network === constants.WEB3AUTH_NETWORK.SAPPHIRE_DEVNET) {
      // using console log because it shouldn't be affected by loglevel config
      // eslint-disable-next-line no-console
      console.log(`%c WARNING! You are on ${this.options.network}. Please set network: 'mainnet' or 'sapphire_mainnet' in production`, "color: #FF0000");
    }
    if (this.options.buildEnv !== constants.BUILD_ENV.PRODUCTION) {
      // using console log because it shouldn't be affected by loglevel config
      // eslint-disable-next-line no-console
      console.log(`%c WARNING! You are using build env ${this.options.buildEnv}. Please set buildEnv: 'production' in production`, "color: #FF0000");
    }
    if (params.error) {
      this.dappState = params.state;
      throw errors.LoginError.loginFailed(params.error);
    }
    if (params.sessionId) {
      this.currentStorage.set("sessionId", params.sessionId);
      this.sessionManager.sessionId = params.sessionId;
    }
    if (this.sessionManager.sessionId) {
      const data = await this._authorizeSession();
      // Fill state with correct info from session
      // If session is invalid all the data is unset here.
      this.updateState(data);
      if (Object.keys(data).length === 0) {
        // If session is invalid, unset the sessionId from localStorage.
        this.currentStorage.set("sessionId", "");
      } else {
        this.updateState({
          sessionId: this.sessionManager.sessionId
        });
      }
    }
    if (this.options.sdkMode === constants.SDK_MODE.IFRAME) {
      this.authProvider = new AuthProvider.AuthProvider({
        sdkUrl: this.baseUrl,
        whiteLabel: this.options.whiteLabel
      });
      if (!this.state.sessionId) {
        this.authProviderPromise = this.authProvider.init({
          network: this.options.network,
          clientId: this.options.clientId
        });
        if (params.nonce) {
          await this.authProviderPromise;
          await this.postLoginInitiatedMessage(JSON.parse(params.loginParams), params.nonce);
        }
      }
    }
  }
  async login(params) {
    if (!params.authConnection && (!params.authConnectionId || !params.groupedAuthConnectionId)) throw errors.LoginError.invalidLoginParams(`AuthConnection is required`);
    const loginParams = _objectSpread({}, params);
    const dataObject = {
      actionType: constants.AUTH_ACTIONS.LOGIN,
      options: this.options,
      params: loginParams
    };
    const result = await this.authHandler(`${this.baseUrl}/start`, dataObject, customauth.getTimeout(params.authConnection));
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) return null;
    if (result.error) {
      this.dappState = result.state;
      throw errors.LoginError.loginFailed(result.error);
    }
    this.sessionManager.sessionId = result.sessionId;
    this.options.sessionNamespace = result.sessionNamespace;
    this.currentStorage.set("sessionId", result.sessionId);
    await this.rehydrateSession();
    return {
      privKey: this.privKey
    };
  }
  async postLoginInitiatedMessage(params, nonce) {
    var _this$authProvider;
    if (this.options.sdkMode !== constants.SDK_MODE.IFRAME) throw errors.LoginError.invalidLoginParams("Cannot perform this action in default mode.");
    // This is to ensure that the auth provider is initialized before calling postLoginInitiatedMessage
    // This is setup in the init method, if there is no active session.
    if (this.authProviderPromise) await this.authProviderPromise;
    // if there is an active session, we dont load the auth provider in the init method.
    // so we need to initialize it here, if user logged out and then login in again.
    if (!((_this$authProvider = this.authProvider) !== null && _this$authProvider !== void 0 && _this$authProvider.initialized)) {
      await this.authProvider.init({
        network: this.options.network,
        clientId: this.options.clientId
      });
    }
    const result = await this.authProvider.postLoginInitiatedMessage({
      actionType: constants.AUTH_ACTIONS.LOGIN,
      params,
      options: this.options
    }, nonce);
    if (result.error) throw errors.LoginError.loginFailed(result.error);
    this.sessionManager.sessionId = result.sessionId;
    this.options.sessionNamespace = result.sessionNamespace;
    this.currentStorage.set("sessionId", result.sessionId);
    await this.rehydrateSession();
  }
  async postLoginCancelledMessage(nonce) {
    var _this$authProvider2;
    if (this.options.sdkMode !== constants.SDK_MODE.IFRAME) throw errors.LoginError.invalidLoginParams("Cannot perform this action in default mode.");
    if (this.authProviderPromise) await this.authProviderPromise;
    if (!((_this$authProvider2 = this.authProvider) !== null && _this$authProvider2 !== void 0 && _this$authProvider2.initialized)) throw errors.InitializationError.notInitialized();
    this.authProvider.postLoginCancelledMessage(nonce);
  }
  async logout() {
    if (!this.sessionManager.sessionId) throw errors.LoginError.userNotLoggedIn();
    await this.sessionManager.invalidateSession();
    this.updateState({
      privKey: "",
      coreKitKey: "",
      coreKitEd25519PrivKey: "",
      ed25519PrivKey: "",
      walletKey: "",
      oAuthPrivateKey: "",
      tKey: "",
      metadataNonce: "",
      keyMode: undefined,
      userInfo: {
        name: "",
        profileImage: "",
        dappShare: "",
        idToken: "",
        oAuthIdToken: "",
        oAuthAccessToken: "",
        appState: "",
        email: "",
        authConnectionId: "",
        userId: "",
        groupedAuthConnectionId: "",
        authConnection: "",
        isMfaEnabled: false
      },
      authToken: "",
      sessionId: "",
      factorKey: "",
      signatures: [],
      tssShareIndex: -1,
      tssPubKey: "",
      tssShare: "",
      tssNonce: -1
    });
    this.currentStorage.set("sessionId", "");
  }
  async enableMFA(params) {
    var _this$state$userInfo;
    if (!this.sessionId) throw errors.LoginError.userNotLoggedIn();
    if (this.state.userInfo.isMfaEnabled) throw errors.LoginError.mfaAlreadyEnabled();
    const dataObject = {
      actionType: constants.AUTH_ACTIONS.ENABLE_MFA,
      options: _objectSpread(_objectSpread({}, this.options), {}, {
        sdkMode: constants.SDK_MODE.DEFAULT
      }),
      params: _objectSpread(_objectSpread({}, params), {}, {
        authConnection: this.state.userInfo.authConnection,
        authConnectionId: this.state.userInfo.authConnectionId,
        groupedAuthConnectionId: this.state.userInfo.groupedAuthConnectionId,
        extraLoginOptions: {
          login_hint: this.state.userInfo.userId
        },
        mfaLevel: "mandatory"
      }),
      sessionId: this.sessionId
    };
    const result = await this.authHandler(`${this.baseUrl}/start`, dataObject, constants.POPUP_TIMEOUT);
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) return null;
    if (result.error) {
      this.dappState = result.state;
      throw errors.LoginError.loginFailed(result.error);
    }
    this.sessionManager.sessionId = result.sessionId;
    this.options.sessionNamespace = result.sessionNamespace;
    this.currentStorage.set("sessionId", result.sessionId);
    await this.rehydrateSession();
    return Boolean((_this$state$userInfo = this.state.userInfo) === null || _this$state$userInfo === void 0 ? void 0 : _this$state$userInfo.isMfaEnabled);
  }
  async manageMFA(params) {
    if (!this.sessionId) throw errors.LoginError.userNotLoggedIn();
    if (!this.state.userInfo.isMfaEnabled) throw errors.LoginError.mfaNotEnabled();
    // in case of redirect mode, redirect url will be dapp specified
    // in case of popup mode, redirect url will be sdk specified
    const defaultParams = {
      dappUrl: `${window.location.origin}${window.location.pathname}`
    };
    const loginId = sessionManager.SessionManager.generateRandomSessionKey();
    const dataObject = {
      actionType: constants.AUTH_ACTIONS.MANAGE_MFA,
      // manage mfa always opens in a new tab, so need to fix the uxMode to redirect.
      options: _objectSpread(_objectSpread({}, this.options), {}, {
        uxMode: customauth.UX_MODE.REDIRECT,
        sdkMode: constants.SDK_MODE.DEFAULT,
        redirectUrl: `${this.dashboardUrl}/wallet/account`
      }),
      params: _objectSpread(_objectSpread(_objectSpread({}, defaultParams), params), {}, {
        authConnection: this.state.userInfo.authConnection,
        authConnectionId: this.state.userInfo.authConnectionId,
        groupedAuthConnectionId: this.state.userInfo.groupedAuthConnectionId,
        extraLoginOptions: {
          login_hint: this.state.userInfo.userId
        },
        appState: utils$1.jsonToBase64({
          loginId
        })
      }),
      sessionId: this.sessionId
    };
    this.createLoginSession(loginId, dataObject, dataObject.options.sessionTime, true);
    const configParams = {
      loginId,
      sessionNamespace: this.options.sessionNamespace,
      storageServerUrl: this.options.storageServerUrl
    };
    const loginUrl = customauth.constructURL({
      baseURL: `${this.baseUrl}/start`,
      hash: {
        b64Params: utils$1.jsonToBase64(configParams)
      }
    });
    window.open(loginUrl, "_blank");
  }
  async manageSocialFactor(actionType, params) {
    if (!this.sessionId) throw errors.LoginError.userNotLoggedIn();
    const dataObject = {
      actionType,
      options: _objectSpread(_objectSpread({}, this.options), {}, {
        sdkMode: constants.SDK_MODE.DEFAULT
      }),
      params: _objectSpread({}, params),
      sessionId: this.sessionId
    };
    const result = await this.authHandler(`${this.baseUrl}/start`, dataObject);
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) return undefined;
    if (result.error) return false;
    return true;
  }
  async addAuthenticatorFactor(params) {
    if (!this.sessionId) throw errors.LoginError.userNotLoggedIn();
    const dataObject = {
      actionType: constants.AUTH_ACTIONS.ADD_AUTHENTICATOR_FACTOR,
      options: _objectSpread(_objectSpread({}, this.options), {}, {
        sdkMode: constants.SDK_MODE.DEFAULT
      }),
      params: _objectSpread(_objectSpread({}, params), {}, {
        authConnection: customauth.AUTH_CONNECTION.AUTHENTICATOR
      }),
      sessionId: this.sessionId
    };
    const result = await this.authHandler(`${this.baseUrl}/start`, dataObject);
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) return undefined;
    if (result.error) return false;
    return true;
  }
  async addPasskeyFactor(params) {
    if (!this.sessionId) throw errors.LoginError.userNotLoggedIn();
    const dataObject = {
      actionType: constants.AUTH_ACTIONS.ADD_PASSKEY_FACTOR,
      options: _objectSpread(_objectSpread({}, this.options), {}, {
        sdkMode: constants.SDK_MODE.DEFAULT
      }),
      params: _objectSpread(_objectSpread({}, params), {}, {
        authConnection: customauth.AUTH_CONNECTION.PASSKEYS
      }),
      sessionId: this.sessionId
    };
    const result = await this.authHandler(`${this.baseUrl}/start`, dataObject);
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) return undefined;
    if (result.error) return false;
    return true;
  }
  async cleanup() {
    if (this.authProvider) this.authProvider.cleanup();
  }
  getUserInfo() {
    if (!this.sessionManager.sessionId) {
      throw errors.LoginError.userNotLoggedIn();
    }
    return this.state.userInfo;
  }
  async createLoginSession(loginId, data, timeout = 600, skipAwait = false) {
    if (!this.sessionManager) throw errors.InitializationError.notInitialized();
    const loginSessionMgr = new sessionManager.SessionManager({
      sessionServerBaseUrl: data.options.storageServerUrl,
      sessionNamespace: data.options.sessionNamespace,
      sessionTime: timeout,
      // each login key must be used with 10 mins (might be used at the end of popup redirect)
      sessionId: loginId,
      allowedOrigin: this.options.sdkUrl
    });
    const promise = loginSessionMgr.createSession(JSON.parse(JSON.stringify(data)));
    if (data.options.uxMode === customauth.UX_MODE.REDIRECT && !skipAwait) {
      await promise;
    }
  }
  async _authorizeSession() {
    try {
      if (!this.sessionManager.sessionId) return {};
      const result = await this.sessionManager.authorizeSession();
      return result;
    } catch (err) {
      logger.log.error("authorization failed", err);
      return {};
    }
  }
  updateState(data) {
    this.state = _objectSpread(_objectSpread({}, this.state), data);
  }
  async rehydrateSession() {
    const result = await this._authorizeSession();
    this.updateState(result);
  }
  async authHandler(url, dataObject, popupTimeout = 1000 * 10) {
    const loginId = sessionManager.SessionManager.generateRandomSessionKey();
    await this.createLoginSession(loginId, dataObject);
    const configParams = {
      loginId,
      sessionNamespace: this.options.sessionNamespace,
      storageServerUrl: this.options.storageServerUrl
    };
    if (this.options.uxMode === customauth.UX_MODE.REDIRECT) {
      const loginUrl = customauth.constructURL({
        baseURL: url,
        hash: {
          b64Params: utils$1.jsonToBase64(configParams)
        }
      });
      window.location.href = loginUrl;
      return undefined;
    }
    const loginUrl = customauth.constructURL({
      baseURL: url,
      hash: {
        b64Params: utils$1.jsonToBase64(configParams)
      }
    });
    const currentWindow = new PopupHandler({
      url: loginUrl,
      timeout: popupTimeout,
      sessionServerUrl: this.options.storageServerUrl,
      sessionSocketUrl: this.options.sessionSocketUrl
    });
    return new Promise((resolve, reject) => {
      currentWindow.on("close", () => {
        reject(errors.LoginError.popupClosed());
      });
      currentWindow.listenOnChannel(loginId).then(resolve).catch(reject);
      try {
        currentWindow.open();
      } catch (error) {
        reject(error);
      }
    });
  }
}

exports.Auth = Auth;
