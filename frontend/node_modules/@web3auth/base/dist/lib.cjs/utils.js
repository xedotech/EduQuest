'use strict';

var baseControllers = require('@toruslabs/base-controllers');
var constants = require('@toruslabs/constants');
var httpHelpers = require('@toruslabs/http-helpers');
require('./adapter/IAdapter.js');
var auth = require('@web3auth/auth');

function storageAvailable(type) {
  let storageExists = false;
  let storageLength = 0;
  let storage;
  try {
    storage = window[type];
    storageExists = true;
    storageLength = storage.length;
    const x = "__storage_test__";
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  } catch (error) {
    const _error = error;
    return !!(_error && (
    // everything except Firefox
    _error.code === 22 ||
    // Firefox
    _error.code === 1014 ||
    // test name field too, because code might not be present
    // everything except Firefox
    _error.name === "QuotaExceededError" ||
    // Firefox
    _error.name === "NS_ERROR_DOM_QUOTA_REACHED") &&
    // acknowledge QuotaExceededError only if there's something already stored
    storageExists && storageLength !== 0);
  }
}
const isHexStrict = hex => {
  return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
};
const signerHost = web3AuthNetwork => {
  return constants.SIGNER_MAP[web3AuthNetwork !== null && web3AuthNetwork !== void 0 ? web3AuthNetwork : auth.WEB3AUTH_NETWORK.SAPPHIRE_MAINNET];
};
const fetchProjectConfig = async (clientId, web3AuthNetwork, aaProvider) => {
  const url = new URL(`${signerHost(web3AuthNetwork)}/api/configuration`);
  url.searchParams.append("project_id", clientId);
  url.searchParams.append("network", web3AuthNetwork);
  url.searchParams.append("whitelist", "true");
  if (aaProvider) url.searchParams.append("aa_provider", aaProvider);
  const res = await httpHelpers.get(url.href);
  return res;
};
const fetchWalletRegistry = async url => {
  const res = await httpHelpers.get(url || "https://assets.web3auth.io/v1/wallet-registry.json");
  return res;
};

// Normalize wallet name to a standard format, used for external wallets that are auto-detected by MIPD (EIP-6963 and Wallet Standard)
const normalizeWalletName = name => {
  let normalizedName = name.toLowerCase();
  // remove decriptive part after | e.g. "Crypto.com | Defi Wallet" => "Crypto.com"
  normalizedName = normalizedName.split("|")[0];

  // replace -  with space e.g. "Trust - Wallet" => "Trust Wallet"
  normalizedName = normalizedName.replace(/-/g, " ");

  // replace multiple spaces with single space
  normalizedName = normalizedName.replace(/\s+/g, " ");

  // remove trailing "wallet" e.g. "Trust Wallet" => "Trust", "GateWallet" => "Gate"
  normalizedName = normalizedName.replace(/wallet$/i, "").trim();

  // replace space with -
  normalizedName = normalizedName.replace(/\s/g, "-");
  return normalizedName;
};

Object.defineProperty(exports, "cloneDeep", {
  enumerable: true,
  get: function () { return baseControllers.cloneDeep; }
});
exports.fetchProjectConfig = fetchProjectConfig;
exports.fetchWalletRegistry = fetchWalletRegistry;
exports.isHexStrict = isHexStrict;
exports.normalizeWalletName = normalizeWalletName;
exports.signerHost = signerHost;
exports.storageAvailable = storageAvailable;
