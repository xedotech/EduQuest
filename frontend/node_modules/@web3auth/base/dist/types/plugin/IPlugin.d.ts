import { type SafeEventEmitter, WhiteLabelData } from "@web3auth/auth";
import { type IWeb3AuthCore } from "../core/IWeb3Auth";
import { WALLET_ADAPTER_TYPE } from "../wallet";
export declare const PLUGIN_NAMESPACES: {
    readonly MULTICHAIN: "multichain";
    readonly EIP155: "eip155";
    readonly SOLANA: "solana";
    readonly CASPER: "casper";
    readonly XRPL: "xrpl";
    readonly OTHER: "other";
};
export declare const PLUGIN_STATUS: {
    readonly READY: "ready";
    readonly CONNECTING: "connecting";
    readonly CONNECTED: "connected";
    readonly DISCONNECTED: "disconnected";
    readonly ERRORED: "errored";
};
export type PLUGIN_STATUS_TYPE = (typeof PLUGIN_STATUS)[keyof typeof PLUGIN_STATUS];
export declare const PLUGIN_EVENTS: {
    readonly READY: "ready";
    readonly CONNECTING: "connecting";
    readonly CONNECTED: "connected";
    readonly DISCONNECTED: "disconnected";
    readonly ERRORED: "errored";
};
export type PluginNamespace = (typeof PLUGIN_NAMESPACES)[keyof typeof PLUGIN_NAMESPACES];
export declare const EVM_PLUGINS: {
    readonly WALLET_SERVICES: "wallet-services";
    readonly NFT_CHECKOUT: "nft-checkout";
};
export declare const SOLANA_PLUGINS: {
    readonly SOLANA: "solana";
};
export declare const WALLET_PLUGINS: {
    readonly SOLANA: "solana";
    readonly WALLET_SERVICES: "wallet-services";
    readonly NFT_CHECKOUT: "nft-checkout";
};
export interface PluginConnectParams {
    sessionId: string;
    sessionNamespace?: string;
}
export interface IPlugin extends SafeEventEmitter {
    name: string;
    status: PLUGIN_STATUS_TYPE;
    SUPPORTED_ADAPTERS: WALLET_ADAPTER_TYPE[];
    pluginNamespace: PluginNamespace;
    initWithWeb3Auth(web3auth: IWeb3AuthCore, whiteLabel?: WhiteLabelData): Promise<void>;
    connect(params?: PluginConnectParams): Promise<void>;
    disconnect(): Promise<void>;
    cleanup(): Promise<void>;
}
