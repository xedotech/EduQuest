import { cloneDeep } from "@toruslabs/base-controllers";
import type { WEB3AUTH_NETWORK_TYPE, WhiteLabelData } from "@web3auth/auth";
import { ChainNamespaceType } from "./chain/IChainInterface";
export interface WhitelistResponse {
    urls: string[];
    signed_urls: Record<string, string>;
}
export interface PROJECT_CONFIG_RESPONSE {
    whitelabel?: WhiteLabelData;
    sms_otp_enabled: boolean;
    wallet_connect_enabled: boolean;
    wallet_connect_project_id?: string;
    whitelist?: WhitelistResponse;
    key_export_enabled?: boolean;
}
export interface WalletRegistryItem {
    name: string;
    chains: string[];
    walletConnect?: {
        sdks: string[];
    };
    app?: {
        browser?: string;
        android?: string;
        ios?: string;
        chrome?: string;
        firefox?: string;
        edge?: string;
    };
    mobile?: {
        native?: string;
        universal?: string;
        inAppBrowser?: string;
    };
    primaryColor?: string;
    injected?: {
        namespace: ChainNamespaceType;
        injected_id: string;
    }[];
    imgExtension?: string;
}
export type WalletRegistry = {
    others: Record<string, WalletRegistryItem>;
    default: Record<string, WalletRegistryItem>;
};
export declare function storageAvailable(type: "sessionStorage" | "localStorage"): boolean;
export declare const isHexStrict: (hex: string) => boolean;
export declare const signerHost: (web3AuthNetwork?: WEB3AUTH_NETWORK_TYPE) => string;
export declare const fetchProjectConfig: (clientId: string, web3AuthNetwork: WEB3AUTH_NETWORK_TYPE, aaProvider?: string) => Promise<PROJECT_CONFIG_RESPONSE>;
export declare const fetchWalletRegistry: (url?: string) => Promise<WalletRegistry>;
export declare const normalizeWalletName: (name: string) => string;
export { cloneDeep };
