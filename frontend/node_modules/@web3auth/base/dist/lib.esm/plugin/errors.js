import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { Web3AuthError } from '../errors/index.js';

class WalletServicesPluginError extends Web3AuthError {
  constructor(code, message, cause) {
    // takes care of stack and proto
    super(code, message, cause);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "WalletServicesPluginError"
    });
  }
  static fromCode(code, extraMessage = "", cause) {
    return new WalletServicesPluginError(code, `${WalletServicesPluginError.messages[code]}${extraMessage}`, cause);
  }
  static notInitialized(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5210, extraMessage, cause);
  }
  static unsupportedAdapter(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5211, extraMessage, cause);
  }
  static providerRequired(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5212, extraMessage, cause);
  }
  static web3authRequired(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5213, extraMessage, cause);
  }
  static web3AuthNotConnected(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5214, extraMessage, cause);
  }
  static alreadyInitialized(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5216, extraMessage, cause);
  }
  static unsupportedChainNamespace(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5218, extraMessage, cause);
  }
  static differentWeb3AuthNetwork(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5219, extraMessage, cause);
  }
  static invalidParams(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5220, extraMessage, cause);
  }
  static web3authNotInitialized(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5221, extraMessage, cause);
  }
  static invalidSession(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5222, extraMessage, cause);
  }
  static walletPluginNotConnected(extraMessage = "", cause) {
    return WalletServicesPluginError.fromCode(5223, extraMessage, cause);
  }
}
_defineProperty(WalletServicesPluginError, "messages", {
  5210: "Wallet Services Plugin is not initialized",
  5211: "Web3Auth is connected to unsupported adapter. Wallet services connector plugin requires web3auth connected to auth adapter.",
  5212: "Provider is required..",
  5213: "Web3Auth instance is required while initialization.",
  5214: "Web3Auth is not connected.",
  5216: "Plugin is already initialized",
  5218: "Unsupported chain namespace.",
  5219: "Plugin network different than web3auth instance network.",
  5221: "Web3Auth is not initialized",
  5222: "Invalid session inside wallet services. Please report this issue.",
  5223: "Wallet plugin is not connected Yet. Please wait for plugin to connect and listen via `connected` event on the plugin"
});
class NFTCheckoutPluginError extends Web3AuthError {
  constructor(code, message, cause) {
    // takes care of stack and proto
    super(code, message, cause);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "NFTCheckoutPluginError"
    });
  }
  static fromCode(code, extraMessage = "", cause) {
    return new NFTCheckoutPluginError(code, `${NFTCheckoutPluginError.messages[code]}${extraMessage}`, cause);
  }
  static notInitialized(extraMessage = "", cause) {
    return NFTCheckoutPluginError.fromCode(6210, extraMessage, cause);
  }
  static providerRequired(extraMessage = "", cause) {
    return NFTCheckoutPluginError.fromCode(6212, extraMessage, cause);
  }
  static web3authRequired(extraMessage = "", cause) {
    return NFTCheckoutPluginError.fromCode(6213, extraMessage, cause);
  }
  static web3AuthNotConnected(extraMessage = "", cause) {
    return NFTCheckoutPluginError.fromCode(6214, extraMessage, cause);
  }
  static pluginNotConnected(extraMessage = "", cause) {
    return NFTCheckoutPluginError.fromCode(6223, extraMessage, cause);
  }
}
_defineProperty(NFTCheckoutPluginError, "messages", {
  6210: "NFT Checkout Plugin is not initialized",
  6212: "Provider is required..",
  6213: "Web3Auth instance is required while initialization.",
  6214: "Web3Auth is not connected.",
  6223: "NFT Checkout plugin is not connected Yet. Please wait for plugin to connect and listen via `connected` event on the plugin"
});

export { NFTCheckoutPluginError, WalletServicesPluginError };
