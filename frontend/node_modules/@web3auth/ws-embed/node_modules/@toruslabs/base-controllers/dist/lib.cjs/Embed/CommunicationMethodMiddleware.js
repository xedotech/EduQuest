'use strict';

var auth = require('@web3auth/auth');
var enums = require('../enums.js');

function createChangeProviderMiddlewareMiddleware({
  changeProvider
}) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== enums.COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();
    if (!changeProvider) throw new Error("CommunicationMiddleware - opts.changeProvider not provided");
    response.result = await changeProvider(request);
  });
}
function createTopupMiddleware({
  topup
}) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== enums.COMMUNICATION_JRPC_METHODS.TOPUP) return next();
    if (!topup) throw new Error("CommunicationMiddleware - opts.topup not provided");
    response.result = await topup(request);
  });
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== targetMethod) return next();
    if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);
    const result = await handler(request);
    if (!result) {
      return next();
    }
    response.result = result;
    return undefined;
  });
}
function createCommunicationMiddleware(providerHandlers) {
  const {
    getUserInfo,
    getWalletInstanceId,
    topup,
    logout,
    changeProvider,
    setIFrameStatus,
    handleWindowRpc,
    getProviderState,
    loginWithPrivateKey,
    showWalletConnect,
    showCheckout,
    showWalletUi,
    showSwap,
    showWindowBlockAlert,
    loginWithSessionId
  } = providerHandlers;
  return auth.mergeMiddleware([createChangeProviderMiddlewareMiddleware({
    changeProvider
  }), createTopupMiddleware({
    topup
  }), auth.createScaffoldMiddleware({
    [enums.COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,
    [enums.COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,
    [enums.COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,
    [enums.COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,
    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers
    [enums.COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,
    [enums.COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,
    [enums.COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,
    [enums.COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,
    [enums.COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,
    [enums.COMMUNICATION_JRPC_METHODS.SHOW_SWAP]: showSwap,
    [enums.COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert
  }), createGenericJRPCMiddleware(enums.COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey), createGenericJRPCMiddleware(enums.COMMUNICATION_JRPC_METHODS.LOGIN_WITH_SESSION_ID, loginWithSessionId)]);
}

exports.createChangeProviderMiddlewareMiddleware = createChangeProviderMiddlewareMiddleware;
exports.createCommunicationMiddleware = createCommunicationMiddleware;
exports.createGenericJRPCMiddleware = createGenericJRPCMiddleware;
exports.createTopupMiddleware = createTopupMiddleware;
