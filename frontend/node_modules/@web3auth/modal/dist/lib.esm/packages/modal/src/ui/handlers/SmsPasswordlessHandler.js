import { WalletLoginError } from '@web3auth/no-modal';
import { PasswordlessHandler } from './AbstractHandler.js';

class SmsPasswordlessHandler extends PasswordlessHandler {
  constructor(params) {
    super(params);
    if (this.sessionStorageAvailable) {
      var _window$sessionStorag;
      this.trackingId = (_window$sessionStorag = window.sessionStorage.getItem("trackingId")) !== null && _window$sessionStorag !== void 0 ? _window$sessionStorag : undefined;
    }
  }
  async sendVerificationCode(params) {
    var _params$captchaToken;
    const {
      loginHint,
      network,
      web3authClientId
    } = this.passwordlessParams;
    const captchaToken = (_params$captchaToken = params === null || params === void 0 ? void 0 : params.captchaToken) !== null && _params$captchaToken !== void 0 ? _params$captchaToken : "";
    if (!captchaToken) {
      throw WalletLoginError.connectionError("Captcha token is required");
    }
    const finalParams = {
      client_id: web3authClientId,
      web3auth_client_id: web3authClientId,
      connection: this.connection,
      login_hint: loginHint,
      tracking_id: this.trackingId,
      whitelabel: this.whiteLabelParams,
      version: this.version,
      network,
      captcha_token: captchaToken
    };
    return super.start(finalParams);
  }
  async verifyCode(code) {
    const {
      loginHint,
      network,
      web3authClientId
    } = this.passwordlessParams;
    const params = {
      client_id: web3authClientId,
      login_hint: loginHint,
      code,
      connection: this.connection,
      tracking_id: this.trackingId,
      version: this.version,
      network
    };
    return super.verify(params);
  }
}

export { SmsPasswordlessHandler as default };
