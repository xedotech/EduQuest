'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tsCustomError = require('ts-custom-error');

class AuthError extends tsCustomError.CustomError {
  constructor(code, message) {
    // takes care of stack and proto
    super(message);
    _defineProperty(this, "code", void 0);
    _defineProperty(this, "message", void 0);
    this.code = code;
    this.message = message || "";
    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "AuthError"
    });
  }
  toJSON() {
    return {
      name: this.name,
      code: this.code,
      message: this.message
    };
  }
  toString() {
    return JSON.stringify(this.toJSON());
  }
}
class InitializationError extends AuthError {
  constructor(code, message) {
    // takes care of stack and proto
    super(code, message);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "InitializationError"
    });
  }
  static fromCode(code, extraMessage = "") {
    return new InitializationError(code, `${InitializationError.messages[code]}, ${extraMessage}`);
  }
  static invalidParams(extraMessage = "") {
    return InitializationError.fromCode(5001, extraMessage);
  }
  static notInitialized(extraMessage = "") {
    return InitializationError.fromCode(5002, extraMessage);
  }
}

/**
 * login errors
 */
_defineProperty(InitializationError, "messages", {
  5000: "Custom",
  5001: "Invalid constructor params",
  5002: "SDK not initialized. please call init first"
});
class LoginError extends AuthError {
  constructor(code, message) {
    // takes care of stack and proto
    super(code, message);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "LoginError"
    });
  }
  static fromCode(code, extraMessage = "") {
    return new LoginError(code, `${LoginError.messages[code]}, ${extraMessage}`);
  }
  static invalidLoginParams(extraMessage = "") {
    return LoginError.fromCode(5111, extraMessage);
  }
  static userNotLoggedIn(extraMessage = "") {
    return LoginError.fromCode(5112, extraMessage);
  }
  static popupClosed(extraMessage = "") {
    return LoginError.fromCode(5113, extraMessage);
  }
  static loginFailed(extraMessage = "") {
    return LoginError.fromCode(5114, extraMessage);
  }
  static popupBlocked(extraMessage = "") {
    return LoginError.fromCode(5115, extraMessage);
  }
  static mfaAlreadyEnabled(extraMessage = "") {
    return LoginError.fromCode(5116, extraMessage);
  }
  static mfaNotEnabled(extraMessage = "") {
    return LoginError.fromCode(5117, extraMessage);
  }
}
_defineProperty(LoginError, "messages", {
  5000: "Custom",
  5111: "Invalid login params",
  5112: "User not logged in.",
  5113: "login popup has been closed by the user",
  5114: "Login failed",
  5115: "Popup was blocked. Please call this function as soon as user clicks button or use redirect mode",
  5116: "MFA already enabled",
  5117: "MFA not yet enabled. Please call `enableMFA` first"
});

exports.AuthError = AuthError;
exports.InitializationError = InitializationError;
exports.LoginError = LoginError;
