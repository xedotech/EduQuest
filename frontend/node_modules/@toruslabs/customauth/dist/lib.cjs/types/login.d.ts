import { type INodeDetails, TORUS_NETWORK_TYPE } from "@toruslabs/constants";
import { NodeDetailManager } from "@toruslabs/fetch-node-details";
import { type KeyType, Torus, TorusKey } from "@toruslabs/torus.js";
import SentryHandler from "./sentry";
import { UX_MODE_TYPE } from "./utils/enums";
import { CustomAuthArgs, CustomAuthLoginParams, ExtraParams, InitParams, LoginDetails, RedirectResult, RedirectResultParams, TorusLoginResponse } from "./utils/interfaces";
import { StorageHelper } from "./utils/StorageHelper";
export declare class CustomAuth {
    isInitialized: boolean;
    config: {
        baseUrl: string;
        redirectToOpener: boolean;
        redirect_uri: string;
        uxMode: UX_MODE_TYPE;
        locationReplaceOnRedirect: boolean;
        popupFeatures: string;
        useDkg?: boolean;
        web3AuthClientId: string;
        web3AuthNetwork: TORUS_NETWORK_TYPE;
        keyType: KeyType;
        nodeDetails: INodeDetails;
        checkCommitment: boolean;
    };
    torus: Torus;
    nodeDetailManager: NodeDetailManager;
    storageHelper: StorageHelper<LoginDetails>;
    sentryHandler: SentryHandler;
    constructor({ baseUrl, network, enableLogging, redirectToOpener, redirectPathName, apiKey, uxMode, locationReplaceOnRedirect, popupFeatures, storageServerUrl, sentry, enableOneKey, web3AuthClientId, useDkg, metadataUrl, keyType, serverTimeOffset, nodeDetails, checkCommitment, }: CustomAuthArgs);
    init({ skipSw, skipInit, skipPrefetch }?: InitParams): Promise<void>;
    triggerLogin(args: CustomAuthLoginParams): Promise<TorusLoginResponse>;
    getTorusKey(params: {
        authConnectionId: string;
        userId: string;
        idToken: string;
        additionalParams?: ExtraParams;
        groupedAuthConnectionId?: string;
    }): Promise<TorusKey>;
    getRedirectResult({ replaceUrl, clearLoginDetails, storageData, }?: RedirectResultParams): Promise<RedirectResult>;
    private handlePrefetchRedirectUri;
}
