import { AUTH_CONNECTION_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from "./enums";
import { Auth0UserInfo, TorusGenericObject } from "./interfaces";
interface CustomMessageEvent extends MessageEvent {
    error: string;
}
interface EventListener {
    (evt: CustomMessageEvent): void;
}
type EmitterType = {
    addEventListener(type: string, handler: EventListener): void;
    removeEventListener(type: string, handler: EventListener): void;
};
export declare function eventToPromise<T>(emitter: EmitterType): Promise<T>;
export declare const loginToConnectionMap: Record<string, string>;
export declare const padUrlString: (url: URL) => string;
/**
 * Returns a random number. Don't use for cryptographic purposes.
 * @returns a random number
 */
export declare const randomId: () => string;
export declare const broadcastChannelOptions: {
    webWorkerSupport: boolean;
};
export declare const getUserId: (userInfo: Auth0UserInfo, authConnection: AUTH_CONNECTION_TYPE, userIdField?: string, isUserIdCaseSensitive?: boolean) => string;
export declare const handleRedirectParameters: (hash: string, queryParameters: TorusGenericObject) => {
    error: string;
    instanceParameters: TorusGenericObject;
    hashParameters: TorusGenericObject;
};
export declare function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean;
export declare function getPopupFeatures(): string;
export declare const isFirefox: () => boolean;
export declare function constructURL(params: {
    baseURL: string;
    query?: Record<string, unknown>;
    hash?: Record<string, unknown>;
}): string;
export declare const validateAndConstructUrl: (domain: string) => URL;
export declare const objectToAuthDataMap: (tgAuthenticationResult: string) => {
    first_name: string;
    last_name: string;
    photo_url: string;
    username: string;
    id: number;
};
export declare function isMobileOrTablet(): boolean;
export declare function getTimeout(authConnection: AUTH_CONNECTION_TYPE): number;
export declare function decodeToken<T>(token: string): {
    header: {
        alg: string;
        typ: string;
        kid?: string;
    };
    payload: T;
};
export {};
