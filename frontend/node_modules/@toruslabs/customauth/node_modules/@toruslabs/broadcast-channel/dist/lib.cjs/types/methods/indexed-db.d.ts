/**
 * this method uses indexeddb to store the messages
 * There is currently no observerAPI for idb
 * @link https://github.com/w3c/IndexedDB/issues/51
 *
 * When working on this, ensure to use these performance optimizations:
 * @link https://rxdb.info/slow-indexeddb.html
 */
import { microSeconds as micro } from "../util";
export declare const microSeconds: typeof micro;
import { ObliviousSet } from "oblivious-set";
import { MessageObject, Options } from "../types";
/**
 * Use relaxed durability for faster performance on all transactions.
 * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/
 */
export declare const TRANSACTION_SETTINGS: IDBTransactionOptions;
export declare const type = "idb";
export declare function getIdb(): IDBFactory | false;
/**
 * If possible, we should explicitly commit IndexedDB transactions
 * for better performance.
 * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/
 */
export declare function commitIndexedDBTransaction(tx: IDBTransaction): void;
interface Message {
    id: number;
    uuid: string;
    time: number;
    data: MessageObject;
}
export declare function createDatabase(channelName: string): Promise<IDBDatabase>;
/**
 * writes the new message to the database
 * so other readers can find it
 */
export declare function writeMessage(db: IDBDatabase, readerUuid: string, messageJson: MessageObject): Promise<void>;
export declare function getAllMessages(db: IDBDatabase): Promise<Message[]>;
export declare function getMessagesHigherThan(db: IDBDatabase, lastCursorId: number): Promise<Message[]>;
export declare function removeMessagesById(db: IDBDatabase, ids: number[]): Promise<void[]>;
export declare function getOldMessages(db: IDBDatabase, ttl: number): Promise<Message[]>;
export declare function cleanOldMessages(db: IDBDatabase, ttl: number): Promise<void[]>;
interface ChannelState {
    closed: boolean;
    lastCursorId: number;
    channelName: string;
    options: Options;
    uuid: string;
    eMIs: ObliviousSet;
    writeBlockPromise: Promise<void>;
    messagesCallback: ((data: MessageObject) => void) | null;
    messagesCallbackTime?: number;
    readQueuePromises: Promise<unknown>[];
    db: IDBDatabase;
    time: number;
}
export declare function create(channelName: string, options: Options): Promise<ChannelState>;
export declare function close(channelState: ChannelState): void;
export declare function postMessage(channelState: ChannelState, messageJson: MessageObject): Promise<void>;
export declare function onMessage(channelState: ChannelState, fn: (data: MessageObject) => void, time: number): void;
export declare function canBeUsed(): boolean;
export declare function averageResponseTime(options: Options): number;
export {};
