import { JRPCRequest, Json } from "@web3auth/auth";
import { BaseControllerEvents } from "../interfaces";
import { MESSAGE_EVENTS, MessageStatus } from "./constants";
export interface BaseRequestParams {
    /**
     * Unique id for each request
     */
    id?: string;
    /**
     * Address to send this transaction from.
     */
    from: string;
    /**
     * Domain requested from
     */
    origin?: string;
}
export type MessageStatusType = (typeof MessageStatus)[keyof typeof MessageStatus];
export interface AbstractMessage<rawSigT> {
    id: string;
    time: number;
    status: MessageStatusType;
    /**
     * JRPC method for which sig request is made
     */
    type: string;
    rawSig?: rawSigT;
    metadata?: Json;
    error?: string;
}
export interface MessageParams extends BaseRequestParams {
    data: string;
}
export interface Message<T> extends AbstractMessage<T> {
    messageParams: MessageParams;
}
export interface UserRequestApprovalParams {
    windowId?: string;
    origin?: string;
}
export interface IMessageController<M extends Message<unknown>> {
    getMessage(messageId: string): M | undefined;
    getAllMessages(): M[];
    setMetadata(messageId: string, metadata: Json): void;
    getUnapprovedMessages(): Record<string, M>;
    setMessageStatus(messageId: string, status: MessageStatusType): void;
    getMessageStatus(messageId: string): MessageStatusType;
    processSignMessage(messageId: string): Promise<Uint8Array>;
    addNewUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<Uint8Array>;
}
export interface AbstractMessageControllerEvents<S, M> extends BaseControllerEvents<S> {
    [event: `${string}:${MessageStatusType}`]: (message: M) => void;
    [event: `${string}:finished`]: (message: M) => void;
    [MESSAGE_EVENTS.UNAPPROVED_MESSAGE]: (args: {
        messageData: M;
        req: JRPCRequest<unknown> & UserRequestApprovalParams;
    }) => void;
}
