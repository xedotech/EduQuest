import { JRPCRequest, Json } from "@web3auth/auth";
import { BaseController } from "../BaseController";
import { BaseConfig, BaseState } from "../interfaces";
import { AbstractMessage, AbstractMessageControllerEvents, BaseRequestParams, MessageStatusType, UserRequestApprovalParams } from "./IMessageController";
export interface MessageControllerState<M extends AbstractMessage<unknown>> extends BaseState {
    unapprovedMessages: Record<string, M>;
    unapprovedMessagesCount: number;
}
export declare abstract class AbstractMessageController<M extends AbstractMessage<unknown>, P extends BaseRequestParams> extends BaseController<BaseConfig, MessageControllerState<M>, AbstractMessageControllerEvents<MessageControllerState<M>, M>> {
    protected messages: M[];
    /**
     * Controller in charge of managing - storing, adding, removing, updating - Messages.
     *
     */
    constructor({ config, state }: {
        config?: Partial<BaseConfig>;
        state?: Partial<MessageControllerState<M>>;
    });
    getMessage(messageId: string): M;
    getAllMessages(): M[];
    setMetadata(messageId: string, metadata: Json): void;
    getUnapprovedMessages(): {
        [key: string]: M;
    };
    addMessage(message: M): Promise<void>;
    approveMessage(messageId: string, messageParams: P): Promise<P>;
    setMessageStatus(messageId: string, status: MessageStatusType): void;
    waitForFinishStatus(msgParams: P, messageName: string): Promise<M["rawSig"]>;
    protected updateMessage(message: M): void;
    protected saveMessageList(): void;
    abstract prepMessageForSigning(messageParams: P): Promise<P>;
    abstract addUnapprovedMessage(messageParams: P, request: JRPCRequest<P> & UserRequestApprovalParams): Promise<string>;
}
