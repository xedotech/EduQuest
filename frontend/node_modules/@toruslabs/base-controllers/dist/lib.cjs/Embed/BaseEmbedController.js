'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var auth = require('@web3auth/auth');
var BaseController = require('../BaseController.js');
var createSwappableProxy = require('../createSwappableProxy.js');
var CommunicationMethodMiddleware = require('./CommunicationMethodMiddleware.js');

class BaseEmbedController extends BaseController.BaseController {
  constructor({
    config = {},
    state
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "_communicationProviderProxy", void 0);
    this.defaultState = {
      isIFrameFullScreen: true,
      oauthModalVisibility: false,
      loginInProgress: false,
      dappMetadata: {
        name: "",
        icon: ""
      },
      web3AuthClientId: "",
      web3AuthNetwork: "mainnet",
      whiteLabel: null,
      confirmationStrategy: "popup"
    };
    this.initialize();
  }

  /**
   * Called by orchestrator once while initializing the class
   * @param handlers - JRPC handlers for provider
   * @returns - provider - Returns the providerProxy
   */
  initializeProvider(handlers) {
    const engine = new auth.JRPCEngine();
    const communicationMiddleware = CommunicationMethodMiddleware.createCommunicationMiddleware(handlers);
    engine.push(communicationMiddleware);
    const communicationProvider = auth.providerFromEngine(engine);
    this.setCommunicationProvider(communicationProvider);
  }
  setCommunicationProvider(communicationProvider) {
    if (this._communicationProviderProxy) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this._communicationProviderProxy.setTarget(communicationProvider);
    } else {
      this._communicationProviderProxy = createSwappableProxy.createSwappableProxy(communicationProvider);
    }
  }
}

exports.BaseEmbedController = BaseEmbedController;
