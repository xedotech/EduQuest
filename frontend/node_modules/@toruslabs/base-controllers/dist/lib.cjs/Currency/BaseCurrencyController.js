'use strict';

var BaseController = require('../BaseController.js');

// every ten minutes
const POLLING_INTERVAL = 600000;
class BaseCurrencyController extends BaseController.BaseController {
  constructor({
    config = {},
    state
  }) {
    super({
      config,
      state
    });
    this.defaultState = {
      currentCurrency: "usd",
      conversionRate: 0,
      conversionDate: "N/A",
      nativeCurrency: "ETH"
    };
    this.defaultConfig = {
      pollInterval: POLLING_INTERVAL
    };
    this.initialize();
  }

  //
  // PUBLIC METHODS
  //

  getNativeCurrency() {
    return this.state.nativeCurrency;
  }
  setNativeCurrency(nativeCurrency) {
    this.update({
      nativeCurrency,
      ticker: nativeCurrency
    });
  }
  getCurrentCurrency() {
    return this.state.currentCurrency;
  }
  setCurrentCurrency(currentCurrency) {
    this.update({
      currentCurrency
    });
  }

  /**
   * A getter for the conversionRate property
   *
   * @returns The conversion rate from ETH to the selected currency.
   *
   */
  getConversionRate() {
    return this.state.conversionRate;
  }
  setConversionRate(conversionRate) {
    this.update({
      conversionRate
    });
  }

  /**
   * A getter for the conversionDate property
   *
   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of
   * January 1, 1970
   *
   */
  getConversionDate() {
    return this.state.conversionDate;
  }
  setConversionDate(conversionDate) {
    this.update({
      conversionDate
    });
  }
}

exports.BaseCurrencyController = BaseCurrencyController;
