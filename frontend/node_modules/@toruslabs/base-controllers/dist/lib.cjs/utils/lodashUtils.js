'use strict';

function omitBy(object, predicate) {
  // Create a new object to store the results
  const result = {};

  // Iterate over all own properties of the object
  for (const [key, value] of Object.entries(object)) {
    if (!predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}
function pickBy(object, predicate) {
  // Create a new object to store the results
  const result = {};
  for (const [key, value] of Object.entries(object)) {
    if (predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}
function cloneDeep(object) {
  try {
    return structuredClone(object);
  } catch (error) {
    return JSON.parse(JSON.stringify(object, (_, v) => typeof v === "bigint" ? v.toString() : v));
  }
}

exports.cloneDeep = cloneDeep;
exports.omitBy = omitBy;
exports.pickBy = pickBy;
