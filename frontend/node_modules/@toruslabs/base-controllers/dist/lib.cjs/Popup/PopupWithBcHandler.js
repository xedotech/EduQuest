'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var broadcastChannel = require('@toruslabs/broadcast-channel');
var log = require('loglevel');
var enums = require('../enums.js');
var PopupHandler = require('./PopupHandler.js');
var utils = require('../utils/utils.js');

/**
 * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.
 */
class PopupWithBcHandler extends PopupHandler.PopupHandler {
  constructor({
    config,
    state,
    channelPrefix
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "channelPrefix", void 0);
    this.channelPrefix = channelPrefix;
  }

  /**
   * Receives the data from popup window and closes the window
   * @param successExtraFn - Extra function to be called after the data is received
   * @returns The data to be received
   */
  handle(successExtraFn) {
    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;
    const bc = new broadcastChannel.BroadcastChannel(channelName, utils.broadcastChannelOptions);
    return new Promise((resolve, reject) => {
      const closeListener = () => {
        bc.close();
        reject(new utils.UserError("user closed popup"));
        this.removeListener("close", closeListener);
      };
      this.on("close", closeListener);
      bc.addEventListener("message", async ev => {
        log.info(ev, `receiving data on channel: ${bc.name}`);
        try {
          const {
            error,
            data
          } = ev;
          if (error) {
            reject(new Error(error));
            return;
          }
          if (successExtraFn) await successExtraFn.call(this, data);
          resolve(data);
        } catch (error) {
          reject(error);
        } finally {
          bc.close();
          this.close();
        }
      });
      this.open().then(() => {
        log.info(`opened window ${bc.name}`);
        // Opened window. yay.  let the bc events do their job
        return undefined;
      }).catch(err => {
        log.error(err, "something went wrong while opening window");
        reject(err);
      });
    });
  }

  /**
   * Use this if we have to send large payloads which don't fit in query/hash params.
   * Waits for ack that popup window is ready to receive data.
   * Receives the data from popup window and closes the window
   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data
   * @param successExtraFn - Extra function to be called after the data is received
   * @returns The data to be received
   */
  handleWithHandshake(payload, successExtraFn) {
    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;
    const bc = new broadcastChannel.BroadcastChannel(channelName, utils.broadcastChannelOptions);
    return new Promise((resolve, reject) => {
      const closeListener = () => {
        bc.close();
        reject(new utils.UserError("user closed popup"));
        this.removeListener("close", closeListener);
      };
      this.on("close", closeListener);
      bc.addEventListener("message", async ev => {
        try {
          log.info(ev, `receiving data on channel: ${bc.name}`);
          const {
            error,
            data
          } = ev;
          if (error) {
            reject(new Error(error));
            return;
          }
          // Do handshake
          const {
            type = ""
          } = data;
          if (type === enums.POPUP_LOADED) {
            // Hack with generic to use the same type for both send and receive
            await bc.postMessage({
              data: payload
            });
          } else if (type === enums.POPUP_RESULT) {
            if (successExtraFn) await successExtraFn.call(this, data);
            resolve(data);
            // Must only close the bc after result is done
            bc.close();
            this.close();
          }
        } catch (error) {
          reject(error);
          bc.close();
          this.close();
        }
      });
      this.open().then(() => {
        log.info(`opened window ${bc.name}`);
        // Opened window. yay.  let the bc events do their job
        return undefined;
      }).catch(err => {
        log.error(err, "something went wrong while opening window");
        reject(err);
      });
    });
  }
}

exports.PopupWithBcHandler = PopupWithBcHandler;
