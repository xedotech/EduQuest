'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var broadcastChannel = require('@toruslabs/broadcast-channel');
var log = require('loglevel');
var enums = require('../enums.js');
var utils = require('../utils/utils.js');

class RedirectHandler {
  // private hashParameters: Record<string, string>;

  constructor(instanceId) {
    // private error: string;
    // this is sessionid post login
    _defineProperty(this, "instanceId", void 0);
    _defineProperty(this, "finalQueryParams", {});
    _defineProperty(this, "instanceParameters", void 0);
    const {
      hash
    } = window.location;
    const queryParameters = new URLSearchParams(window.location.search);
    queryParameters.forEach((value, key) => {
      this.finalQueryParams[key] = value;
    });
    const {
      instanceParameters
    } = utils.handleRedirectParameters(hash, this.finalQueryParams);
    // this.error = error;
    this.instanceParameters = instanceParameters;
    // this.hashParameters = hashParameters;
    this.instanceId = instanceId;
  }
  async handle() {
    return new Promise((resolve, reject) => {
      const {
        finalQueryParams,
        instanceParameters
      } = this;
      let bc;
      try {
        // used for login case. there's no windowId here
        // if (!finalQueryParams.windowId) {
        //   bc = new BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);
        //   bc.addEventListener("message", async (ev) => {
        //     if (ev.error) {
        //       reject(ev.error);
        //       window.close();
        //     } else {
        //       resolve();
        //       bc.close();
        //       log.info("posted", { finalQueryParams, hashParameters, instanceParameters });
        //     }
        //   });
        //   bc.postMessage({
        //     data: {
        //       instanceParams: instanceParameters,
        //       hashParams: hashParameters,
        //       queryParams: finalQueryParams,
        //     },
        //     error,
        //   });

        //   setTimeout(() => {
        //     resolve();
        //     window.location.href = window.location.origin + window.location.search + window.location.hash;
        //   }, 5000);
        // } else {
        const channelName = `${enums.BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.instanceId || instanceParameters.instanceId}_${finalQueryParams.windowId || instanceParameters.windowId}`;
        bc = new broadcastChannel.BroadcastChannel(channelName, utils.broadcastChannelOptions);
        bc.addEventListener("message", async ev => {
          const {
            url,
            message
          } = ev.data;
          if (url) {
            resolve();
            window.location.href = url;
          } else if (message === enums.SETUP_COMPLETE) {
            await bc.postMessage({
              data: {
                windowId: finalQueryParams.windowId,
                message: enums.POPUP_LOADED
              }
            });
          }
          if (ev.error && ev.error !== "") {
            log.error(ev.error);
            resolve();
            bc.close();
          }
        });
        // }
      } catch (err) {
        log.info(err, "something went wrong");
        reject(err);
        if (bc) bc.close();
        window.close();
      }
    });
  }
}

exports.RedirectHandler = RedirectHandler;
