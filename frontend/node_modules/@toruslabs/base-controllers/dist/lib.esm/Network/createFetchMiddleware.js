import { createAsyncMiddleware, rpcErrors } from '@web3auth/auth';

const RETRIABLE_ERRORS = [
// ignore server overload errors
"Gateway timeout", "ETIMEDOUT",
// ignore server sent html error pages
// or truncated json responses
"failed to parse response body",
// ignore errors where http req failed to establish
"Failed to fetch"];
function checkForHttpErrors(fetchRes) {
  // check for errors
  switch (fetchRes.status) {
    case 405:
      throw rpcErrors.methodNotFound();
    case 418:
      throw rpcErrors.internal({
        message: `Request is being rate limited.`,
        data: {
          cause: fetchRes
        }
      });
    case 503:
    case 504:
      throw rpcErrors.internal({
        message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`,
        data: {
          cause: fetchRes
        }
      });
  }
}
function timeout(duration) {
  return new Promise(resolve => {
    setTimeout(resolve, duration);
  });
}
function parseResponse(fetchRes, body) {
  // check for error code
  if (fetchRes.status !== 200) {
    throw rpcErrors.internal({
      message: `Non-200 status code: '${fetchRes.status}'`,
      data: body
    });
  }
  // check for rpc error
  if (body.error) {
    var _body$error;
    throw rpcErrors.internal({
      data: body.error,
      message: (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message
    });
  }
  // return successful result
  return body.result;
}
function createFetchConfigFromReq({
  req,
  rpcTarget,
  originHttpHeaderKey
}) {
  const parsedUrl = new URL(rpcTarget);

  // prepare payload
  // copy only canonical json rpc properties
  const payload = {
    id: req.id,
    jsonrpc: req.jsonrpc,
    method: req.method,
    params: req.params
  };

  // extract 'origin' parameter from request
  const originDomain = req.origin;

  // serialize request body
  const serializedPayload = JSON.stringify(payload);

  // configure fetch params
  const fetchParams = {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    body: serializedPayload
  };

  // optional: add request origin as header
  if (originHttpHeaderKey && originDomain) {
    fetchParams.headers[originHttpHeaderKey] = originDomain;
  }
  return {
    fetchUrl: parsedUrl.href,
    fetchParams
  };
}
function createFetchMiddleware({
  rpcTarget,
  originHttpHeaderKey
}) {
  return createAsyncMiddleware(async (req, res, _next) => {
    const {
      fetchUrl,
      fetchParams
    } = createFetchConfigFromReq({
      req,
      rpcTarget,
      originHttpHeaderKey
    });

    // attempt request multiple times
    const maxAttempts = 5;
    const retryInterval = 1000;
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const fetchRes = await fetch(fetchUrl, fetchParams);
        // check for http errrors
        checkForHttpErrors(fetchRes);
        // parse response body
        const fetchBody = await fetchRes.json();
        const result = parseResponse(fetchRes, fetchBody);
        // set result and exit retry loop
        res.result = result;
        return;
      } catch (err) {
        const errMsg = (err.message || err).toString();
        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase));
        // re-throw error if not retriable
        if (!isRetriable) {
          throw err;
        }
      }
      // delay before retrying
      await timeout(retryInterval);
    }
  });
}

export { createFetchConfigFromReq, createFetchMiddleware };
