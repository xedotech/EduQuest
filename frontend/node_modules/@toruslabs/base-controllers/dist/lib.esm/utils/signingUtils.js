import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { post } from '@toruslabs/http-helpers';
import log from 'loglevel';

const authServer = "https://authjs.web3auth.io";
const signChallenge = async (payload, chainNamespace) => {
  const t = chainNamespace === "solana" ? "sip99" : "eip191";
  const header = {
    t
  };
  const network = chainNamespace === "solana" ? "solana" : "ethereum";
  const data = {
    payload,
    header,
    network
  };
  const res = await post(`${authServer}/siww/get`, data);
  if (!res.success) {
    throw new Error("Failed to authenticate user, Please reach out to Web3Auth Support team");
  }
  return res.challenge;
};
const verifySignedChallenge = async (chainNamespace, signedMessage, challenge, issuer, sessionTime, clientId, web3AuthNetwork, audience, additionalMetadata) => {
  var _window$location;
  const t = chainNamespace === "solana" ? "sip99" : "eip191";
  const sigData = _objectSpread({
    signature: {
      s: signedMessage,
      t
    },
    message: challenge,
    issuer,
    audience: audience || (typeof window !== "undefined" ? ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || "com://reactnative" : "com://reactnative"),
    timeout: sessionTime
  }, additionalMetadata || {});
  const idTokenRes = await post(`${authServer}/siww/verify`, sigData, {
    headers: {
      client_id: clientId,
      wallet_provider: issuer,
      web3auth_network: web3AuthNetwork
    }
  });
  if (!idTokenRes.success) {
    log.error("Failed to authenticate user, ,message verification failed", idTokenRes.error);
    throw new Error("Failed to authenticate user, ,message verification failed");
  }
  return idTokenRes.token;
};

export { authServer, signChallenge, verifySignedChallenge };
