'use strict';

var events = require('events');

const DEFAULT_IDLE_TIME = 60 * 3;
let tracker;
const idleTimeTracker = activityThresholdTime => {
  let isIdle = false;
  let idleTimeout = null;
  const emitter = new events.EventEmitter();
  const markIdle = () => {
    // should not emit idle if already idle.
    if (!isIdle) {
      isIdle = true;
      emitter.emit("idle");
    }
  };
  const markActive = () => {
    // should not emit active if idle.
    if (isIdle) {
      isIdle = false;
      emitter.emit("active");
    }
  };
  const resetTimer = () => {
    if (idleTimeout) {
      window.clearTimeout(idleTimeout);
    }
    if (isIdle) {
      markActive();
    }
    idleTimeout = window.setTimeout(() => {
      markIdle();
      window.clearTimeout(idleTimeout);
    }, activityThresholdTime * 1000);
  };
  if (typeof window !== "undefined" && typeof document !== "undefined") {
    // setup the timer immediately.
    resetTimer();
    window.addEventListener("load", resetTimer);
    document.addEventListener("mousemove", resetTimer);
    document.addEventListener("keydown", resetTimer);
    // cleanup on beforeunload.
    window.addEventListener("beforeunload", cleanup);
  }
  function checkIfIdle() {
    return isIdle;
  }
  function cleanup() {
    if (typeof window !== "undefined" && typeof document !== "undefined") {
      if (idleTimeout) {
        window.clearTimeout(idleTimeout);
      }
      window.removeEventListener("load", resetTimer);
      document.removeEventListener("mousemove", resetTimer);
      document.removeEventListener("keydown", resetTimer);
      window.removeEventListener("beforeunload", cleanup);
    }
    emitter.removeAllListeners();
  }
  return {
    checkIfIdle,
    cleanup,
    markIdle,
    markActive,
    on: (event, listener) => {
      emitter.on(event, listener);
    },
    off: (event, listener) => {
      emitter.off(event, listener);
    }
  };
};
const createIdleTimeTracker = (activityThresholdTime = DEFAULT_IDLE_TIME) => {
  if (!tracker) {
    tracker = idleTimeTracker(activityThresholdTime);
  }
  return tracker;
};

exports.DEFAULT_IDLE_TIME = DEFAULT_IDLE_TIME;
exports.createIdleTimeTracker = createIdleTimeTracker;
