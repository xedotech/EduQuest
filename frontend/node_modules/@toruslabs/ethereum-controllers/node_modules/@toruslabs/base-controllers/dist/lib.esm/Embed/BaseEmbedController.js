import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { JRPCEngine, providerFromEngine } from '@web3auth/auth';
import { BaseController } from '../BaseController.js';
import { createSwappableProxy } from '../createSwappableProxy.js';
import { createCommunicationMiddleware } from './CommunicationMethodMiddleware.js';

class BaseEmbedController extends BaseController {
  constructor({
    config = {},
    state
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "_communicationProviderProxy", void 0);
    this.defaultState = {
      isIFrameFullScreen: true,
      oauthModalVisibility: false,
      loginInProgress: false,
      dappMetadata: {
        name: "",
        icon: ""
      },
      web3AuthClientId: "",
      web3AuthNetwork: "mainnet",
      whiteLabel: null,
      confirmationStrategy: "popup"
    };
    this.initialize();
  }

  /**
   * Called by orchestrator once while initializing the class
   * @param handlers - JRPC handlers for provider
   * @returns - provider - Returns the providerProxy
   */
  initializeProvider(handlers) {
    const engine = new JRPCEngine();
    const communicationMiddleware = createCommunicationMiddleware(handlers);
    engine.push(communicationMiddleware);
    const communicationProvider = providerFromEngine(engine);
    this.setCommunicationProvider(communicationProvider);
  }
  setCommunicationProvider(communicationProvider) {
    if (this._communicationProviderProxy) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this._communicationProviderProxy.setTarget(communicationProvider);
    } else {
      this._communicationProviderProxy = createSwappableProxy(communicationProvider);
    }
  }
}

export { BaseEmbedController };
