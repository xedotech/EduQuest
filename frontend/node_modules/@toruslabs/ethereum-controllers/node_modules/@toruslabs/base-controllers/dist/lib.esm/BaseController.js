import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { SafeEventEmitter } from '@web3auth/auth';

/**
 * Controller class that provides configuration, state management, and subscriptions
 */
class BaseController extends SafeEventEmitter {
  /**
   * Creates a BaseController instance. Both initial state and initial
   * configuration options are merged with defaults upon initialization.
   *
   * @param config - Initial options used to configure this controller
   * @param state - Initial state to set on this controller
   */
  constructor({
    config = {},
    state = {}
  }) {
    super();
    // Use assign since generics can't be spread: https://git.io/vpRhY
    /**
     * Default options used to configure this controller
     */
    _defineProperty(this, "defaultConfig", {});
    /**
     * Default state set on this controller
     */
    _defineProperty(this, "defaultState", {});
    /**
     * Determines if listeners are notified of state changes
     */
    _defineProperty(this, "disabled", false);
    /**
     * Name of this controller used during composition
     */
    _defineProperty(this, "name", "BaseController");
    _defineProperty(this, "initialConfig", void 0);
    _defineProperty(this, "initialState", void 0);
    _defineProperty(this, "internalConfig", this.defaultConfig);
    _defineProperty(this, "internalState", this.defaultState);
    this.initialState = state;
    this.initialConfig = config;
  }

  /**
   * Retrieves current controller configuration options
   *
   * @returns - Current configuration
   */
  get config() {
    return this.internalConfig;
  }

  /**
   * Retrieves current controller state
   *
   * @returns - Current state
   */
  get state() {
    return this.internalState;
  }

  /**
   * Updates controller configuration
   *
   * @param config - New configuration options
   * @param overwrite - Overwrite config instead of merging
   * @param fullUpdate - Boolean that defines if the update is partial or not
   */
  configure(config, overwrite = false, fullUpdate = true) {
    if (fullUpdate) {
      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);
      for (const key in this.internalConfig) {
        if (typeof this.internalConfig[key] !== "undefined") {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = this.internalConfig[key];
        }
      }
    } else {
      for (const key in config) {
        /* istanbul ignore else */
        if (typeof this.internalConfig[key] !== "undefined") {
          this.internalConfig[key] = config[key];
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = config[key];
        }
      }
    }
  }

  /**
   * Updates controller state
   *
   * @param state - New state
   * @param overwrite - Overwrite state instead of merging
   */
  update(state, overwrite = false) {
    this.internalState = overwrite ? _objectSpread({}, state) : _objectSpread(_objectSpread({}, this.internalState), state);
    this.emit("store", this.internalState);
  }

  /**
   * Enables the controller. This sets each config option as a member
   * variable on this instance and triggers any defined setters. This
   * also sets initial state and triggers any listeners.
   *
   * @returns - This controller instance
   */
  initialize() {
    this.internalState = this.defaultState;
    this.internalConfig = this.defaultConfig;
    this.configure(this.initialConfig);
    this.update(this.initialState);
    return this;
  }
}

export { BaseController };
