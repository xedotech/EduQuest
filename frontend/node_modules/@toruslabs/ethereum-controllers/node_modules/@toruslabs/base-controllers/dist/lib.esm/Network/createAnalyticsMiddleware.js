import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { ANALYTICS_TRACKED_INTERNAL_JPRC_METHODS, ANALYTICS_EVENTS, ANALYTICS_JRPC_REQUEST_TYPES } from './constants.js';
import { getHostname, getCaipChainId, getErrorAnalyticsProperties } from '../utils/utils.js';

function createAnalyticsMiddleware({
  analytics,
  providerConfig
}) {
  return (request, response, next) => {
    // skip if the request method is not in the ANALYTICS_TRACKED_JPRC_METHODS
    if (!Object.values(ANALYTICS_TRACKED_INTERNAL_JPRC_METHODS).includes(request.method)) {
      return next();
    }
    const startTime = Date.now();
    next(callback => {
      const trackData = {
        method: request.method,
        chain_id: getCaipChainId(providerConfig),
        chain_rpc_target: getHostname(providerConfig.rpcTarget),
        is_aa_provider_request: request.isAAProviderRequest
      };
      if (response.error) {
        analytics === null || analytics === void 0 || analytics.track(ANALYTICS_EVENTS.JRPC_REQUEST_FAILED, _objectSpread(_objectSpread(_objectSpread({
          request_type: ANALYTICS_JRPC_REQUEST_TYPES.INTERNAL
        }, trackData), getErrorAnalyticsProperties(response.error)), {}, {
          duration: Date.now() - startTime
        }));
      } else {
        analytics === null || analytics === void 0 || analytics.track(ANALYTICS_EVENTS.JRPC_REQUEST_COMPLETED, _objectSpread(_objectSpread({
          request_type: ANALYTICS_JRPC_REQUEST_TYPES.INTERNAL
        }, trackData), {}, {
          duration: Date.now() - startTime
        }));
      }
      callback();
    });
  };
}

export { createAnalyticsMiddleware };
