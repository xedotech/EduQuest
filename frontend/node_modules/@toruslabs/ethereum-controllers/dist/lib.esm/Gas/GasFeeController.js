import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isHexString, addHexPrefix } from '@ethereumjs/util';
import { BaseController, PollingManager, cloneDeep } from '@toruslabs/base-controllers';
import log from 'loglevel';
import { GAS_ESTIMATE_TYPES } from '../utils/constants.js';
import { fetchGasEstimates, fetchEthGasPriceEstimate, fetchLegacyGasPriceEstimates, fetchGasEstimatesViaEthFeeHistory, calculateTimeEstimate } from './gasUtil.js';

const GAS_FEE_API = "https://mock-gas-server.herokuapp.com/";
const LEGACY_GAS_PRICES_API_URL = "https://api.metaswap.codefi.network/gasPrices";
/**
 * Returns gas prices in dec gwei
 */
class GasFeeController extends BaseController {
  constructor({
    config,
    state,
    idleTimeTracker,
    getNetworkIdentifier,
    getProvider,
    fetchGasEstimates: fetchGasEstimates$1 = fetchGasEstimates,
    fetchEthGasPriceEstimate: fetchEthGasPriceEstimate$1 = fetchEthGasPriceEstimate,
    fetchLegacyGasPriceEstimates: fetchLegacyGasPriceEstimates$1 = fetchLegacyGasPriceEstimates,
    fetchGasEstimatesViaEthFeeHistory: fetchGasEstimatesViaEthFeeHistory$1 = fetchGasEstimatesViaEthFeeHistory,
    getCurrentNetworkLegacyGasAPICompatibility,
    getCurrentNetworkEIP1559Compatibility,
    getCurrentAccountEIP1559Compatibility,
    onNetworkStateChange
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "name", "GasFeeController");
    // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints
    _defineProperty(this, "API_SUPPORTED_CHAINIDS", new Set(["0x1", "0x5", "0xa4b1", "0xa86a", "0x2105", "0x38", "0xfa", "0xa", "0x89"]));
    _defineProperty(this, "provider", void 0);
    _defineProperty(this, "currentChainId", void 0);
    _defineProperty(this, "getNetworkIdentifier", void 0);
    _defineProperty(this, "getProvider", void 0);
    _defineProperty(this, "fetchGasEstimates", void 0);
    _defineProperty(this, "fetchGasEstimatesViaEthFeeHistory", void 0);
    _defineProperty(this, "fetchEthGasPriceEstimate", void 0);
    _defineProperty(this, "fetchLegacyGasPriceEstimates", void 0);
    _defineProperty(this, "getCurrentNetworkEIP1559Compatibility", void 0);
    _defineProperty(this, "getCurrentAccountEIP1559Compatibility", void 0);
    _defineProperty(this, "getCurrentNetworkLegacyGasAPICompatibility", void 0);
    _defineProperty(this, "pollingManager", void 0);
    this.getNetworkIdentifier = getNetworkIdentifier;
    this.getProvider = getProvider;
    this.fetchGasEstimates = fetchGasEstimates$1;
    this.fetchEthGasPriceEstimate = fetchEthGasPriceEstimate$1;
    this.fetchLegacyGasPriceEstimates = fetchLegacyGasPriceEstimates$1;
    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;
    this.getCurrentNetworkLegacyGasAPICompatibility = getCurrentNetworkLegacyGasAPICompatibility;
    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility;
    this.fetchGasEstimatesViaEthFeeHistory = fetchGasEstimatesViaEthFeeHistory$1;
    this.defaultConfig = {
      interval: 30000,
      legacyAPIEndpoint: LEGACY_GAS_PRICES_API_URL,
      EIP1559APIEndpoint: GAS_FEE_API
    };
    this.defaultState = {
      gasFeeEstimates: {},
      estimatedGasFeeTimeBounds: {},
      gasEstimateType: GAS_ESTIMATE_TYPES.NONE
    };
    // Initialize.
    this.currentChainId = this.getNetworkIdentifier();
    this.provider = this.getProvider();
    this.initialize();
    onNetworkStateChange(() => {
      this.onNetworkStateChange();
    });
    this.pollingManager = new PollingManager(idleTimeTracker, this.config.interval);
  }
  async onNetworkStateChange() {
    this.provider = this.getProvider();
    const newChainId = this.getNetworkIdentifier();
    if (this.currentChainId !== newChainId) {
      this.currentChainId = newChainId;
      await this.fetchGasFeeEstimates();
    }
  }
  async resetPolling() {
    this.stopPolling();
    await this.getGasFeeEstimatesAndStartPolling();
  }
  async fetchGasFeeEstimates() {
    return this._fetchGasFeeEstimateData();
  }
  async getGasFeeEstimatesAndStartPolling() {
    await this._fetchGasFeeEstimateData();
    this._startPolling();
  }
  disconnectPoller() {
    this.stopPolling();
  }

  /**
   * Prepare to discard this controller.
   *
   * This stops any active polling.
   */
  destroy() {
    this.stopPolling();
  }
  stopPolling() {
    this.resetState();
  }

  /**
   * Gets and sets gasFeeEstimates in state
   *
   * @returns GasFeeEstimates
   */
  async _fetchGasFeeEstimateData() {
    let isEIP1559Compatible;
    const isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility();
    const chainId = this.getNetworkIdentifier();
    if (chainId === "loading") return;
    let chainIdInt;
    if (typeof chainId === "string" && isHexString(addHexPrefix(chainId))) {
      chainIdInt = Number.parseInt(chainId, 16);
    }
    try {
      isEIP1559Compatible = await this.getEIP1559Compatibility();
      log.info("eip1559 compatible", isEIP1559Compatible);
    } catch (error) {
      log.warn(error);
      isEIP1559Compatible = false;
    }
    let newState = cloneDeep(this.defaultState);
    try {
      if (isEIP1559Compatible) {
        let estimates;
        try {
          if (this.API_SUPPORTED_CHAINIDS.has(chainId)) {
            estimates = await this.fetchGasEstimates(this.config.EIP1559APIEndpoint.replace("<chain_id>", `${chainIdInt}`));
          } else {
            throw new Error("ChainId not supported by api");
          }
        } catch {
          estimates = await this.fetchGasEstimatesViaEthFeeHistory(this.provider);
        }
        const {
          suggestedMaxPriorityFeePerGas,
          suggestedMaxFeePerGas
        } = estimates.medium;
        const estimatedGasFeeTimeBounds = this.getTimeEstimate(suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas);
        newState = {
          gasFeeEstimates: estimates,
          estimatedGasFeeTimeBounds,
          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET
        };
      } else if (isLegacyGasAPICompatible) {
        const estimates = await this.fetchLegacyGasPriceEstimates(this.config.legacyAPIEndpoint.replace("<chain_id>", `${chainIdInt}`));
        newState = {
          gasFeeEstimates: estimates,
          estimatedGasFeeTimeBounds: {},
          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY
        };
      } else {
        throw new Error("Main gas fee/price estimation failed. Use fallback");
      }
    } catch {
      try {
        const estimates = await this.fetchEthGasPriceEstimate(this.provider);
        newState = {
          gasFeeEstimates: estimates,
          estimatedGasFeeTimeBounds: {},
          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE
        };
      } catch (error) {
        throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);
      }
    }
    this.update(newState);
    return newState;
  }
  async _startPolling() {
    this.pollingManager.start(async () => {
      await this._fetchGasFeeEstimateData();
    });
  }
  resetState() {
    this.update(cloneDeep(this.defaultState));
  }
  async getEIP1559Compatibility() {
    var _this$getCurrentAccou, _this$getCurrentAccou2;
    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();
    const currentAccountIsEIP1559Compatible = (_this$getCurrentAccou = (_this$getCurrentAccou2 = this.getCurrentAccountEIP1559Compatibility) === null || _this$getCurrentAccou2 === void 0 ? void 0 : _this$getCurrentAccou2.call(this)) !== null && _this$getCurrentAccou !== void 0 ? _this$getCurrentAccou : true;
    return currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible;
  }
  getTimeEstimate(maxPriorityFeePerGas, maxFeePerGas) {
    if (!this.state.gasFeeEstimates || this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET) {
      return {};
    }
    return calculateTimeEstimate(maxPriorityFeePerGas, maxFeePerGas, this.state.gasFeeEstimates);
  }
}

export { GasFeeController };
