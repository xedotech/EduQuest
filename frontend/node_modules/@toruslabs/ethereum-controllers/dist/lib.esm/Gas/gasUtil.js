import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { get } from '@toruslabs/http-helpers';
import { BigNumber } from 'bignumber.js';
import { METHOD_TYPES } from '../utils/constants.js';
import { hexWEIToDecGWEI, decGWEIToHexWEI } from '../utils/conversionUtils.js';

function normalizeGWEIDecimalNumbers(n) {
  const numberAsWEIHex = decGWEIToHexWEI(new BigNumber(n));
  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);
  return numberAsGWEI;
}
async function fetchGasEstimates(url) {
  const estimates = await get(url);
  const normalizedEstimates = {
    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee).toString(10),
    low: _objectSpread(_objectSpread({}, estimates.low), {}, {
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas).toString(10)
    }),
    medium: _objectSpread(_objectSpread({}, estimates.medium), {}, {
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas).toString(10)
    }),
    high: _objectSpread(_objectSpread({}, estimates.high), {}, {
      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas).toString(10),
      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas).toString(10)
    })
  };
  return normalizedEstimates;
}
async function fetchGasEstimatesViaEthFeeHistory(provider) {
  const noOfBlocks = 10;
  const newestBlock = "latest";
  // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks
  const percentileValues = [10, 50, 95];
  const feeHistory = await provider.request({
    method: "eth_feeHistory",
    params: [noOfBlocks, newestBlock, percentileValues]
  });
  // this is in hex wei
  const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];
  // this is in hex wei
  const rewardList = feeHistory.reward.filter(reward => reward[0] !== "0x0" || reward[1] !== "0x0" || reward[2] !== "0x0");
  const numberOfRewards = rewardList.length || 1;
  const priorityFeeCalcs = rewardList.reduce((acc, curr) => {
    return {
      slow: acc.slow.plus(new BigNumber(curr[0], 16)),
      average: acc.average.plus(new BigNumber(curr[1], 16)),
      fast: acc.fast.plus(new BigNumber(curr[2], 16))
    };
  }, {
    slow: new BigNumber(0),
    average: new BigNumber(0),
    fast: new BigNumber(0)
  });
  return {
    estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(10),
    high: {
      maxWaitTimeEstimate: 30000,
      minWaitTimeEstimate: 15000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.div(numberOfRewards).plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.div(numberOfRewards).toString(16)).toString()
    },
    medium: {
      maxWaitTimeEstimate: 45000,
      minWaitTimeEstimate: 15000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.div(numberOfRewards).plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.div(numberOfRewards).toString(16)).toString()
    },
    low: {
      maxWaitTimeEstimate: 60000,
      minWaitTimeEstimate: 15000,
      suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.div(numberOfRewards).plus(finalBaseFeePerGas).toString(16)).toString(),
      suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.div(numberOfRewards).toString(16)).toString()
    }
  };
}

/**
 * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
 * high values from that API.
 */
async function fetchLegacyGasPriceEstimates(url) {
  const result = await get(url, {
    referrer: url,
    referrerPolicy: "no-referrer-when-downgrade",
    method: "GET"
  });
  // this returns decimal gwei
  return {
    low: result.SafeGasPrice,
    medium: result.ProposeGasPrice,
    high: result.FastGasPrice
  };
}
async function fetchEthGasPriceEstimate(provider) {
  const gasPrice = await provider.request({
    method: METHOD_TYPES.ETH_GET_GAS_PRICE
  });
  return {
    gasPrice: hexWEIToDecGWEI(gasPrice).toString()
  };
}
function calculateTimeEstimate(maxPriorityFeePerGas, maxFeePerGas, gasFeeEstimates) {
  // all are in dec gwei
  const {
    low,
    medium,
    high,
    estimatedBaseFee
  } = gasFeeEstimates;
  const maxPriorityFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxPriorityFeePerGas)), 16);
  const maxFeePerGasInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(maxFeePerGas)), 16);
  const estimatedBaseFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(estimatedBaseFee)), 16);
  const effectiveMaxPriorityFee = BigNumber.min(maxPriorityFeePerGasInWEI, maxFeePerGasInWEI.minus(estimatedBaseFeeInWEI));
  const lowMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(low.suggestedMaxPriorityFeePerGas)), 16);
  const mediumMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(medium.suggestedMaxPriorityFeePerGas)), 16);
  const highMaxPriorityFeeInWEI = new BigNumber(decGWEIToHexWEI(new BigNumber(high.suggestedMaxPriorityFeePerGas)), 16);
  let lowerTimeBound;
  let upperTimeBound;
  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {
    lowerTimeBound = null;
    upperTimeBound = "unknown";
  } else if (effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)) {
    lowerTimeBound = low.minWaitTimeEstimate;
    upperTimeBound = low.maxWaitTimeEstimate;
  } else if (effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) && effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)) {
    lowerTimeBound = medium.minWaitTimeEstimate;
    upperTimeBound = medium.maxWaitTimeEstimate;
  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {
    lowerTimeBound = high.minWaitTimeEstimate;
    upperTimeBound = high.maxWaitTimeEstimate;
  } else {
    lowerTimeBound = 0;
    upperTimeBound = high.maxWaitTimeEstimate;
  }
  return {
    lowerTimeBound,
    upperTimeBound
  };
}

export { calculateTimeEstimate, fetchEthGasPriceEstimate, fetchGasEstimates, fetchGasEstimatesViaEthFeeHistory, fetchLegacyGasPriceEstimates, normalizeGWEIDecimalNumbers };
