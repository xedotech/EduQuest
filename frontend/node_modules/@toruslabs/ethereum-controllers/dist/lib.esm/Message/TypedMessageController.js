import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { AbstractMessageController, MessageStatus, randomId, MESSAGE_EVENTS } from '@toruslabs/base-controllers';
import log from 'loglevel';
import { METHOD_TYPES } from '../utils/constants.js';
import { validateTypedSignMessageDataV4 } from './utils.js';

class TypedMessageController extends AbstractMessageController {
  constructor({
    config,
    state,
    signTypedData,
    getNetworkIdentifier
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "name", "TypedMessageController");
    _defineProperty(this, "signTypedData", void 0);
    _defineProperty(this, "getNetworkIdentifier", void 0);
    this.signTypedData = signTypedData;
    this.getNetworkIdentifier = getNetworkIdentifier;
    this.initialize();
  }
  async processSignTypedMessage(messageId) {
    const msgObject = this.getMessage(messageId);
    if (!msgObject) {
      throw new Error(`Message not found`);
    }
    try {
      const cleanMsgParams = await this.approveMessage(messageId, msgObject.messageParams);
      const msgData = JSON.parse(cleanMsgParams.data);
      const rawSig = await this.signTypedData(msgData, cleanMsgParams.from);
      this.updateMessage(_objectSpread(_objectSpread({}, msgObject), {}, {
        rawSig
      }));
      this.setMessageStatus(messageId, MessageStatus.SIGNED);
      return rawSig;
    } catch (error) {
      log.error(error);
      msgObject.error = (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString());
      this.setMessageStatus(messageId, MessageStatus.FAILED);
    }
  }
  async addNewUnapprovedMessage(messageParams, req) {
    await this.addUnapprovedMessage(messageParams, req);
    return this.waitForFinishStatus(messageParams, this.name);
  }
  async addUnapprovedMessage(messageParams, req) {
    const currentChainId = this.getNetworkIdentifier();
    await validateTypedSignMessageDataV4(messageParams, currentChainId);
    if (typeof messageParams.data !== "string") {
      messageParams.data = JSON.stringify(messageParams.data);
    }
    if (req) {
      messageParams.origin = req.origin;
    }
    const messageId = messageParams.id || randomId();
    const messageData = {
      id: messageId,
      messageParams,
      status: MessageStatus.UNAPPROVED,
      time: Date.now(),
      type: METHOD_TYPES.ETH_SIGN_TYPED_DATA_V4
    };
    await this.addMessage(messageData);
    this.emit(MESSAGE_EVENTS.UNAPPROVED_MESSAGE, {
      messageData,
      req
    });
    return messageId;
  }
  prepMessageForSigning(messageParams) {
    return Promise.resolve(messageParams);
  }
}

export { TypedMessageController };
