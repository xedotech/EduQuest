import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { Contract } from 'ethers';
import log from 'loglevel';
import { erc20Abi } from '../utils/abis.js';

class TokenHandler {
  constructor({
    address,
    symbol,
    decimals,
    name,
    provider
  }) {
    _defineProperty(this, "address", void 0);
    _defineProperty(this, "symbol", void 0);
    _defineProperty(this, "decimals", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "contract", void 0);
    this.address = address;
    this.contract = new Contract(address, erc20Abi, provider);
    this.symbol = symbol;
    this.decimals = decimals;
    this.name = name;
  }
  async getSymbol() {
    if (!this.symbol || this.symbol === "ERC20") this.symbol = await this.contract.symbol();
    return this.symbol;
  }
  async getDecimals() {
    try {
      if (!this.decimals) this.decimals = await this.contract.decimals();
      return this.decimals;
    } catch (error) {
      log.warn(`Could not get decimals for token ${this.address}`, error);
      return 0;
    }
  }
  async getName() {
    if (!this.name) this.name = await this.contract.name();
    return this.name;
  }
  async getUserBalance(userAddress) {
    if (!this.decimals) await this.getDecimals();
    const balance = await this.contract.balanceOf(userAddress);
    return balance.toString(16);
  }
}

export { TokenHandler };
