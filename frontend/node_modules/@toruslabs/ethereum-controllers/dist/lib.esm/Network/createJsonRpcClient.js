import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { createFetchMiddleware, createInflightCacheMiddleware } from '@toruslabs/base-controllers';
import { providerFromMiddleware, mergeMiddleware } from '@web3auth/auth';
import { PollingBlockTracker } from '../Block/PollingBlockTracker.js';
import { cacheIdentifierForRequest } from './cacheIdentifier.js';

function createChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "eth_chainId") {
      res.result = chainId;
      return end();
    }
    if (req.method === "net_version") {
      // convert to decimal
      res.result = Number.parseInt(chainId, 16).toString(10);
      return end();
    }
    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "eth_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createJsonRpcClient(providerConfig, networkConfig, idleTimeTracker, analytics) {
  const {
    chainId,
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = createFetchMiddleware({
    rpcTarget,
    providerConfig,
    analytics
  });
  const blockProvider = providerFromMiddleware(fetchMiddleware);
  const blockTracker = new PollingBlockTracker({
    config: _objectSpread(_objectSpread({}, networkConfig), {}, {
      provider: blockProvider
    }),
    state: {},
    idleTimeTracker
  });
  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig),
  // No need for the following middlewares for web because all browser sessions are quite short lived and each session is limited to scope of a window/tab
  // createBlockRefRewriteMiddleware({ blockTracker }),
  // createBlockCacheMiddleware({ blockTracker }),
  createInflightCacheMiddleware({
    cacheIdentifierForRequest
  }),
  // createBlockTrackerInspectorMiddleware({ blockTracker }),
  fetchMiddleware]);
  return {
    networkMiddleware,
    blockTracker
  };
}

export { createChainIdMiddleware, createJsonRpcClient, createProviderConfigMiddleware };
