import { CHAIN_NAMESPACES } from '@toruslabs/base-controllers';

const LOCALHOST = "localhost";
const CONTRACT_TYPE_ETH = "eth";
const CONTRACT_TYPE_ERC20 = "erc20";
const CONTRACT_TYPE_ERC721 = "erc721";
const CONTRACT_TYPE_ERC1155 = "erc1155";
const ERC1155_INTERFACE_ID = "0xd9b67a26";
const ERC721_INTERFACE_ID = "0x80ac58cd";
const ERC721_METADATA_INTERFACE_ID = "0x5b5e139f";
const ERC721_ENUMERABLE_INTERFACE_ID = "0x780e9d63";
const MAINNET_CHAIN_ID = "0x1";
const POLYGON_CHAIN_ID = "0x89";
const BSC_MAINNET_CHAIN_ID = "0x38";
const AVALANCHE_MAINNET_CHAIN_ID = "0xa86a";
const XDAI_CHAIN_ID = "0x64";
const ARBITRUM_MAINNET_CHAIN_ID = "0xa4b1";
const OPTIMISM_MAINNET_CHAIN_ID = "0xa";
const CELO_MAINNET_CHAIN_ID = "0xa4ec";
const BASE_CHAIN_ID = "0x2105";
const LINEA_CHAIN_ID = "0xe708";
const SEPOLIA_CHAIN_ID = "0xaa36a7";
const POLYGON_AMOY_CHAIN_ID = "0x13882";
const BSC_TESTNET_CHAIN_ID = "0x61";
const AVALANCHE_TESTNET_CHAIN_ID = "0xa869";
const ARBITRUM_TESTNET_CHAIN_ID = "0x66eee";
const OPTIMISM_TESTNET_CHAIN_ID = "0xaa37dc";
const BASE_TESTNET_CHAIN_ID = "0x14a34";
const LINEA_SEPOLIA_CHAIN_ID = "0xe705";
const INFURA_KEY = process.env.VITE_APP_INFURA_PROJECT_KEY;
const SUPPORTED_NETWORKS = {
  [MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://etherscan.io",
    chainId: MAINNET_CHAIN_ID,
    displayName: "Ethereum",
    logo: "eth.svg",
    rpcTarget: `https://mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum"
  },
  [POLYGON_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://polygonscan.com",
    chainId: POLYGON_CHAIN_ID,
    displayName: "Polygon",
    logo: "polygon.svg",
    rpcTarget: `https://polygon-mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "POL",
    tickerName: "Polygon Ecosystem Token"
  },
  [BSC_MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://bscscan.com",
    chainId: BSC_MAINNET_CHAIN_ID,
    displayName: "Binance Smart Chain (BSC)",
    logo: "bnb_logo.svg",
    rpcTarget: `https://bsc-dataseed.binance.org`,
    ticker: "BNB",
    tickerName: "Binance Coin"
  },
  [AVALANCHE_MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://snowtrace.io",
    chainId: AVALANCHE_MAINNET_CHAIN_ID,
    displayName: "Avalanche",
    logo: "avax.svg",
    rpcTarget: `https://api.avax.network/ext/bc/C/rpc`,
    ticker: "AVAX",
    tickerName: "Avalanche"
  },
  [OPTIMISM_MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://optimistic.etherscan.io",
    chainId: OPTIMISM_MAINNET_CHAIN_ID,
    displayName: "Optimism",
    logo: "optimism.svg",
    rpcTarget: `https://optimism-mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum"
  },
  [CELO_MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://explorer.celo.org",
    chainId: CELO_MAINNET_CHAIN_ID,
    displayName: "Celo Mainnet",
    logo: "celo.svg",
    rpcTarget: `https://celo-mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "CELO",
    tickerName: "Celo"
  },
  [ARBITRUM_MAINNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://arbiscan.io",
    chainId: ARBITRUM_MAINNET_CHAIN_ID,
    displayName: "Arbitrum One",
    logo: "arbitrum.svg",
    rpcTarget: `https://arbitrum-mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum"
  },
  [BASE_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://basescan.org",
    chainId: BASE_CHAIN_ID,
    displayName: "Base",
    logo: "base.svg",
    rpcTarget: `https://mainnet.base.org`,
    ticker: "ETH",
    tickerName: "Ethereum"
  },
  [LINEA_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://lineascan.build",
    chainId: LINEA_CHAIN_ID,
    displayName: "Linea",
    logo: "linea.svg",
    rpcTarget: `https://linea-mainnet.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum"
  },
  [SEPOLIA_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://sepolia.etherscan.io",
    chainId: SEPOLIA_CHAIN_ID,
    displayName: "Sepolia Test Network",
    logo: "eth.svg",
    rpcTarget: `https://sepolia.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true
  },
  [LINEA_SEPOLIA_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://sepolia.lineascan.build",
    chainId: LINEA_SEPOLIA_CHAIN_ID,
    displayName: "Linea Sepolia Testnet",
    logo: "linea.svg",
    rpcTarget: `https://linea-sepolia.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true
  },
  [POLYGON_AMOY_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://amoy.polygonscan.com",
    chainId: POLYGON_AMOY_CHAIN_ID,
    displayName: "Polygon Amoy",
    logo: "polygon.svg",
    rpcTarget: `https://polygon-amoy.infura.io/v3/${INFURA_KEY}`,
    ticker: "POL",
    tickerName: "Polygon Ecosystem Token",
    isTestnet: true
  },
  [BSC_TESTNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://testnet.bscscan.com",
    chainId: BSC_TESTNET_CHAIN_ID,
    displayName: "Binance Smart Chain Testnet",
    logo: "bnb_logo.svg",
    rpcTarget: `https://data-seed-prebsc-1-s1.binance.org:8545`,
    ticker: "BNB",
    tickerName: "Binance Coin",
    isTestnet: true
  },
  [AVALANCHE_TESTNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://testnet.snowtrace.io",
    chainId: AVALANCHE_TESTNET_CHAIN_ID,
    displayName: "Avalanche Testnet C-Chain",
    logo: "avax.svg",
    rpcTarget: `https://api.avax-test.network/ext/bc/C/rpc`,
    ticker: "AVAX",
    tickerName: "Avalanche",
    isTestnet: true
  },
  [ARBITRUM_TESTNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://sepolia.arbiscan.io",
    chainId: ARBITRUM_TESTNET_CHAIN_ID,
    displayName: "Arbitrum Sepolia",
    logo: "arbitrum.svg",
    rpcTarget: `https://arbitrum-sepolia.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true
  },
  [OPTIMISM_TESTNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://sepolia-optimistic.etherscan.io",
    chainId: OPTIMISM_TESTNET_CHAIN_ID,
    displayName: "Optimism Sepolia",
    logo: "optimism.svg",
    rpcTarget: `https://optimism-sepolia.infura.io/v3/${INFURA_KEY}`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true
  },
  [BASE_TESTNET_CHAIN_ID]: {
    chainNamespace: CHAIN_NAMESPACES.EIP155,
    decimals: 18,
    blockExplorerUrl: "https://sepolia.basescan.org",
    chainId: BASE_TESTNET_CHAIN_ID,
    displayName: "Base Sepolia",
    logo: "base.svg",
    rpcTarget: `https://sepolia.base.org`,
    ticker: "ETH",
    tickerName: "Ethereum",
    isTestnet: true
  }
};
const METHOD_TYPES = {
  GET_ACCOUNTS: "eth_accounts",
  ETH_TRANSACTION: "eth_sendTransaction",
  ETH_SIGN_TRANSACTION: "eth_signTransaction",
  // In TransferToken UI of WS, we call this method via JRPC provider to get gas estimation for a user op. Renamed to avoid conflict with bundler's gas estimation method
  ETH_ESTIMATE_AA_TRANSACTION_GAS: "eth_estimateAATransactionGas",
  // start bundler methods
  ETH_ESTIMATE_USER_OPERATION_GAS: "eth_estimateUserOperationGas",
  ETH_GET_SUPPORTED_ENTRY_POINTS: "eth_supportedEntryPoints",
  ETH_GET_USER_OPERATION: "eth_getUserOperationByHash",
  ETH_GET_USER_OPERATION_RECEIPT: "eth_getUserOperationReceipt",
  ETH_SEND_USER_OPERATION: "eth_sendUserOperation",
  PIMLICO_GET_USER_OPERATION_GAS_PRICE: "pimlico_getUserOperationGasPrice",
  PIMLICO_GET_USER_OPERATION_STATUS: "pimlico_getUserOperationStatus",
  PIMLICO_SIMULATE_ASSET_CHANGES: "pimlico_simulateAssetChanges",
  BICONOMY_GET_GAS_FEE_VALUES: "biconomy_getGasFeeValues",
  BICONOMY_GET_USER_OPERATION_STATUS: "biconomy_getUserOperationStatus",
  // end bundler methods
  // start paymaster methods
  ETH_GET_PAYMASTER_DATA: "pm_getPaymasterData",
  ETH_GET_PAYMASTER_STUB_DATA: "pm_getPaymasterStubData",
  ETH_SPONSOR_USER_OPERATION: "pm_sponsorUserOperation",
  ETH_GET_FEE_QUOTE_OR_DATA: "pm_getFeeQuoteOrData",
  PIMLICO_GET_TOKEN_QUOTES: "pimlico_getTokenQuotes",
  // end paymaster methods
  ETH_REQUEST_ACCOUNTS: "eth_requestAccounts",
  ETH_SEND_RAW_TRANSACTION: "eth_sendRawTransaction",
  ETH_SIGN: "eth_sign",
  ETH_SIGN_TYPED_DATA_V4: "eth_signTypedData_v4",
  PERSONAL_SIGN: "personal_sign",
  ETH_GET_TRANSACTION_COUNT: "eth_getTransactionCount",
  ETH_GET_TRANSACTION_BY_HASH: "eth_getTransactionByHash",
  ETH_GET_TRANSACTION_RECEIPT: "eth_getTransactionReceipt",
  WATCH_ASSET: "wallet_watchAsset",
  ETH_GET_BLOCK_BY_HASH: "eth_getBlockByHash",
  ETH_GET_CODE: "eth_getCode",
  ETH_GET_GAS_PRICE: "eth_gasPrice",
  ETH_PRIVATE_KEY: "eth_privateKey",
  PRIVATE_KEY: "private_key",
  ETH_PUBLIC_KEY: "eth_publicKey",
  PUBLIC_KEY: "public_key",
  SWITCH_CHAIN: "wallet_switchEthereumChain",
  ADD_CHAIN: "wallet_addEthereumChain"
};
const BUNDLER_METHOD_TYPES = [METHOD_TYPES.ETH_ESTIMATE_USER_OPERATION_GAS, METHOD_TYPES.ETH_GET_SUPPORTED_ENTRY_POINTS, METHOD_TYPES.ETH_GET_USER_OPERATION, METHOD_TYPES.ETH_GET_USER_OPERATION_RECEIPT, METHOD_TYPES.ETH_SEND_USER_OPERATION, METHOD_TYPES.PIMLICO_GET_USER_OPERATION_GAS_PRICE, METHOD_TYPES.PIMLICO_GET_USER_OPERATION_STATUS, METHOD_TYPES.PIMLICO_SIMULATE_ASSET_CHANGES, METHOD_TYPES.BICONOMY_GET_GAS_FEE_VALUES, METHOD_TYPES.BICONOMY_GET_USER_OPERATION_STATUS];
const PAYMASTER_METHOD_TYPES = [METHOD_TYPES.ETH_GET_PAYMASTER_DATA, METHOD_TYPES.ETH_GET_PAYMASTER_STUB_DATA, METHOD_TYPES.ETH_SPONSOR_USER_OPERATION, METHOD_TYPES.PIMLICO_GET_TOKEN_QUOTES, METHOD_TYPES.ETH_GET_FEE_QUOTE_OR_DATA];
const TRANSACTION_ENVELOPE_TYPES = {
  LEGACY: "0x0",
  ACCESS_LIST: "0x1",
  FEE_MARKET: "0x2"
};
const GAS_ESTIMATE_TYPES = {
  // Fee Market describes the way gas is set after the london hardfork, and was
  // defined by EIP-1559.
  FEE_MARKET: "fee-market",
  // Legacy describes gasPrice estimates from before london hardfork, when the
  // user is connected to mainnet and are presented with fast/average/slow
  // estimate levels to choose from.
  LEGACY: "legacy",
  // EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post
  // london this value should only be used for legacy type transactions when on
  // networks that support EIP-1559. This type of estimate is the most accurate
  // to display on custom networks that don't support EIP-1559.
  ETH_GASPRICE: "eth_gasPrice",
  // NoEstimate describes the state of the controller before receiving its first
  // estimate.
  NONE: "none"
};

// https://help.optimism.io/hc/en-us/articles/4411895794715-Transaction-fees
const CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP = {
  [OPTIMISM_MAINNET_CHAIN_ID]: 1,
  [OPTIMISM_TESTNET_CHAIN_ID]: 1
};
const OLD_ERC721_LIST = {
  "0x06012c8cf97bead5deae237070f9587f8e7a266d": {
    name: "Cryptokitties",
    logo: "dapp-cryptokitty.svg",
    erc20: true,
    symbol: "CK",
    decimals: 0
  }
};
const TEST_CHAINS = [SEPOLIA_CHAIN_ID];
const MM_TOKEN_API_SUPPORTED_CHAINS = [MAINNET_CHAIN_ID, SEPOLIA_CHAIN_ID, BSC_MAINNET_CHAIN_ID, BSC_TESTNET_CHAIN_ID, OPTIMISM_MAINNET_CHAIN_ID, OPTIMISM_TESTNET_CHAIN_ID, AVALANCHE_MAINNET_CHAIN_ID, AVALANCHE_TESTNET_CHAIN_ID, ARBITRUM_MAINNET_CHAIN_ID, ARBITRUM_TESTNET_CHAIN_ID, POLYGON_CHAIN_ID, POLYGON_AMOY_CHAIN_ID, CELO_MAINNET_CHAIN_ID, BASE_CHAIN_ID, BASE_TESTNET_CHAIN_ID, LINEA_CHAIN_ID, LINEA_SEPOLIA_CHAIN_ID];
const MM_NFT_API_SUPPORTED_CHAINS = [MAINNET_CHAIN_ID, POLYGON_CHAIN_ID, BSC_MAINNET_CHAIN_ID, AVALANCHE_MAINNET_CHAIN_ID, LINEA_CHAIN_ID, BASE_CHAIN_ID];
const COINGECKO_SUPPORTED_CURRENCIES = new Set(["btc", "eth", "ltc", "bch", "bnb", "eos", "xrp", "xlm", "link", "dot", "yfi", "usd", "aed", "ars", "aud", "bdt", "bhd", "bmd", "brl", "cad", "chf", "clp", "cny", "czk", "dkk", "eur", "gbp", "hkd", "huf", "idr", "ils", "inr", "jpy", "krw", "kwd", "lkr", "mmk", "mxn", "myr", "ngn", "nok", "nzd", "php", "pkr", "pln", "rub", "sar", "sek", "sgd", "thb", "try", "twd", "uah", "vef", "vnd", "zar", "xdr", "xag", "xau", "bits", "sats"]);
const COINGECKO_PLATFORMS_CHAIN_CODE_MAP = {
  [POLYGON_CHAIN_ID]: {
    platform: "polygon-pos",
    currency: "pol"
  },
  [BSC_MAINNET_CHAIN_ID]: {
    platform: "binance-smart-chain",
    currency: "bnb"
  },
  [MAINNET_CHAIN_ID]: {
    platform: "ethereum",
    currency: "eth"
  },
  [ARBITRUM_MAINNET_CHAIN_ID]: {
    platform: "arbitrum-one",
    currency: "eth"
  },
  [OPTIMISM_MAINNET_CHAIN_ID]: {
    platform: "optimistic-ethereum",
    currency: "eth"
  },
  [CELO_MAINNET_CHAIN_ID]: {
    platform: "celo",
    currency: "celo"
  },
  [XDAI_CHAIN_ID]: {
    platform: "xdai",
    currency: "xDAI"
  },
  [AVALANCHE_MAINNET_CHAIN_ID]: {
    platform: "avalanche",
    currency: "avax"
  },
  [BASE_CHAIN_ID]: {
    platform: "base",
    currency: "eth"
  }
};
const SMART_ACCOUNT = {
  BICONOMY: "biconomy",
  KERNEL: "kernel",
  SAFE: "safe",
  TRUST: "trust",
  // TODO: disabled because of pimlico issues
  LIGHT: "light",
  SIMPLE: "simple",
  NEXUS: "nexus",
  METAMASK: "metamask"
};

export { ARBITRUM_MAINNET_CHAIN_ID, ARBITRUM_TESTNET_CHAIN_ID, AVALANCHE_MAINNET_CHAIN_ID, AVALANCHE_TESTNET_CHAIN_ID, BASE_CHAIN_ID, BASE_TESTNET_CHAIN_ID, BSC_MAINNET_CHAIN_ID, BSC_TESTNET_CHAIN_ID, BUNDLER_METHOD_TYPES, CELO_MAINNET_CHAIN_ID, CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP, COINGECKO_PLATFORMS_CHAIN_CODE_MAP, COINGECKO_SUPPORTED_CURRENCIES, CONTRACT_TYPE_ERC1155, CONTRACT_TYPE_ERC20, CONTRACT_TYPE_ERC721, CONTRACT_TYPE_ETH, ERC1155_INTERFACE_ID, ERC721_ENUMERABLE_INTERFACE_ID, ERC721_INTERFACE_ID, ERC721_METADATA_INTERFACE_ID, GAS_ESTIMATE_TYPES, LINEA_CHAIN_ID, LINEA_SEPOLIA_CHAIN_ID, LOCALHOST, MAINNET_CHAIN_ID, METHOD_TYPES, MM_NFT_API_SUPPORTED_CHAINS, MM_TOKEN_API_SUPPORTED_CHAINS, OLD_ERC721_LIST, OPTIMISM_MAINNET_CHAIN_ID, OPTIMISM_TESTNET_CHAIN_ID, PAYMASTER_METHOD_TYPES, POLYGON_AMOY_CHAIN_ID, POLYGON_CHAIN_ID, SEPOLIA_CHAIN_ID, SMART_ACCOUNT, SUPPORTED_NETWORKS, TEST_CHAINS, TRANSACTION_ENVELOPE_TYPES, XDAI_CHAIN_ID };
