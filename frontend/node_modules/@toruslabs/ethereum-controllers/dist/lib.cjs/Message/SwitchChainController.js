'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var baseControllers = require('@toruslabs/base-controllers');
var log = require('loglevel');
var constants = require('../utils/constants.js');
var utils = require('./utils.js');

class SwitchChainController extends baseControllers.AbstractMessageController {
  constructor({
    config,
    state,
    switchChain
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "name", "SwitchChainController");
    _defineProperty(this, "switchChain", void 0);
    this.switchChain = switchChain;
    this.initialize();
  }
  async processSwitchChain(messageId) {
    const msgObject = this.getMessage(messageId);
    if (!msgObject) {
      throw new Error(`Message not found`);
    }
    try {
      await this.approveMessage(messageId, msgObject.messageParams);
      this.switchChain({
        chainId: msgObject.messageParams.chainId
      });
      this.updateMessage(_objectSpread(_objectSpread({}, msgObject), {}, {
        rawSig: JSON.stringify(msgObject.messageParams)
      }));
      this.setMessageStatus(messageId, baseControllers.MessageStatus.SIGNED);
      return null;
    } catch (error) {
      log.error(error);
      msgObject.error = (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString());
      this.setMessageStatus(messageId, baseControllers.MessageStatus.FAILED);
    }
  }
  async addNewUnapprovedMessage(messageParams, req) {
    await this.addUnapprovedMessage(messageParams, req);
    return this.waitForFinishStatus(messageParams, this.name);
  }
  async addUnapprovedMessage(messageParams, req) {
    utils.validateSwitchChainData(messageParams);
    if (req) {
      messageParams.origin = req.origin;
    }
    const messageId = messageParams.id || baseControllers.randomId();
    const messageData = {
      id: messageId,
      messageParams,
      status: baseControllers.MessageStatus.UNAPPROVED,
      time: Date.now(),
      type: constants.METHOD_TYPES.SWITCH_CHAIN
    };
    await this.addMessage(messageData);
    this.emit(baseControllers.MESSAGE_EVENTS.UNAPPROVED_MESSAGE, {
      messageData,
      req
    });
    return messageId;
  }
  prepMessageForSigning(messageParams) {
    return Promise.resolve(messageParams);
  }
}

exports.SwitchChainController = SwitchChainController;
