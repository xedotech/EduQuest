import { BaseTransactionStateManager, ITransactionStateManager, TransactionConfig, TransactionState, TransactionStatus } from "@toruslabs/base-controllers";
import { NetworkController } from "../Network/NetworkController";
import { EthereumTransactionEvents, EthereumTransactionMeta, TransactionParams } from "../utils/interfaces";
export declare class TransactionStateManager extends BaseTransactionStateManager<TransactionParams, EthereumTransactionMeta, EthereumTransactionEvents<TransactionParams, EthereumTransactionMeta>> implements ITransactionStateManager<TransactionParams> {
    constructor({ config, state, getCurrentChainId, }: {
        config?: Partial<TransactionConfig>;
        state?: Partial<TransactionState<TransactionParams, EthereumTransactionMeta>>;
        getCurrentChainId: NetworkController["getNetworkIdentifier"];
    });
    generateTxMeta(opts?: Partial<EthereumTransactionMeta>): EthereumTransactionMeta;
    addTransactionToState(txMeta: EthereumTransactionMeta): EthereumTransactionMeta;
    /**
      Removes transaction from the given address for the current network
      from the txList
    */
    wipeTransactions(address: string): void;
    getTransactions({ searchCriteria, initialList, filterToCurrentNetwork, limit, }?: {
        searchCriteria?: Record<string, (val: unknown) => boolean> | Record<string, unknown>;
        initialList?: EthereumTransactionMeta[];
        filterToCurrentNetwork?: boolean;
        limit?: number;
    }): EthereumTransactionMeta[];
    getApprovedTransactions(address?: string): EthereumTransactionMeta[];
    getSubmittedTransactions(address?: string): EthereumTransactionMeta[];
    getPendingTransactions(address?: string): EthereumTransactionMeta[];
    getConfirmedTransactions(address?: string): EthereumTransactionMeta[];
    getUnapprovedTxList(): Record<string, EthereumTransactionMeta>;
    updateTransactionInState(txMeta: EthereumTransactionMeta, note?: string): void;
    protected _setTransactionStatus(txId: string, status: TransactionStatus, isFinalStep?: boolean): void;
}
