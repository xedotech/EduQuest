import { ITransactionController, TransactionConfig, TransactionState, TX_CONFIRMED_EVENT_TYPE, UserRequestApprovalParams } from "@toruslabs/base-controllers";
import { JRPCRequest, SafeEventEmitterProvider } from "@web3auth/auth";
import { PollingBlockTracker } from "../Block/PollingBlockTracker";
import { GasFeeController } from "../Gas/GasFeeController";
import { KeyringController } from "../Keyring/KeyringController";
import { NetworkController } from "../Network/NetworkController";
import { PreferencesController } from "../Preferences/PreferencesController";
import { EthereumTransactionMeta, TransactionParams } from "../utils/interfaces";
import { NonceTracker } from "./NonceTracker";
import { PendingTransactionTracker } from "./PendingTransactionTracker";
import { TransactionGasUtil } from "./TransactionGasUtil";
import { TransactionStateManager } from "./TransactionStateManager";
export declare class TransactionController extends TransactionStateManager implements ITransactionController<TransactionParams> {
    getSelectedAddress: PreferencesController["getSelectedAddress"];
    getEIP1559GasFeeEstimates: GasFeeController["fetchGasFeeEstimates"];
    nonceTracker: NonceTracker;
    pendingTxTracker: PendingTransactionTracker<TransactionState<TransactionParams, EthereumTransactionMeta>>;
    txGasUtil: TransactionGasUtil;
    private _getCurrentNetworkEIP1559Compatibility;
    private _getCurrentAccountEIP1559Compatibility;
    private signEthTx;
    private provider;
    private blockTracker;
    private inProcessOfSigning;
    constructor({ config, state, provider, blockTracker, signEthTx, getCurrentChainId, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getSelectedAddress, getEIP1559GasFeeEstimates, }: {
        config?: Partial<TransactionConfig>;
        state?: Partial<TransactionState<TransactionParams, EthereumTransactionMeta>>;
        provider: SafeEventEmitterProvider;
        blockTracker: PollingBlockTracker;
        signEthTx: KeyringController["signTransaction"];
        getCurrentChainId: NetworkController["getNetworkIdentifier"];
        getCurrentNetworkEIP1559Compatibility: NetworkController["getEIP1559Compatibility"];
        getCurrentAccountEIP1559Compatibility: (address?: string) => Promise<boolean>;
        getSelectedAddress: PreferencesController["getSelectedAddress"];
        getEIP1559GasFeeEstimates: GasFeeController["fetchGasFeeEstimates"];
    });
    addTransactionUnapproved(txMeta: EthereumTransactionMeta): void;
    addNewUnapprovedTransaction(txParams: TransactionParams, req: JRPCRequest<TransactionParams> & UserRequestApprovalParams & {
        origin: string;
        isUserOperation?: boolean;
    }): Promise<string>;
    processApproval(txMeta: EthereumTransactionMeta): Promise<string>;
    approveTransaction(transactionID: string): Promise<void>;
    signTransaction(txId: string, isSignOnly?: boolean): Promise<string>;
    publishTransaction(txId: string): Promise<void>;
    confirmTransaction(params: TX_CONFIRMED_EVENT_TYPE): Promise<void>;
    cancelTransaction?(transactionID: string): Promise<void>;
    getEIP1559Compatibility(fromAddress?: string): Promise<boolean>;
    addTransactionGasDefaults(txMeta: EthereumTransactionMeta): Promise<EthereumTransactionMeta>;
    addTxGasDefaults(txMeta: EthereumTransactionMeta): Promise<EthereumTransactionMeta>;
    setTxHash(txId: string, txHash: string): void;
    getUnapprovedTxCount: () => number;
    getPendingTxCount: (account?: string) => number;
    getDefaultGasFees(txMeta: EthereumTransactionMeta, eip1559Compatibility: boolean): Promise<{
        maxFeePerGas?: string;
        maxPriorityFeePerGas?: string;
        gasPrice?: string;
    }>;
    private getDefaultGasLimit;
    private createTransaction;
    private _setupListeners;
    private setupBlockTrackerListener;
    private onLatestBlock;
    private markNonceDuplicatesDropped;
}
