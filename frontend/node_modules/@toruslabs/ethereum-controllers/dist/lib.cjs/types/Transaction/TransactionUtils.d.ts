import { TransactionStatus } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@web3auth/auth";
import { EthereumTransactionMeta, TransactionParams } from "../utils/interfaces";
type NormalizableTransactionParams = keyof Omit<TransactionParams, "accessList">;
/**
 * normalizes txParams
 */
export declare function normalizeTxParameters(txParameters: TransactionParams, lowerCase?: boolean): TransactionParams;
export declare function transactionMatchesNetwork(transaction: EthereumTransactionMeta, chainId: string): boolean;
/**
 * Determines if the maxFeePerGas and maxPriorityFeePerGas fields are supplied
 * and valid inputs. This will return false for non hex string inputs.
 *  the transaction to check
 * @returns true if transaction uses valid EIP1559 fields
 */
export declare function isEIP1559Transaction(transaction: Partial<EthereumTransactionMeta>): boolean;
/**
 * Determine if the maxFeePerGas and maxPriorityFeePerGas fields are not
 * supplied and that the gasPrice field is valid if it is provided. This will
 * return false if gasPrice is a non hex string.
 * transaction -
 *  the transaction to check
 * @returns true if transaction uses valid Legacy fields OR lacks
 *  EIP1559 fields
 */
export declare function isLegacyTransaction(transaction: EthereumTransactionMeta): boolean;
/**
 * Given two fields, ensure that the second field is not included in txParams,
 * and if it is throw an invalidParams error.
 */
export declare function ensureMutuallyExclusiveFieldsNotProvided(txParams: TransactionParams, fieldBeingValidated: NormalizableTransactionParams, mutuallyExclusiveField: NormalizableTransactionParams): void;
/**
 * Ensures that the provided value for field is a string, throws an
 * invalidParams error if field is not a string.
 */
export declare function ensureFieldIsString(txParams: TransactionParams, field: NormalizableTransactionParams): void;
/**
 * validates the from field in  txParams
 */
export declare function validateFrom(txParams: TransactionParams): void;
/**
 * validates the to field in  txParams
 */
export declare function validateRecipient(txParameters: TransactionParams): TransactionParams;
/**
 * Validates the given tx parameters
 * @throws if the tx params contains invalid fields
 */
export declare function validateTxParameters(txParams: TransactionParams, eip1559Compatibility?: boolean): void;
export declare function normalizeAndValidateTxParams(txParams: TransactionParams, lowerCase?: boolean): TransactionParams;
/**
 * @returns an array of states that can be considered final
 */
export declare function getFinalStates(): TransactionStatus[];
export declare function parseStandardTokenTransactionData(data: string): {
    name: string;
    methodParams: any[];
    type: string;
};
export declare const readAddressAsContract: (provider: SafeEventEmitterProvider, address: string) => Promise<{
    contractCode: string;
    isContractAddress: boolean;
}>;
export declare function determineTransactionType(txParams: TransactionParams, provider: SafeEventEmitterProvider): Promise<{
    type: string;
    category: string;
    methodParams: any[];
    getCodeResponse: string;
}>;
export {};
