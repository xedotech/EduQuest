import { SafeEventEmitterProvider } from "@web3auth/auth";
import { MutexInterface } from "async-mutex";
import { PollingBlockTracker } from "../Block/PollingBlockTracker";
import { NonceLockRes } from "../utils/interfaces";
import { TransactionStateManager } from "./TransactionStateManager";
interface INonceTrackerOptions {
    provider: SafeEventEmitterProvider;
    blockTracker: PollingBlockTracker;
    getPendingTransactions: TransactionStateManager["getPendingTransactions"];
    getConfirmedTransactions: TransactionStateManager["getConfirmedTransactions"];
}
export declare class NonceTracker {
    private provider;
    private blockTracker;
    private getPendingTransactions;
    private getConfirmedTransactions;
    private lockMap;
    constructor({ provider, blockTracker, getPendingTransactions, getConfirmedTransactions }: INonceTrackerOptions);
    getGlobalLock(): Promise<{
        releaseLock: MutexInterface.Releaser;
    }>;
    /**
      this will return an object with the `nextNonce`
      `nonceDetails`, and the releaseLock.
      Note: releaseLock must be called after adding a signed tx
      to pending transactions (or discarding).
    */
    getNonceLock(address: string): Promise<NonceLockRes>;
    private _globalMutexFree;
    private _takeMutex;
    private _lookupMutex;
    private _getNetworkNextNonce;
    private _getHighestLocallyConfirmed;
    private _getHighestNonce;
    private _getHighestContinuousFrom;
}
export {};
