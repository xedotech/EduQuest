type NumericBase = "hex" | "dec" | "BN";
type EthDenomination = "WEI" | "GWEI" | "ETH";
type ConverterOptions = {
    value: BigNumber | string;
    fromNumericBase: NumericBase;
    fromDenomination: EthDenomination;
    fromCurrency: string;
    toNumericBase: NumericBase;
    toDenomination: EthDenomination;
    toCurrency: string;
    numberOfDecimals: number;
    conversionRate: number;
    invertConversionRate: boolean;
    roundDown?: number;
};
export declare const conversionUtil: (value: BigNumber | string, { fromCurrency, toCurrency, fromNumericBase, toNumericBase, fromDenomination, toDenomination, numberOfDecimals, conversionRate, invertConversionRate, }: Omit<ConverterOptions, "value">) => string | 0 | BigNumber;
export declare const getBigNumber: (value: any, base: any) => BigNumber;
export declare const addCurrencies: (a: any, b: any, options?: Record<string, unknown>) => string | BigNumber;
export declare const subtractCurrencies: (a: any, b: any, options?: Record<string, unknown>) => string | BigNumber;
export declare const multiplyCurrencies: (a: any, b: any, options?: Record<string, unknown>) => string | BigNumber;
export declare const conversionGreaterThan: ({ ...firstProps }: ConverterOptions, { ...secondProps }: ConverterOptions) => any;
export declare const conversionLessThan: ({ ...firstProps }: ConverterOptions, { ...secondProps }: ConverterOptions) => any;
export declare const conversionMax: ({ ...firstProps }: {
    [x: string]: any;
}, { ...secondProps }: {
    [x: string]: any;
}) => any;
export declare const conversionGTE: ({ ...firstProps }: {
    [x: string]: any;
}, { ...secondProps }: {
    [x: string]: any;
}) => any;
export declare const conversionLTE: ({ ...firstProps }: {
    [x: string]: any;
}, { ...secondProps }: {
    [x: string]: any;
}) => any;
export declare const toNegative: (n: any, options?: {}) => string | BigNumber;
export declare const decGWEIToHexWEI: (decGWEI: BigNumber) => BigNumber;
export declare const hexWEIToDecGWEI: (decGWEI: BigNumber | string) => BigNumber;
export {};
