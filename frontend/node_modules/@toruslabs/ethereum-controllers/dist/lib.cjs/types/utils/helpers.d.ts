import { TransactionStatus } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@web3auth/auth";
import { EtherscanTransaction, FormattedTransactionActivity, TransactionPayload } from "./interfaces";
export declare function hexToBn(hex: string): BigNumber;
export declare function BNToHex(bn: BigNumber): string;
export declare function getEtherScanHashLink(txHash: string, chainId: string): string;
export declare const formatPastTx: (params: {
    transaction: TransactionPayload;
    blockExplorerUrl: string;
    lowerCaseSelectedAddress?: string;
}) => FormattedTransactionActivity;
/**
 * Ref - https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt
 */
export declare const getEthTxStatus: (hash: string, provider: SafeEventEmitterProvider) => Promise<TransactionStatus | undefined>;
export declare function formatDate(inputDate: string): string;
export declare function formatTime(time: number): string;
export declare function isAddressByChainId(address: string, _chainId: string): address is `0x${string}`;
export declare function toChecksumAddressByChainId(address: string, chainId: string): string;
export declare const GAS_LIMITS: {
    SIMPLE: `0x${string}`;
    BASE_TOKEN_ESTIMATE: `0x${string}`;
};
export declare function bnLessThan(a: string | number, b: string | number): boolean;
export declare const getIpfsEndpoint: (path: string) => string;
export declare function sanitizeNftMetdataUrl(url: string): string;
export declare function getChainType(chainId: string): "custom" | "mainnet" | "testnet";
export declare const addEtherscanTransactions: (params: {
    txn: EtherscanTransaction[];
    lowerCaseSelectedAddress: string;
    provider: SafeEventEmitterProvider;
    chainId: string;
    blockExplorerUrl: string;
}) => Promise<any[]>;
