import { AbstractMessageController, BaseConfig, MessageControllerState, UserRequestApprovalParams } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@web3auth/auth";
import { KeyringController } from "../Keyring/KeyringController";
import { NetworkController } from "../Network/NetworkController";
import { TypedMessage, TypedMessageParams } from "../utils/interfaces";
export declare class TypedMessageController extends AbstractMessageController<TypedMessage, TypedMessageParams> {
    name: string;
    protected signTypedData: KeyringController["signTypedData"];
    private getNetworkIdentifier;
    constructor({ config, state, signTypedData, getNetworkIdentifier, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<TypedMessage>>;
        signTypedData: KeyringController["signTypedData"];
        getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    });
    processSignTypedMessage(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: TypedMessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: TypedMessageParams): Promise<TypedMessageParams>;
}
