import { AbstractMessageController, BaseConfig, MessageControllerState, MessageParams, UserRequestApprovalParams } from "@toruslabs/base-controllers";
import { JRPCRequest } from "@web3auth/auth";
import { KeyringController } from "../Keyring/KeyringController";
import { EthereumMessage } from "./types";
export declare class PersonalMessageController extends AbstractMessageController<EthereumMessage, MessageParams> {
    name: string;
    protected signPersonalMessage: KeyringController["signPersonalMessage"];
    constructor({ config, state, signPersonalMessage, }: {
        config: Partial<BaseConfig>;
        state: Partial<MessageControllerState<EthereumMessage>>;
        signPersonalMessage: KeyringController["signPersonalMessage"];
    });
    processSignPersonalMessage(messageId: string): Promise<string>;
    addNewUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    addUnapprovedMessage(messageParams: MessageParams, req: JRPCRequest<unknown> & UserRequestApprovalParams): Promise<string>;
    prepMessageForSigning(messageParams: MessageParams): Promise<MessageParams>;
}
