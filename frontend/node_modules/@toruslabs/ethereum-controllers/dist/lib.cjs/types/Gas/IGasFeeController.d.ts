import { BaseConfig, BaseState } from "@toruslabs/base-controllers";
import { GAS_ESTIMATE_TYPES } from "../utils/constants";
export type GasFeeTimeBounds = {
    lowerTimeBound?: null | number;
    upperTimeBound?: string | number;
};
export type GasFeeEstimates = {
    minWaitTimeEstimate: number;
    maxWaitTimeEstimate: number;
    suggestedMaxPriorityFeePerGas: string;
    suggestedMaxFeePerGas: string;
};
export type EthereumGasFeeEstimates = {
    estimatedBaseFee: string;
    low: GasFeeEstimates;
    medium: GasFeeEstimates;
    high: GasFeeEstimates;
};
export type EthereumLegacyGasFeeEstimates = {
    low: string;
    medium: string;
    high: string;
};
export interface GasEstimatesAPIResponse extends EthereumGasFeeEstimates {
    estimatedBaseFee: string;
    networkCongestion: number;
    latestPriorityFeeRange: string[];
    historicalPriorityFeeRange: string[];
    historicalBaseFeeRange: string[];
    priorityFeeTrend: "up" | "down" | "level";
    baseFeeTrend: "up" | "down" | "level";
}
export interface GasEstimatesLegacyAPIResponse {
    SafeGasPrice: string;
    ProposeGasPrice: string;
    FastGasPrice: string;
}
export interface EthereumGasConfig extends BaseConfig {
    interval: number;
    legacyAPIEndpoint: string;
    EIP1559APIEndpoint: string;
}
export interface EthereumGasState extends BaseState {
    gasFeeEstimates: EthereumGasFeeEstimates | EthereumLegacyGasFeeEstimates | {
        gasPrice?: string;
    };
    estimatedGasFeeTimeBounds: GasFeeTimeBounds;
    gasEstimateType: (typeof GAS_ESTIMATE_TYPES)[keyof typeof GAS_ESTIMATE_TYPES];
}
