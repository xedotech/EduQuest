import { BaseController, IdleTimeTracker } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@web3auth/auth";
import { NetworkController } from "../Network/NetworkController";
import { EthereumNetworkState } from "../utils/interfaces";
import { EthereumGasConfig, EthereumGasFeeEstimates, EthereumGasState, EthereumLegacyGasFeeEstimates } from "./IGasFeeController";
interface IGasFeeControllerOptions {
    config?: Partial<EthereumGasConfig>;
    state?: Partial<EthereumGasState>;
    idleTimeTracker: IdleTimeTracker;
    getNetworkIdentifier: NetworkController["getNetworkIdentifier"];
    getProvider: NetworkController["getProvider"];
    getCurrentNetworkEIP1559Compatibility: NetworkController["getEIP1559Compatibility"];
    getCurrentAccountEIP1559Compatibility: (address: string) => boolean;
    getCurrentNetworkLegacyGasAPICompatibility: () => boolean;
    fetchGasEstimates?: (url: string) => Promise<EthereumGasFeeEstimates>;
    fetchEthGasPriceEstimate?: (provider: SafeEventEmitterProvider) => Promise<{
        gasPrice: string;
    }>;
    fetchLegacyGasPriceEstimates?: (url: string) => Promise<EthereumLegacyGasFeeEstimates>;
    fetchGasEstimatesViaEthFeeHistory?: (provider: SafeEventEmitterProvider) => Promise<EthereumGasFeeEstimates>;
    onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
}
/**
 * Returns gas prices in dec gwei
 */
export declare class GasFeeController extends BaseController<EthereumGasConfig, EthereumGasState> {
    name: string;
    readonly API_SUPPORTED_CHAINIDS: Set<string>;
    private provider;
    private currentChainId;
    private getNetworkIdentifier;
    private getProvider;
    private fetchGasEstimates;
    private fetchGasEstimatesViaEthFeeHistory;
    private fetchEthGasPriceEstimate;
    private fetchLegacyGasPriceEstimates;
    private getCurrentNetworkEIP1559Compatibility;
    private getCurrentAccountEIP1559Compatibility;
    private getCurrentNetworkLegacyGasAPICompatibility;
    private pollingManager;
    constructor({ config, state, idleTimeTracker, getNetworkIdentifier, getProvider, fetchGasEstimates, fetchEthGasPriceEstimate, fetchLegacyGasPriceEstimates, fetchGasEstimatesViaEthFeeHistory, getCurrentNetworkLegacyGasAPICompatibility, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, onNetworkStateChange, }: IGasFeeControllerOptions);
    onNetworkStateChange(): Promise<void>;
    resetPolling(): Promise<void>;
    fetchGasFeeEstimates(): Promise<EthereumGasState>;
    getGasFeeEstimatesAndStartPolling(): Promise<void>;
    disconnectPoller(): void;
    /**
     * Prepare to discard this controller.
     *
     * This stops any active polling.
     */
    destroy(): void;
    stopPolling(): void;
    /**
     * Gets and sets gasFeeEstimates in state
     *
     * @returns GasFeeEstimates
     */
    private _fetchGasFeeEstimateData;
    private _startPolling;
    private resetState;
    private getEIP1559Compatibility;
    private getTimeEstimate;
}
export {};
