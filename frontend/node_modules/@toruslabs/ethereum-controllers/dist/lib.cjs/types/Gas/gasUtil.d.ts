import { SafeEventEmitterProvider } from "@web3auth/auth";
import { EthereumGasFeeEstimates, EthereumLegacyGasFeeEstimates, GasFeeTimeBounds } from "./IGasFeeController";
export declare function normalizeGWEIDecimalNumbers(n: string | number): number | BigNumber;
export declare function fetchGasEstimates(url: string): Promise<EthereumGasFeeEstimates>;
export interface FeeHistoryResponse {
    baseFeePerGas: string[];
    gasUsedRatio: string[];
    oldestBlock: string;
    reward: string[][];
}
export declare function fetchGasEstimatesViaEthFeeHistory(provider: SafeEventEmitterProvider): Promise<EthereumGasFeeEstimates>;
/**
 * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
 * high values from that API.
 */
export declare function fetchLegacyGasPriceEstimates(url: string): Promise<EthereumLegacyGasFeeEstimates>;
export declare function fetchEthGasPriceEstimate(provider: SafeEventEmitterProvider): Promise<{
    gasPrice: string;
}>;
export declare function calculateTimeEstimate(maxPriorityFeePerGas: string, maxFeePerGas: string, gasFeeEstimates: EthereumGasFeeEstimates): GasFeeTimeBounds;
