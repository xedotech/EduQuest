import { BaseCurrencyController, BaseCurrencyControllerConfig, BaseCurrencyControllerState, ICurrencyController, IdleTimeTracker } from "@toruslabs/base-controllers";
import { EthereumNetworkState } from "../utils/interfaces";
export interface IEthereumCurrencyControllerState extends BaseCurrencyControllerState {
    commonDenomination: string;
    commonDenominatorPrice: number;
}
export declare class CurrencyController extends BaseCurrencyController<BaseCurrencyControllerConfig, IEthereumCurrencyControllerState> implements ICurrencyController<BaseCurrencyControllerConfig, IEthereumCurrencyControllerState> {
    private pollingManager;
    constructor({ config, state, idleTimeTracker, onNetworkChanged, }: {
        config: Partial<BaseCurrencyControllerConfig>;
        state: Partial<IEthereumCurrencyControllerState>;
        idleTimeTracker: IdleTimeTracker;
        onNetworkChanged: (listener: (networkState: EthereumNetworkState) => void) => void;
    });
    setCommonDenomination(commonDenomination: string): void;
    getCommonDenomination(): string;
    setCommonDenominatorPrice(commonDenominatorPrice: number): void;
    getCommonDenominatorPrice(): number;
    /**
     * Creates a new poll, using setInterval, to periodically call updateConversionRate. The id of the interval is
     * stored at the controller's conversionInterval property. If it is called and such an id already exists, the
     * previous interval is clear and a new one is created.
     */
    scheduleConversionInterval(): Promise<void>;
    /**
     * Updates the conversionRate and conversionDate properties associated with the currentCurrency. Updated info is
     * fetched from an external API
     */
    updateConversionRate(): Promise<void>;
    retrieveConversionRate(fromCurrency: string, toCurrency: string, commonDenomination: string): Promise<Record<string, string>>;
}
