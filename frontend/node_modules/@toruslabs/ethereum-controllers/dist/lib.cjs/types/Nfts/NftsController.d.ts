import { BaseController, IdleTimeTracker, INftsController, PreferencesState } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@web3auth/auth";
import { ExtendedAddressPreferences } from "../Preferences/IPreferencesController";
import { PreferencesController } from "../Preferences/PreferencesController";
import { EthereumNetworkState } from "../utils/interfaces";
import { EthereumNftInfo as CustomNftInfo, EthereumNftsControllerConfig, EthereumNftsControllerState } from "./INftsController";
export interface INftsControllerOptions {
    config?: Partial<EthereumNftsControllerConfig>;
    state?: Partial<EthereumNftsControllerState>;
    provider: SafeEventEmitterProvider;
    idleTimeTracker: IdleTimeTracker;
    getCustomNfts?: PreferencesController["getCustomNfts"];
    getSimpleHashNfts: PreferencesController["getSimpleHashNfts"];
    onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;
    onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
}
export declare class NftsController extends BaseController<EthereumNftsControllerConfig, EthereumNftsControllerState> implements INftsController<EthereumNftsControllerConfig, EthereumNftsControllerState> {
    name: string;
    private provider;
    private ethersProvider;
    private getCustomNfts;
    private getSimpleHashNfts;
    private pollingManager;
    constructor({ config, state, provider, getCustomNfts, getSimpleHashNfts, onPreferencesStateChange, onNetworkStateChange, idleTimeTracker, }: INftsControllerOptions);
    get userSelectedAddress(): string;
    get userNfts(): CustomNftInfo[];
    startNftDetection(selectedAddress: string): void;
    /**
     * Restart nft detection polling period and call detectNewNfts
     * in case of address change or user session initialization.
     *
     */
    restartNftDetection(): void;
    detectNewNfts(): void;
    refreshNftBalances(skipCache?: boolean): Promise<void>;
    getNftBalancesUsingHandler(customNfts: CustomNftInfo[]): Promise<void>;
}
