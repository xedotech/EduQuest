import { BaseController, BaseTokenRatesControllerConfig, BaseTokenRatesControllerState, IdleTimeTracker, ITokenRatesController, PreferencesState } from "@toruslabs/base-controllers";
import { ExtendedAddressPreferences } from "../Preferences/IPreferencesController";
import { CustomTokenInfo, EthereumNetworkState } from "../utils/interfaces";
import { EthereumTokensControllerState } from "./ITokensController";
export interface CoinGeckoResponse {
    [address: string]: {
        [currency: string]: number;
    };
}
export declare const DEFAULT_CURRENCY = "eth";
export interface ITokenRatesControllerState extends BaseTokenRatesControllerState {
}
export interface ITokenRatesControllerConfig extends BaseTokenRatesControllerConfig {
    tokens: CustomTokenInfo[];
}
export interface TokenRatesControllerOptions {
    config: Partial<ITokenRatesControllerConfig>;
    state: Partial<ITokenRatesControllerState>;
    idleTimeTracker: IdleTimeTracker;
    onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;
    onTokensStateChange: (listener: (tokensState: EthereumTokensControllerState) => void) => void;
    onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
}
export declare class TokenRatesController extends BaseController<ITokenRatesControllerConfig, ITokenRatesControllerState> implements ITokenRatesController<ITokenRatesControllerConfig, ITokenRatesControllerState> {
    private pollingManager;
    constructor({ config, state, idleTimeTracker, onPreferencesStateChange, onNetworkStateChange, onTokensStateChange }: TokenRatesControllerOptions);
    /**
     * Creates a new poll, using setInterval, to periodically call updateConversionRate. The id of the interval is
     * stored at the controller's conversionInterval property. If it is called and such an id already exists, the
     * previous interval is clear and a new one is created.
     */
    scheduleConversionInterval(): Promise<void>;
    updateExchangeRates(): Promise<void>;
    private fetchExchangeRates;
}
