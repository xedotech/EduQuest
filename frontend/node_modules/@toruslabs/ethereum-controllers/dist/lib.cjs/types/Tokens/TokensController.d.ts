import { BaseController, IdleTimeTracker, ITokensController, PreferencesState, UserAddress } from "@toruslabs/base-controllers";
import { SafeEventEmitterProvider } from "@web3auth/auth";
import { NetworkController } from "../Network/NetworkController";
import { ExtendedAddressPreferences } from "../Preferences/IPreferencesController";
import { PreferencesController } from "../Preferences/PreferencesController";
import { CustomTokenInfo, EthereumNetworkState } from "../utils/interfaces";
import { EthereumTokensControllerConfig, EthereumTokensControllerState } from "./ITokensController";
export interface ITokensControllerOptions {
    config?: Partial<EthereumTokensControllerConfig>;
    state?: Partial<EthereumTokensControllerState>;
    provider: SafeEventEmitterProvider;
    idleTimeTracker: IdleTimeTracker;
    getCustomTokens?: PreferencesController["getCustomTokens"];
    getEtherScanTokens: PreferencesController["getEtherScanTokens"];
    getProviderConfig: NetworkController["getProviderConfig"];
    onPreferencesStateChange: (listener: (preferencesState: PreferencesState<ExtendedAddressPreferences>) => void) => void;
    onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
}
export declare class TokensController extends BaseController<EthereumTokensControllerConfig, EthereumTokensControllerState> implements ITokensController<EthereumTokensControllerConfig, EthereumTokensControllerState, CustomTokenInfo> {
    name: string;
    private provider;
    private ethersProvider;
    private pollingManager;
    private getProviderConfig;
    private getCustomTokens;
    private getEtherScanTokens;
    constructor({ config, state, provider, idleTimeTracker, getCustomTokens, getEtherScanTokens, getProviderConfig, onPreferencesStateChange, onNetworkStateChange, }: ITokensControllerOptions);
    get userSelectedAddress(): UserAddress;
    get userTokens(): CustomTokenInfo[];
    startTokenDetection(selectedAddress: UserAddress): void;
    /**
     * Restart token detection polling period and call detectNewTokens
     * in case of address change or user session initialization.
     *
     */
    restartTokenDetection(): void;
    detectNewTokens(): void;
    refreshTokenBalances(skipCache?: boolean): Promise<void>;
    getTokenBalancesUsingHandler(customTokens: CustomTokenInfo[]): Promise<CustomTokenInfo[]>;
}
