import { type BaseConfig, BaseController, type BaseState, TransactionStatus } from "@toruslabs/base-controllers";
import { JRPCMiddleware, type JRPCRequest, type JRPCResponse, type SafeEventEmitterProvider } from "@web3auth/auth";
import { type BundlerClient, type SmartAccount } from "viem/account-abstraction";
import { type NetworkController } from "../Network/NetworkController";
import type { BundlerConfig, EthereumNetworkState, ISmartAccount, PaymasterConfig, SignTypedDataMessageV4, SmartAccountType, TransactionParams, UserOperationGas } from "../utils/interfaces";
export interface UserOperationMeta {
    transactionParams: TransactionParams;
    userOpHash?: string;
    status: TransactionStatus;
    chainId: string;
    signature?: string;
    createdAt: Date;
    receipt?: {
        transactionHash: string;
        nonce: string;
        gasUsed: string;
        effectiveGasPrice: string;
        type: string;
        reason?: string;
    };
}
export interface AccountAbstractionControllerState extends BaseState {
    smartAccountAddress: string;
    userOperations: Record<string, UserOperationMeta>;
}
export interface AccountAbstractionControllerConfig extends BaseConfig {
    preferredAccountProvider?: SmartAccountType;
    paymasterConfig?: PaymasterConfig;
    bundlerConfig?: BundlerConfig;
    smartAccountInit?: ISmartAccount;
    chainId?: string;
}
export declare const eoaInterceptorMiddleware: (eoaAddress: string) => (req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, next: () => void, end: () => void) => void;
export declare function eoaProviderAsMiddleware(provider: SafeEventEmitterProvider): JRPCMiddleware<unknown, unknown>;
export declare class AccountAbstractionController extends BaseController<AccountAbstractionControllerConfig, AccountAbstractionControllerState> {
    private _smartAccount;
    private _publicClient;
    private _bundlerClient;
    private _paymasterClient;
    private getProviderConfig;
    constructor({ config, state, getProviderConfig, onNetworkStateChange, }: {
        config: AccountAbstractionControllerConfig;
        state: AccountAbstractionControllerState;
        getProviderConfig: NetworkController["getProviderConfig"];
        onNetworkStateChange: (listener: (networkState: EthereumNetworkState) => void) => void;
    });
    get smartAccount(): SmartAccount | null;
    get bundlerClient(): BundlerClient | null;
    setupProvider(eoaProvider: SafeEventEmitterProvider, eoaAddress: string): Promise<void>;
    sendTransaction(id: string, tx: TransactionParams, address: string): Promise<string>;
    signTransaction(id: string, tx: TransactionParams, address: string): Promise<string>;
    estimateGas(txParams: TransactionParams, address: string): Promise<UserOperationGas>;
    signMessage(message: string, address: string): Promise<string>;
    signPersonalMessage(message: string, address: string): Promise<string>;
    signTypedData(data: SignTypedDataMessageV4 & {
        primaryType: string;
    }, address: string): Promise<string>;
    private updateUserOpMeta;
}
