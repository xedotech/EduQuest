'use strict';

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var baseControllers = require('@toruslabs/base-controllers');
var auth = require('@web3auth/auth');
var asyncMutex = require('async-mutex');
var log = require('loglevel');
var constants = require('../utils/constants.js');
var createEthereumMiddleware = require('./createEthereumMiddleware.js');
var createJsonRpcClient = require('./createJsonRpcClient.js');

const _excluded = ["chainId", "rpcTarget"];
class NetworkController extends baseControllers.BaseController {
  constructor({
    config,
    state,
    idleTimeTracker,
    analytics
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "name", "NetworkController");
    _defineProperty(this, "providerProxy", void 0);
    _defineProperty(this, "blockTrackerProxy", void 0);
    _defineProperty(this, "mutex", new asyncMutex.Mutex());
    _defineProperty(this, "provider", null);
    _defineProperty(this, "blockTracker", null);
    _defineProperty(this, "baseProviderHandlers", void 0);
    _defineProperty(this, "idleTimeTracker", void 0);
    _defineProperty(this, "analytics", void 0);
    this.defaultState = {
      chainId: "loading",
      properties: {
        EIPS_1559: undefined
      },
      providerConfig: constants.SUPPORTED_NETWORKS[constants.MAINNET_CHAIN_ID]
    };
    this.analytics = analytics;
    // when a new network is set,
    // we set to loading first and
    // then when connection succeeds,
    // we update the network
    this.initialize();
    this.idleTimeTracker = idleTimeTracker;
  }
  getNetworkIdentifier() {
    return this.state.chainId;
  }
  getNetworkRPCUrl() {
    return this.state.providerConfig.rpcTarget;
  }
  /**
   * Called by orchestrator once while initializing the class
   * @param providerHandlers - JRPC handlers for provider
   * @returns - provider - Returns the providerProxy
   */
  initializeProvider(providerHandlers) {
    this.baseProviderHandlers = providerHandlers;
    this.configureProvider();
    this.lookupNetwork(); // Not awaiting this, because we don't want to block the initialization
    return this.providerProxy;
  }
  getProvider() {
    return this.providerProxy;
  }
  getBlockTracker() {
    return this.blockTrackerProxy;
  }
  getProviderConfig() {
    return this.state.providerConfig;
  }
  setProviderConfig(config) {
    this.update({
      providerConfig: _objectSpread({}, config)
    });
    this.refreshNetwork();
  }
  async getEIP1559Compatibility() {
    const {
      EIPS_1559
    } = this.state.properties;
    // log.info('checking eip 1559 compatibility')
    if (EIPS_1559 !== undefined) {
      return EIPS_1559;
    }
    const latestBlock = await this.blockTracker.getLatestBlock();
    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;
    this.update({
      properties: {
        EIPS_1559: supportsEIP1559
      }
    });
    return supportsEIP1559;
  }
  /**
   * Refreshes the current network code
   */
  async lookupNetwork() {
    const {
      chainId,
      rpcTarget
    } = this.getProviderConfig();
    if (!chainId || !rpcTarget || !this.provider) {
      this.update({
        chainId: "loading",
        properties: {}
      });
      return;
    }
    const releaseLock = await this.mutex.acquire();
    try {
      // use eth_chainId
      const [networkChainId] = await Promise.all([this.provider.request({
        method: "eth_chainId"
      }), this.getEIP1559Compatibility()]);
      log.info("network fetched chain id", networkChainId);
      // update chain ID
      this.update({
        chainId: networkChainId
      });
      this.emit("networkDidChange");
    } catch {
      this.update({
        chainId: "loading"
      });
    } finally {
      releaseLock();
    }
  }
  configureProvider() {
    const _this$getProviderConf = this.getProviderConfig(),
      {
        chainId,
        rpcTarget
      } = _this$getProviderConf,
      rest = _objectWithoutProperties(_this$getProviderConf, _excluded);
    if (!chainId || !rpcTarget) {
      throw new Error("chainId and rpcTarget must be provider in providerConfig");
    }
    this.configureStandardProvider(_objectSpread({
      chainId,
      rpcTarget
    }, rest));
  }
  setNetworkClient({
    networkMiddleware,
    blockTracker
  }) {
    const ethereumMiddleware = createEthereumMiddleware.createEthereumMiddleware(this.baseProviderHandlers, this.getProviderConfig(), this.analytics);
    const engine = new auth.JRPCEngine();
    engine.push(baseControllers.createAnalyticsMiddleware({
      providerConfig: this.getProviderConfig(),
      analytics: this.analytics
    }));
    engine.push(ethereumMiddleware);
    engine.push(networkMiddleware);
    const provider = auth.providerFromEngine(engine);
    this.setProvider({
      provider,
      blockTracker
    });
  }
  setProvider({
    provider,
    blockTracker
  }) {
    if (this.providerProxy) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this.providerProxy.setTarget(provider);
    } else {
      this.providerProxy = baseControllers.createSwappableProxy(provider);
    }
    if (this.blockTrackerProxy) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this.blockTrackerProxy.setTarget(blockTracker);
    } else {
      this.blockTrackerProxy = baseControllers.createEventEmitterProxy(blockTracker, {
        eventFilter: "skipInternal"
      });
    }
    // set new provider and blockTracker
    this.provider = provider;
    provider.setMaxListeners(10);
    this.blockTracker = blockTracker;
  }
  configureStandardProvider(providerConfig) {
    const networkClient = createJsonRpcClient.createJsonRpcClient(providerConfig, this.config, this.idleTimeTracker, this.analytics);
    log.info("networkClient", networkClient);
    this.setNetworkClient(networkClient);
  }
  refreshNetwork() {
    this.update({
      chainId: "loading",
      properties: {}
    });
    this.configureProvider();
    this.lookupNetwork();
  }
}

exports.NetworkController = NetworkController;
