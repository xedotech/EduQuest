'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var baseControllers = require('@toruslabs/base-controllers');
var auth = require('@web3auth/auth');
var PollingBlockTracker = require('../Block/PollingBlockTracker.js');
var cacheIdentifier = require('./cacheIdentifier.js');

function createChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "eth_chainId") {
      res.result = chainId;
      return end();
    }
    if (req.method === "net_version") {
      // convert to decimal
      res.result = Number.parseInt(chainId, 16).toString(10);
      return end();
    }
    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "eth_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createJsonRpcClient(providerConfig, networkConfig, idleTimeTracker, analytics) {
  const {
    chainId,
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = baseControllers.createFetchMiddleware({
    rpcTarget,
    providerConfig,
    analytics
  });
  const blockProvider = auth.providerFromMiddleware(fetchMiddleware);
  const blockTracker = new PollingBlockTracker.PollingBlockTracker({
    config: _objectSpread(_objectSpread({}, networkConfig), {}, {
      provider: blockProvider
    }),
    state: {},
    idleTimeTracker
  });
  const networkMiddleware = auth.mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig),
  // No need for the following middlewares for web because all browser sessions are quite short lived and each session is limited to scope of a window/tab
  // createBlockRefRewriteMiddleware({ blockTracker }),
  // createBlockCacheMiddleware({ blockTracker }),
  baseControllers.createInflightCacheMiddleware({
    cacheIdentifierForRequest: cacheIdentifier.cacheIdentifierForRequest
  }),
  // createBlockTrackerInspectorMiddleware({ blockTracker }),
  fetchMiddleware]);
  return {
    networkMiddleware,
    blockTracker
  };
}

exports.createChainIdMiddleware = createChainIdMiddleware;
exports.createJsonRpcClient = createJsonRpcClient;
exports.createProviderConfigMiddleware = createProviderConfigMiddleware;
