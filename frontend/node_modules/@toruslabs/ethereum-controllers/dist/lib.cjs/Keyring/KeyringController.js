'use strict';

var util = require('@ethereumjs/util');
var baseControllers = require('@toruslabs/base-controllers');
var ethers = require('ethers');

class KeyringController extends baseControllers.BaseKeyringController {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
    this.defaultState = {
      wallets: []
    };
    this.initialize();
  }
  async signTransaction(tx, address) {
    const wallet = this._getWalletForAccount(address);
    const privKey = new ethers.SigningKey(util.addHexPrefix(wallet.privateKey));
    const localTx = tx;
    localTx.signature = privKey.sign(localTx.unsignedHash);
    return localTx;
  }
  getAccounts() {
    return this.state.wallets.map(w => w.publicKey);
  }
  importAccount(accountPrivateKey) {
    const hexPrivateKey = accountPrivateKey.padStart(64, "0");
    const bufferPrivKey = Buffer.from(hexPrivateKey, "hex");
    const publicKey = util.bytesToHex(util.privateToPublic(bufferPrivKey));
    const address = util.toChecksumAddress(util.bytesToHex(util.privateToAddress(bufferPrivKey)));
    const existingWallet = this.state.wallets.find(w => w.address === address);
    if (existingWallet) return existingWallet.address;
    this.update({
      wallets: [...this.state.wallets, {
        publicKey,
        privateKey: accountPrivateKey,
        address
      }]
    });
    return address;
  }
  removeAccount(address) {
    const newWallets = [...this.state.wallets];
    const idx = newWallets.findIndex(w => w.address === address);
    if (idx !== -1) {
      newWallets.splice(idx, 1);
      this.update({
        wallets: newWallets
      });
    }
  }
  getBufferPrivateKey(privateKey) {
    const stripped = util.stripHexPrefix(privateKey);
    return Buffer.from(stripped, "hex");
  }
  // For eth_sign, we need to sign arbitrary data:
  async signMessage(data, address) {
    const wallet = this._getWalletForAccount(address);
    const privKey = this.getBufferPrivateKey(wallet.privateKey);
    const messageSig = util.ecsign(Buffer.from(util.stripHexPrefix(data), "hex"), privKey);
    const sig = baseControllers.concatSig(Buffer.from(util.bigIntToBytes(messageSig.v)), Buffer.from(messageSig.r), Buffer.from(messageSig.s));
    return sig;
  }
  async signPersonalMessage(data, address) {
    const wallet = this._getWalletForAccount(address);
    const privKey = new ethers.SigningKey(util.addHexPrefix(wallet.privateKey));
    // we need to check if the data is hex or not
    // For historical reasons, you must submit the message to sign in hex-encoded UTF-8.
    // https://docs.metamask.io/wallet/how-to/sign-data/#use-personal_sign
    const message = util.isHexString(data) ? Buffer.from(util.stripHexPrefix(data), "hex") : Buffer.from(data);
    const signature = privKey.sign(ethers.hashMessage(message)).serialized;
    return signature;
  }
  // personal_signTypedData, signs data along with the schema
  async signTypedData(typedData, address) {
    const wallet = this._getWalletForAccount(address);
    const privKey = new ethers.SigningKey(util.addHexPrefix(wallet.privateKey));
    delete typedData.types.EIP712Domain;
    const signature = privKey.sign(ethers.TypedDataEncoder.hash(typedData.domain, typedData.types, typedData.message)).serialized;
    return signature;
  }
  _getWalletForAccount(account) {
    const address = account.toLowerCase();
    const wallet = this.state.wallets.find(w => w.address.toLowerCase() === address);
    if (!wallet) throw new Error("Torus Keyring - Unable to find matching address.");
    return wallet;
  }
}

exports.KeyringController = KeyringController;
