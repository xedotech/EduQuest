'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var delegationToolkit = require('@metamask/delegation-toolkit');
var constants = require('../../utils/constants.js');

function isImplementationHybrid(implementation) {
  return implementation === delegationToolkit.Implementation.Hybrid;
}
class MetamaskSmartAccount {
  constructor(options) {
    _defineProperty(this, "name", constants.SMART_ACCOUNT.METAMASK);
    _defineProperty(this, "options", void 0);
    this.options = options;
  }
  async getSmartAccount(input) {
    var _this$options, _this$options2, _this$options3, _this$options4, _this$options5, _this$options6, _this$options7, _this$options$multiSi, _this$options8, _this$options9, _this$options$deployS, _this$options10, _this$options$impleme, _this$options11;
    const hybridSignatory = {
      walletClient: input.walletClient,
      webAuthnAccount: (_this$options = this.options) === null || _this$options === void 0 || (_this$options = _this$options.hybridParams) === null || _this$options === void 0 ? void 0 : _this$options.webAuthnAccount,
      keyId: (_this$options2 = this.options) === null || _this$options2 === void 0 || (_this$options2 = _this$options2.hybridParams) === null || _this$options2 === void 0 ? void 0 : _this$options2.keyId
    };
    const multiSigSignatory = [{
      walletClient: input.walletClient
    }, ...(((_this$options3 = this.options) === null || _this$options3 === void 0 || (_this$options3 = _this$options3.multiSigParams) === null || _this$options3 === void 0 ? void 0 : _this$options3.additionalSignerWalletClients) || []).map(walletClient => ({
      walletClient
    }))];
    const [eoaAddress] = await input.walletClient.getAddresses();
    const hybridDeployParams = [eoaAddress, [...(((_this$options4 = this.options) === null || _this$options4 === void 0 || (_this$options4 = _this$options4.hybridParams) === null || _this$options4 === void 0 ? void 0 : _this$options4.p256KeyIds) || [])], [...(((_this$options5 = this.options) === null || _this$options5 === void 0 || (_this$options5 = _this$options5.hybridParams) === null || _this$options5 === void 0 ? void 0 : _this$options5.p256XValues) || [])], [...(((_this$options6 = this.options) === null || _this$options6 === void 0 || (_this$options6 = _this$options6.hybridParams) === null || _this$options6 === void 0 ? void 0 : _this$options6.p256YValues) || [])]];
    const multiSigDeployParams = [[eoaAddress, ...(((_this$options7 = this.options) === null || _this$options7 === void 0 || (_this$options7 = _this$options7.multiSigParams) === null || _this$options7 === void 0 ? void 0 : _this$options7.additionalSignerAddresses) || [])], (_this$options$multiSi = (_this$options8 = this.options) === null || _this$options8 === void 0 || (_this$options8 = _this$options8.multiSigParams) === null || _this$options8 === void 0 ? void 0 : _this$options8.threshold) !== null && _this$options$multiSi !== void 0 ? _this$options$multiSi : BigInt(1 + (((_this$options9 = this.options) === null || _this$options9 === void 0 || (_this$options9 = _this$options9.multiSigParams) === null || _this$options9 === void 0 || (_this$options9 = _this$options9.additionalSignerWalletClients) === null || _this$options9 === void 0 ? void 0 : _this$options9.length) || 0))];
    const baseParams = {
      client: input.client,
      deploySalt: (_this$options$deployS = (_this$options10 = this.options) === null || _this$options10 === void 0 ? void 0 : _this$options10.deploySalt) !== null && _this$options$deployS !== void 0 ? _this$options$deployS : "0x0"
    };
    const implementation = (_this$options$impleme = (_this$options11 = this.options) === null || _this$options11 === void 0 ? void 0 : _this$options11.implementation) !== null && _this$options$impleme !== void 0 ? _this$options$impleme : delegationToolkit.Implementation.Hybrid;
    if (isImplementationHybrid(implementation)) {
      const params = _objectSpread(_objectSpread({}, baseParams), {}, {
        implementation,
        deployParams: hybridDeployParams,
        signatory: hybridSignatory
      });
      return delegationToolkit.toMetaMaskSmartAccount(params);
    } else {
      const params = _objectSpread(_objectSpread({}, baseParams), {}, {
        implementation,
        deployParams: multiSigDeployParams,
        signatory: multiSigSignatory
      });
      return delegationToolkit.toMetaMaskSmartAccount(params);
    }
  }
}

exports.MetamaskSmartAccount = MetamaskSmartAccount;
