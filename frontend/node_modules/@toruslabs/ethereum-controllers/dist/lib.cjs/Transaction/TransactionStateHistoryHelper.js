'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var baseControllers = require('@toruslabs/base-controllers');
var jsonDiffer = require('fast-json-patch');

/**
  Generates an array of history objects sense the previous state.
  The object has the keys
    op (the operation performed),
    path (the key and if a nested object then each key will be seperated with a `/`)
    value
  with the first entry having the note and a timestamp when the change took place
*/
function generateHistoryEntry(previousState, newState, note) {
  const entry = jsonDiffer.compare(previousState, newState);
  // Add a note to the first op, since it breaks if we append it to the entry
  if (entry[0]) {
    if (note) {
      entry[0].note = note;
    }
    entry[0].timestamp = Date.now();
  }
  return entry;
}
/**
  Recovers previous txMeta state obj
*/
function replayHistory(_shortHistory) {
  const shortHistory = baseControllers.cloneDeep(_shortHistory);
  return shortHistory.reduce((val, entry) => jsonDiffer.applyPatch(val, entry).newDocument);
}
function snapshotFromTxMeta(txMeta) {
  const shallow = _objectSpread({}, txMeta);
  delete shallow.history;
  return baseControllers.cloneDeep(shallow);
}

exports.generateHistoryEntry = generateHistoryEntry;
exports.replayHistory = replayHistory;
exports.snapshotFromTxMeta = snapshotFromTxMeta;
