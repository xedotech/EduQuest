import { TORUS_NETWORK_TYPE } from "@toruslabs/constants";
import BN from "bn.js";
import { curve, ec as EC } from "elliptic";
import { EciesHex, GetOrSetNonceResult, KeyType, MetadataParams, NonceMetadataParams } from "../interfaces";
export declare const getSecpKeyFromEd25519: (ed25519Scalar: BN) => {
    scalar: BN;
    point: curve.base.BasePoint;
};
export declare function convertMetadataToNonce(params: {
    message?: string;
}): BN;
export declare function decryptNodeData(eciesData: EciesHex, ciphertextHex: string, privKey: Buffer): Promise<Buffer>;
export declare function decryptNodeDataWithPadding(eciesData: EciesHex, ciphertextHex: string, privKey: Buffer): Promise<Buffer>;
export declare function generateMetadataParams(ecCurve: EC, serverTimeOffset: number, message: string, privateKey: BN): MetadataParams;
export declare function getMetadata(legacyMetadataHost: string, data: Omit<MetadataParams, "set_data" | "signature">, options?: RequestInit): Promise<BN>;
export declare function generateNonceMetadataParams(serverTimeOffset: number, operation: string, privateKey: BN, keyType: KeyType, nonce?: BN, seed?: string): NonceMetadataParams;
export declare function getOrSetNonce(metadataHost: string, ecCurve: EC, serverTimeOffset: number, X: string, Y: string, privKey?: BN, getOnly?: boolean, isLegacyMetadata?: boolean, nonce?: BN, keyType?: KeyType, seed?: string): Promise<GetOrSetNonceResult>;
export declare function getNonce(legacyMetadataHost: string, ecCurve: EC, serverTimeOffset: number, X: string, Y: string, privKey?: BN): Promise<GetOrSetNonceResult>;
export declare const decryptSeedData: (seedBase64: string, finalUserKey: BN) => Promise<Buffer>;
export declare function getOrSetSapphireMetadataNonce(network: TORUS_NETWORK_TYPE, X: string, Y: string, serverTimeOffset?: number, privKey?: BN): Promise<GetOrSetNonceResult>;
