import { INodePub, TORUS_NETWORK_TYPE } from "@toruslabs/constants";
import { ec } from "elliptic";
import { ImportedShare, KeyLookupResult, KeyType, TorusKey, VerifierLookupResult, VerifierParams } from "../interfaces";
import { TorusUtilsExtraParams } from "../TorusUtilsExtraParams";
export declare const GetPubKeyOrKeyAssign: (params: {
    endpoints: string[];
    network: TORUS_NETWORK_TYPE;
    verifier: string;
    verifierId: string;
    keyType: KeyType;
    extendedVerifierId?: string;
}) => Promise<KeyLookupResult>;
export declare const VerifierLookupRequest: (params: {
    endpoints: string[];
    verifier: string;
    verifierId: string;
    keyType: KeyType;
}) => Promise<VerifierLookupResult>;
export declare function retrieveOrImportShare(params: {
    legacyMetadataHost: string;
    serverTimeOffset: number;
    enableOneKey: boolean;
    ecCurve: ec;
    keyType: KeyType;
    allowHost: string;
    network: TORUS_NETWORK_TYPE;
    clientId: string;
    endpoints: string[];
    indexes: number[];
    verifier: string;
    verifierParams: VerifierParams;
    idToken: string;
    useDkg: boolean;
    overrideExistingKey: boolean;
    nodePubkeys: INodePub[];
    extraParams: TorusUtilsExtraParams;
    newImportedShares?: ImportedShare[];
    checkCommitment?: boolean;
}): Promise<TorusKey>;
