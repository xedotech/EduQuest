import { JRPCResponse } from "@toruslabs/constants";
import { Ecies } from "@toruslabs/eccrypto";
import { ec as EC } from "elliptic";
import { CommitmentRequestResult, EciesHex, GetORSetKeyResponse, KeyType, VerifierLookupResponse } from "../interfaces";
export declare function keccak256(a: Buffer): string;
export declare const generatePrivateKey: (ecCurve: EC, buf: typeof Buffer) => Buffer;
export declare const getKeyCurve: (keyType: KeyType) => EC;
export declare const normalizeKeysResult: (result: GetORSetKeyResponse) => Pick<GetORSetKeyResponse, "keys" | "is_new_key">;
export declare const normalizeLookUpResult: (result: VerifierLookupResponse) => Pick<VerifierLookupResponse, "keys">;
export declare const kCombinations: (s: number | number[], k: number) => number[][];
export declare const thresholdSame: <T>(arr: T[], t: number) => T | undefined;
export declare function encParamsBufToHex(encParams: Ecies): EciesHex;
export declare function encParamsHexToBuf(eciesData: Omit<EciesHex, "ciphertext">): Omit<Ecies, "ciphertext">;
export declare function getProxyCoordinatorEndpointIndex(endpoints: string[], verifier: string, verifierId: string): number;
export declare function calculateMedian(arr: number[]): number;
export declare function waitFor(milliseconds: number): Promise<unknown>;
export declare function retryCommitment(executionPromise: () => Promise<JRPCResponse<CommitmentRequestResult>>, maxRetries: number): Promise<JRPCResponse<CommitmentRequestResult>>;
