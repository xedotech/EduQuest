import { INodePub } from "@toruslabs/constants";
import BN from "bn.js";
import { curve, ec as EC } from "elliptic";
import { ImportedShare, KeyType, PrivateKeyData } from "../interfaces";
export declare function stripHexPrefix(str: string): string;
export declare function toChecksumAddress(hexAddress: string): string;
/** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */
export declare function getEd25519ExtendedPublicKey(keyBuffer: Buffer): {
    scalar: BN;
    point: curve.base.BasePoint;
};
export declare function encodeEd25519Point(point: curve.base.BasePoint): Buffer;
export declare const generateEd25519KeyData: (ed25519Seed: Buffer) => Promise<PrivateKeyData>;
export declare const generateSecp256k1KeyData: (scalarBuffer: Buffer) => Promise<PrivateKeyData>;
export declare function generateAddressFromPrivKey(keyType: KeyType, privateKey: BN): string;
export declare function generateAddressFromPubKey(keyType: KeyType, publicKeyX: BN, publicKeyY: BN): string;
export declare function getPostboxKeyFrom1OutOf1(ecCurve: EC, privKey: string, nonce: string): string;
export declare function derivePubKey(ecCurve: EC, sk: BN): curve.base.BasePoint;
export declare const getEncryptionEC: () => EC;
export declare const generateShares: (ecCurve: EC, keyType: KeyType, serverTimeOffset: number, nodeIndexes: number[], nodePubkeys: INodePub[], privKey: Buffer) => Promise<ImportedShare[]>;
