'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var constants = require('@toruslabs/constants');
var eccrypto = require('@toruslabs/eccrypto');
var httpHelpers = require('@toruslabs/http-helpers');
var BN = require('bn.js');
var keccak = require('ethereum-cryptography/keccak');
var stringify = require('json-stable-stringify');
var log = require('loglevel');
var constants$1 = require('../constants.js');
var common = require('./common.js');

const getSecpKeyFromEd25519 = ed25519Scalar => {
  const secp256k1Curve = common.getKeyCurve(constants.KEY_TYPE.SECP256K1);
  const ed25519Key = ed25519Scalar.toString("hex", 64);
  const keyHash = keccak.keccak256(Buffer.from(ed25519Key, "hex"));
  const secpKey = new BN(keyHash).umod(secp256k1Curve.n).toString("hex", 64);
  const bufferKey = Buffer.from(secpKey, "hex");
  const secpKeyPair = secp256k1Curve.keyFromPrivate(bufferKey);
  if (bufferKey.length !== 32) {
    throw new Error(`Key length must be equal to 32. got ${bufferKey.length}`);
  }
  return {
    scalar: secpKeyPair.getPrivate(),
    point: secpKeyPair.getPublic()
  };
};
function convertMetadataToNonce(params) {
  if (!params || !params.message) {
    return new BN(0);
  }
  return new BN(params.message, 16);
}
async function decryptNodeData(eciesData, ciphertextHex, privKey) {
  const metadata = common.encParamsHexToBuf(eciesData);
  const decryptedSigBuffer = await eccrypto.decrypt(privKey, _objectSpread(_objectSpread({}, metadata), {}, {
    ciphertext: Buffer.from(ciphertextHex, "hex")
  }));
  return decryptedSigBuffer;
}
async function decryptNodeDataWithPadding(eciesData, ciphertextHex, privKey) {
  const metadata = common.encParamsHexToBuf(eciesData);
  try {
    const decryptedSigBuffer = await eccrypto.decrypt(privKey, _objectSpread(_objectSpread({}, metadata), {}, {
      ciphertext: Buffer.from(ciphertextHex, "hex")
    }));
    return decryptedSigBuffer;
  } catch (error) {
    // ciphertext can be any length. not just 64. depends on input. we have this for legacy reason
    const ciphertextHexPadding = ciphertextHex.padStart(64, "0");
    log.warn("Failed to decrypt padded share cipher", error);
    // try without cipher text padding
    return eccrypto.decrypt(privKey, _objectSpread(_objectSpread({}, metadata), {}, {
      ciphertext: Buffer.from(ciphertextHexPadding, "hex")
    }));
  }
}
function generateMetadataParams(ecCurve, serverTimeOffset, message, privateKey) {
  const key = ecCurve.keyFromPrivate(privateKey.toString("hex", 64), "hex");
  const setData = {
    data: message,
    timestamp: new BN(~~(serverTimeOffset + Date.now() / 1000)).toString(16)
  };
  const sig = key.sign(common.keccak256(Buffer.from(stringify(setData), "utf8")).slice(2));
  return {
    pub_key_X: key.getPublic().getX().toString("hex"),
    // DO NOT PAD THIS. BACKEND DOESN'T
    pub_key_Y: key.getPublic().getY().toString("hex"),
    // DO NOT PAD THIS. BACKEND DOESN'T
    set_data: setData,
    signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN("").toString(16, 2), "hex").toString("base64")
  };
}
async function getMetadata(legacyMetadataHost, data, options = {}) {
  try {
    const metadataResponse = await httpHelpers.post(`${legacyMetadataHost}/get`, data, options, {
      useAPIKey: true
    });
    if (!metadataResponse || !metadataResponse.message) {
      return new BN(0);
    }
    return new BN(metadataResponse.message, 16); // nonce
  } catch (error) {
    log.error("get metadata error", error);
    return new BN(0);
  }
}
function generateNonceMetadataParams(serverTimeOffset, operation, privateKey, keyType, nonce, seed) {
  // metadata only uses secp for sig validation
  const key = common.getKeyCurve(constants.KEY_TYPE.SECP256K1).keyFromPrivate(privateKey.toString("hex", 64), "hex");
  const setData = {
    operation,
    timestamp: new BN(~~(serverTimeOffset + Date.now() / 1000)).toString(16)
  };
  if (nonce) {
    setData.data = nonce.toString("hex", 64);
  }
  if (seed) {
    setData.seed = seed;
  } else {
    setData.seed = ""; // setting it as empty to keep ordering same while serializing the data on backend.
  }
  const sig = key.sign(common.keccak256(Buffer.from(stringify(setData), "utf8")).slice(2));
  return {
    pub_key_X: key.getPublic().getX().toString("hex", 64),
    pub_key_Y: key.getPublic().getY().toString("hex", 64),
    set_data: setData,
    key_type: keyType,
    signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN("").toString(16, 2), "hex").toString("base64")
  };
}
async function getOrSetNonce(metadataHost, ecCurve, serverTimeOffset, X, Y, privKey, getOnly = false, isLegacyMetadata = true, nonce = new BN(0), keyType = "secp256k1", seed = "") {
  // for legacy metadata
  if (isLegacyMetadata) {
    let data;
    const msg = getOnly ? "getNonce" : "getOrSetNonce";
    if (privKey) {
      data = generateMetadataParams(ecCurve, serverTimeOffset, msg, privKey);
    } else {
      data = {
        pub_key_X: X,
        pub_key_Y: Y,
        set_data: {
          data: msg
        }
      };
    }
    return httpHelpers.post(`${metadataHost}/get_or_set_nonce`, data, undefined, {
      useAPIKey: true
    });
  }
  // for sapphire metadata
  const operation = getOnly ? "getNonce" : "getOrSetNonce";
  if (operation === "getOrSetNonce") {
    if (!privKey) {
      throw new Error("privKey is required while `getOrSetNonce` for non legacy metadata");
    }
    if (nonce.cmp(new BN(0)) === 0) {
      throw new Error("nonce is required while `getOrSetNonce` for non legacy metadata");
    }
    if (keyType === constants.KEY_TYPE.ED25519 && !seed) {
      throw new Error("seed is required while `getOrSetNonce` for non legacy metadata for ed25519 key type");
    }
    const data = generateNonceMetadataParams(serverTimeOffset, operation, privKey, keyType, nonce, seed);
    return httpHelpers.post(`${metadataHost}/get_or_set_nonce`, data, undefined, {
      useAPIKey: true
    });
  }
  const data = {
    pub_key_X: X,
    pub_key_Y: Y,
    set_data: {
      operation
    },
    key_type: keyType
  };
  return httpHelpers.post(`${metadataHost}/get_or_set_nonce`, data, undefined, {
    useAPIKey: true
  });
}
async function getNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey) {
  return getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey, true);
}
const decryptSeedData = async (seedBase64, finalUserKey) => {
  const decryptionKey = getSecpKeyFromEd25519(finalUserKey);
  const seedUtf8 = Buffer.from(seedBase64, "base64").toString("utf-8");
  const seedJson = JSON.parse(seedUtf8);
  const bufferMetadata = _objectSpread(_objectSpread({}, common.encParamsHexToBuf(seedJson.metadata)), {}, {
    mode: "AES256"
  });
  const bufferKey = decryptionKey.scalar.toArrayLike(Buffer, "be", 32);
  const decText = await eccrypto.decrypt(bufferKey, _objectSpread(_objectSpread({}, bufferMetadata), {}, {
    ciphertext: Buffer.from(seedJson.enc_text, "hex")
  }));
  return decText;
};
async function getOrSetSapphireMetadataNonce(network, X, Y, serverTimeOffset, privKey) {
  if (constants.LEGACY_NETWORKS_ROUTE_MAP[network]) {
    throw new Error("getOrSetSapphireMetadataNonce should only be used for sapphire networks");
  }
  let data = {
    pub_key_X: X,
    pub_key_Y: Y,
    key_type: "secp256k1",
    set_data: {
      operation: "getOrSetNonce"
    }
  };
  if (privKey) {
    const key = common.getKeyCurve(constants.KEY_TYPE.SECP256K1).keyFromPrivate(privKey.toString("hex", 64), "hex");
    const setData = {
      operation: "getOrSetNonce",
      timestamp: new BN(~~(serverTimeOffset + Date.now() / 1000)).toString(16)
    };
    const sig = key.sign(common.keccak256(Buffer.from(stringify(setData), "utf8")).slice(2));
    data = _objectSpread(_objectSpread({}, data), {}, {
      set_data: setData,
      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN("").toString(16, 2), "hex").toString("base64")
    });
  }
  const metadataUrl = network === constants.TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET ? constants$1.SAPPHIRE_DEVNET_METADATA_URL : constants$1.SAPPHIRE_METADATA_URL;
  return httpHelpers.post(`${metadataUrl}/get_or_set_nonce`, data, undefined, {
    useAPIKey: true
  });
}

exports.convertMetadataToNonce = convertMetadataToNonce;
exports.decryptNodeData = decryptNodeData;
exports.decryptNodeDataWithPadding = decryptNodeDataWithPadding;
exports.decryptSeedData = decryptSeedData;
exports.generateMetadataParams = generateMetadataParams;
exports.generateNonceMetadataParams = generateNonceMetadataParams;
exports.getMetadata = getMetadata;
exports.getNonce = getNonce;
exports.getOrSetNonce = getOrSetNonce;
exports.getOrSetSapphireMetadataNonce = getOrSetSapphireMetadataNonce;
exports.getSecpKeyFromEd25519 = getSecpKeyFromEd25519;
