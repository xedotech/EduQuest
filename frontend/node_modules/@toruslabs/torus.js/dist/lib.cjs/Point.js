'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var BN = require('bn.js');

class Point {
  constructor(x, y, ecCurve) {
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "ecCurve", void 0);
    this.x = new BN(x, "hex");
    this.y = new BN(y, "hex");
    this.ecCurve = ecCurve;
  }
  encode(enc) {
    switch (enc) {
      case "arr":
        return Buffer.concat([Buffer.from("04", "hex"), Buffer.from(this.x.toString("hex", 64), "hex"), Buffer.from(this.y.toString("hex", 64), "hex")]);
      case "elliptic-compressed":
        {
          const key = this.ecCurve.keyFromPublic({
            x: this.x.toString("hex", 64),
            y: this.y.toString("hex", 64)
          }, "hex");
          return Buffer.from(key.getPublic(true, "hex"));
        }
      default:
        throw new Error("encoding doesn't exist in Point");
    }
  }
}

module.exports = Point;
