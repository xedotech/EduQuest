import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { SESSION_SERVER_API_URL, SESSION_SERVER_SOCKET_URL } from '@toruslabs/constants';
import { sign, getPublic } from '@toruslabs/eccrypto';
import { setLogLevel, post } from '@toruslabs/http-helpers';
import { keccak256, encryptData, decryptData } from '@toruslabs/metadata-helpers';
import { io } from 'socket.io-client';
import log from './log.js';

class SecurePubSub {
  constructor(options = {}) {
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "SOCKET_CONN", null);
    this.options = options;
    this.options.timeout = options.timeout || 600; // 10 mins is default timeout
    this.options.serverUrl = options.serverUrl || SESSION_SERVER_API_URL;
    this.options.socketUrl = options.socketUrl || SESSION_SERVER_SOCKET_URL;
    this.options.enableLogging = options.enableLogging || false;
    this.options.namespace = options.namespace || "";
    this.options.sameIpCheck = options.sameIpCheck || false;
    this.options.sameOriginCheck = options.sameOriginCheck || false;
    if (this.options.enableLogging) log.enableAll();else log.disableAll();
  }
  static setLogLevel(level) {
    log.setLevel(level);
    setLogLevel(level);
  }
  async publish(topic, message) {
    const topicPrivKey = keccak256(Buffer.from(topic, "utf8"));
    const encryptedData = await encryptData(topicPrivKey.toString("hex"), message);
    const signature = await sign(topicPrivKey, keccak256(Buffer.from(encryptedData, "utf8")));
    const fetchBody = {
      key: getPublic(topicPrivKey).toString("hex"),
      // already padded
      data: encryptedData,
      signature: signature.toString("hex"),
      timeout: this.options.timeout,
      namespace: this.options.namespace,
      sameIpCheck: this.options.sameIpCheck,
      sameOriginCheck: this.options.sameOriginCheck
    };
    return post(`${this.options.serverUrl}/channel/set`, fetchBody);
  }
  async subscribe(topic) {
    let isPromisePending = true;
    const topicPrivKey = keccak256(Buffer.from(topic, "utf8"));
    const topicPubKey = getPublic(topicPrivKey).toString("hex"); // already padded
    const currentSocketConnection = this.getSocketConnection();
    if (currentSocketConnection.connected) {
      log.debug("already connected with socket");
      currentSocketConnection.emit("check_auth_status", topicPubKey, {
        namespace: this.options.namespace,
        sameIpCheck: this.options.sameIpCheck,
        sameOriginCheck: this.options.sameOriginCheck
      });
    } else {
      currentSocketConnection.once("connect", () => {
        log.debug("connected with socket");
        currentSocketConnection.emit("check_auth_status", topicPubKey, {
          namespace: this.options.namespace,
          sameIpCheck: this.options.sameIpCheck,
          sameOriginCheck: this.options.sameOriginCheck
        });
      });
    }
    const reconnect = () => {
      currentSocketConnection.once("connect", async () => {
        log.debug("connected with socket using reconnect");
        if (isPromisePending) currentSocketConnection.emit("check_auth_status", topicPubKey, {
          namespace: this.options.namespace,
          sameIpCheck: this.options.sameIpCheck,
          sameOriginCheck: this.options.sameOriginCheck
        });
      });
    };
    const visibilityListener = () => {
      if (!isPromisePending) document.removeEventListener("visibilitychange", visibilityListener);
      // if not connected, then wait for connection and ping server for latest msg.
      if (!currentSocketConnection.connected && document.visibilityState === "visible") {
        reconnect();
      }
    };
    const disconnectListener = () => {
      log.debug("socket disconnected", isPromisePending);
      if (isPromisePending) {
        log.error("socket disconnected unexpectedly, reconnecting socket");
        reconnect();
      } else {
        currentSocketConnection.removeListener("disconnect", disconnectListener);
      }
    };
    currentSocketConnection.on("disconnect", disconnectListener);
    const returnPromise = new Promise((resolve, reject) => {
      const listener = async ev => {
        try {
          const decData = await decryptData(topicPrivKey.toString("hex"), ev);
          log.info("got data", decData);
          resolve(decData);
        } catch (error) {
          log.error(error);
          reject(error);
        } finally {
          isPromisePending = false;
          document.removeEventListener("visibilitychange", visibilityListener);
        }
      };
      log.info("listening to", `${topicPubKey}_success`);
      currentSocketConnection.once(`${topicPubKey}_success`, listener);
    });
    if (typeof document !== "undefined") document.addEventListener("visibilitychange", visibilityListener);
    return returnPromise;
  }
  cleanup() {
    if (this.SOCKET_CONN) {
      this.SOCKET_CONN.disconnect();
      this.SOCKET_CONN = null;
    }
  }
  getSocketConnection() {
    if (this.SOCKET_CONN) return this.SOCKET_CONN;
    const localSocketConnection = io(this.options.socketUrl, {
      transports: ["websocket", "polling"],
      // use WebSocket first, if available
      withCredentials: true,
      reconnectionDelayMax: 10000,
      reconnectionAttempts: 10
    });
    localSocketConnection.on("connect_error", err => {
      // revert to classic upgrade
      localSocketConnection.io.opts.transports = ["polling", "websocket"];
      log.error("connect error", err);
    });
    localSocketConnection.on("connect", async () => {
      const {
        engine
      } = localSocketConnection.io;
      log.debug("initially connected to", engine.transport.name); // in most cases, prints "polling"
      engine.once("upgrade", () => {
        // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)
        log.debug("upgraded", engine.transport.name); // in most cases, prints "websocket"
      });
      engine.once("close", reason => {
        // called when the underlying connection is closed
        log.debug("connection closed", reason);
      });
    });
    localSocketConnection.on("error", err => {
      log.error("socket errored", err);
      localSocketConnection.disconnect();
    });
    this.SOCKET_CONN = localSocketConnection;
    return this.SOCKET_CONN;
  }
}

export { SecurePubSub };
