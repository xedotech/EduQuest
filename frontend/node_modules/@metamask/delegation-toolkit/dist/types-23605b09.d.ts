import { Client, OneOf, Hex, Address, WalletClient, Transport, Chain, Account } from 'viem';
import { Prettify } from 'viem/chains';
import { Implementation, MultiSigDeleGatorDeployParams, HybridDeleGatorDeployParams, DeleGatorEnvironment, Delegation, HybridDeleGator, MultiSigDeleGator } from '@metamask/delegation-utils';
import { SmartAccountImplementation, entryPoint07Abi, SmartAccount, WebAuthnAccount } from 'viem/account-abstraction';

type DeployParams<TImplementation extends Implementation> = {
    [Implementation.MultiSig]: MultiSigDeleGatorDeployParams;
    [Implementation.Hybrid]: HybridDeleGatorDeployParams;
}[TImplementation];
type ToMetaMaskSmartAccountParameters<TImplementation extends Implementation> = {
    client: Client;
    implementation: TImplementation;
    signatory: SignatoryConfigByImplementation<TImplementation>;
    environment?: DeleGatorEnvironment;
} & OneOf<{
    deployParams: DeployParams<TImplementation>;
    deploySalt: Hex;
} | {
    address: Address;
}>;
type SignUserOperationParams = Parameters<ToMetaMaskSmartAccountReturnType<Implementation>['signUserOperation']>[0];
type SignDelegationParams = {
    delegation: Omit<Delegation, 'signature'>;
} & {
    chainId?: number;
};
type MetaMaskSmartAccountImplementation<TImplementation extends Implementation> = SmartAccountImplementation<typeof entryPoint07Abi, '0.7', {
    abi: TImplementation extends Implementation.Hybrid ? typeof HybridDeleGator.abi : typeof MultiSigDeleGator.abi;
    signDelegation: (params: SignDelegationParams) => Promise<Hex>;
    environment: DeleGatorEnvironment;
}>;
type MetaMaskSmartAccount<TImplementation extends Implementation = Implementation> = ToMetaMaskSmartAccountReturnType<TImplementation>;
type ToMetaMaskSmartAccountReturnType<TImplementation extends Implementation> = Prettify<SmartAccount<MetaMaskSmartAccountImplementation<TImplementation>>>;
type InternalSignatory = Pick<SmartAccountImplementation, 'signMessage' | 'signTypedData' | 'getStubSignature'>;
type WalletSignatoryConfig = {
    walletClient: WalletClient<Transport, Chain | undefined, Account>;
};
type AccountSignatoryConfig = {
    account: Pick<Account, 'signMessage' | 'signTypedData' | 'address'>;
};
type WebAuthnSignatoryConfig = {
    webAuthnAccount: WebAuthnAccount;
    keyId: Hex;
};
type HybridSignatoryConfig = WalletSignatoryConfig | AccountSignatoryConfig | WebAuthnSignatoryConfig;
type MultiSigSignatoryConfig = (WalletSignatoryConfig | AccountSignatoryConfig)[];
type SignatoryConfigByImplementation<TImplementation> = TImplementation extends Implementation.Hybrid ? HybridSignatoryConfig : MultiSigSignatoryConfig;
type Call = {
    to: Hex;
    data?: Hex | undefined;
    value?: bigint | undefined;
};

export { AccountSignatoryConfig as A, Call as C, DeployParams as D, HybridSignatoryConfig as H, InternalSignatory as I, MetaMaskSmartAccountImplementation as M, SignatoryConfigByImplementation as S, ToMetaMaskSmartAccountParameters as T, WalletSignatoryConfig as W, ToMetaMaskSmartAccountReturnType as a, SignUserOperationParams as b, SignDelegationParams as c, MetaMaskSmartAccount as d, WebAuthnSignatoryConfig as e, MultiSigSignatoryConfig as f };
