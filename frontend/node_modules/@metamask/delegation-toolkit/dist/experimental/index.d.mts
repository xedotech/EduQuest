import { Address, Hex, Client, Transport, Chain, Account, RpcSchema, SendTransactionRequest, SendTransactionParameters, PublicClient, OneOf, WalletClient } from 'viem';
import { SmartAccount, SendUserOperationParameters } from 'viem/account-abstraction';
import { C as Call } from '../types-23605b09.js';
import { Delegation } from '@metamask/delegation-utils';
import 'viem/chains';

type Permission = {
    data: Record<string, unknown>;
    type: string;
    rules?: Record<string, unknown>;
    isRequired?: boolean;
};
type SignerParam = Address | {
    type: 'account';
    data: {
        address: Address;
    };
} | {
    type: string;
    data: Record<string, unknown>;
};
type PermissionRequest<Signer extends SignerParam> = {
    chainId: number;
    address?: Address;
    expiry: number;
    permission: Permission;
    signer: Signer;
    isAdjustmentAllowed?: boolean;
};
type PermissionResponse = PermissionRequest<Address> & {
    context: Hex;
    accountMeta?: {
        factory: Hex;
        factoryData: Hex;
    }[];
    signerMeta?: {
        userOpBuilder?: Hex;
        delegationManager?: Hex;
    };
};
type GrantPermissionsParameters = PermissionRequest<SignerParam>[];
type GrantPermissionsReturnType = PermissionResponse[];
type SnapAuthorizations = Record<string, {
    version: string;
    id: string;
    enabled: boolean;
    blocked: boolean;
}>;
type SnapRpcSchema = RpcSchema & [
    {
        Method: 'wallet_invokeSnap';
        Params: {
            snapId: string;
            request: {
                method: string;
                params: unknown[];
            };
        };
        ReturnType: unknown;
    },
    {
        Method: 'wallet_getSnaps';
        Params: {};
        ReturnType: SnapAuthorizations;
    },
    {
        Method: 'wallet_requestSnaps';
        Params: Record<string, unknown>;
        ReturnType: SnapAuthorizations;
    }
];
type SnapClient = Client<Transport, Chain | undefined, Account | undefined, SnapRpcSchema>;
declare function erc7715GrantPermissionsAction(client: SnapClient, parameters: GrantPermissionsParameters, kernelSnapId?: string): Promise<GrantPermissionsReturnType>;

type DelegatedCall = Call & OneOf<{
    permissionsContext: Hex;
    delegationManager: Hex;
} | {}>;
type SendTransactionWithDelegationParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, request extends SendTransactionRequest<chain, chainOverride> = SendTransactionRequest<chain, chainOverride>> = SendTransactionParameters<chain, account, chainOverride, request> & {
    permissionsContext: Hex;
    delegationManager: Hex;
};
type SendUserOperationWithDelegationParameters<account extends SmartAccount | undefined = SmartAccount | undefined, accountOverride extends SmartAccount | undefined = SmartAccount | undefined> = SendUserOperationParameters<account, accountOverride, DelegatedCall[]> & {
    accountMetadata?: {
        factory: Hex;
        factoryData: Hex;
    }[];
    calls: DelegatedCall[];
    publicClient: PublicClient<Transport, Chain>;
};

declare enum DelegationStoreFilter {
    Given = "GIVEN",
    Received = "RECEIVED",
    All = "ALL"
}
type Environment = {
    apiUrl: string;
};
type DelegationStorageConfig = {
    apiKey: string;
    apiKeyId: string;
    environment: Environment;
    fetcher?: typeof fetch;
};
declare class DelegationStorageClient {
    private readonly _apiVersionPrefix;
    private readonly _config;
    private readonly _fetcher;
    private readonly _apiUrl;
    constructor(config: DelegationStorageConfig);
    private _initializeFetcher;
    getDelegationChain(leafDelegationOrDelegationHash: Hex | Delegation): Promise<Delegation[]>;
    fetchDelegations(deleGatorAddress: Hex, filterMode?: DelegationStoreFilter): Promise<Delegation[]>;
    storeDelegation(delegation: Delegation): Promise<Hex>;
}

declare const erc7715ProviderActions: (snapIds?: {
    kernelSnapId: string;
    providerSnapId: string;
}) => (client: Client<Transport>) => {
    grantPermissions: (parameters: GrantPermissionsParameters) => Promise<GrantPermissionsReturnType>;
};
declare const erc7710WalletActions: () => (client: WalletClient) => {
    sendTransactionWithDelegation: (args: SendTransactionWithDelegationParameters) => Promise<`0x${string}`>;
};
declare const erc7710BundlerActions: () => (client: Client) => {
    sendUserOperationWithDelegation: (args: SendUserOperationWithDelegationParameters) => Promise<`0x${string}`>;
};

export { DelegationStorageClient, DelegationStorageConfig, DelegationStoreFilter, Environment, GrantPermissionsParameters, GrantPermissionsReturnType, erc7710BundlerActions, erc7710WalletActions, erc7715ProviderActions, erc7715GrantPermissionsAction as grantPermissions };
